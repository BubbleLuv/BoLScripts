--[[
		-- TO DO
			--> GapClose Q --> R if one enemy nearby
			--> Improve TargetSelector
					Not focus target only reachable by gapclose if other enemies nearby
			--> Auto W back if under turret and no enemies nearby
			--> Auto E in laning phase if jungler nearby
					--> User will be able to check range of leblanc & jungler
			--> Mimic Control
					--> Once I learn how to properly work with packets, meh

		Changelog
			* 1.99
				Improved Smart W
				Added Ignite Checks
				Added Overkill checks
				Fixed the combos
				Better TargetSelecting
				Better combo
				Better GapClosing

			* 2.00
				Script is now paid

			* 2.01
				Switched host
				Forced return W in harass

			* 2.02
				Multiple overkill checks
				Better way of detecting R
				Better gapclosing
				Faster combos
				Better targetselecting
				Message that tells whether you will die or not from ignite
				Auto Level
				Fixed the other killsteal options
				Better KillSteal in general
					Now takes Q buff in according

			* 2.03
				Bug fixes
				Small fix to W casting too fast
				Few more return checks for W
				
			Cracked by Berb - Nulled.io


--]]


if myHero.charName:lower() ~= "leblanc" then return end

_G.LeBlanc_Loaded = true
_G.LeBlanc_ScriptVersion = 2.03
_G.LeBlanc_Author = "Totally Legit"
_G.LeBlanc_PerformAutoUpdate = false

assert(load(Base64Decode("ZnVuY3Rpb24gU2F5KGRiYSkNCiAgcHJpbnQoIjxmb250IGNvbG9yPVwiI0ZGMDAwMFwiPjxiPlRvdGFsbHkgTGVCbGFuYzo8L2I+PC9mb250PiA8Zm9udCBjb2xvcj1cIiNGRkZGRkZcIj4iIC4uIGRiYSAuLiAiPC9mb250PiIpDQplbmQNCmlmIG5vdCBWSVBfVVNFUiB0aGVuDQogIHJldHVybiBTYXkoIllvdSBuZWVkIHRvIGJlIFZJUCB0byB1c2UgdGhpcyBzY3JpcHQuIikNCmVuZA0KU2F5KCJMb2FkaW5nLi4uIikNCmxvY2FsIF9kID0gIiINCmxvY2FsIGFkID0gc3RyaW5nLmdzdWIoR2V0VXNlcigpLCAiJXMrIiwgIl8iKQ0KbG9jYWwgYl9hID0gZmFsc2UNCmxvY2FsIGNfYSA9IHRydWUNCmxvY2FsIGRfYSA9IGZhbHNlDQpTYXkoIkNoZWNraW5nIGF1dGguLi4iKQ0KaWYgZF9hIHRoZW4NCiAgcmV0dXJuIFNheSgiWW91IGFyZSBub3QgYXV0aGVkIHRvIHVzZSB0aGlzIHNjcmlwdCBhbmQgeW91ciB0cmlhbCBoYXMgcHJvYmFibHkgZXhwaXJlZC4gUGxlYXNlIGJ1eSB0aGUgc2NyaXB0IHRvIGJlIGFibGUgdG8ga2VlcCB1c2luZyBpdC4iKQ0KZW5kDQppZiBub3QgY19hIGFuZCBub3QgYl9hIHRoZW4NCiAgcmV0dXJuIFNheSgiWW91IGFyZSBub3QgYXV0aGVkIHRvIHVzZSB0aGlzIHNjcmlwdC4iKQ0KZW5kDQppZiBjX2EgdGhlbg0KICBTYXkoIkF1dGhlZCBhcyAiIC4uIGFkIC4uICIuIEVuam95LiIpDQplbmQNCmlmIGJfYSB0aGVuDQogIFNheSgiWW91IGFyZSBvbiB0cmlhbCBwZXJpb2QuIFRoZSBwZXJpb2QgbGFzdHMgZm9yIDI0IGhvdXJzLiBVc2UgaXQgd2l0aCBjYXV0aW9ucyEiKQ0KZW5kDQpfRy5MZWJsYW5jX2luaXRpYWxpemVkID0gdHJ1ZQ0KZnVuY3Rpb24gQXV0b1VwZGF0ZSgpDQogIGxvY2FsIGRiYSA9IHt9DQogIGRiYS5WZXJzaW9uID0gX0cuTGVCbGFuY19TY3JpcHRWZXJzaW9uDQogIGRiYS5Vc2VIdHRwcyA9IHRydWUNCiAgZGJhLkhvc3QgPSAicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSINCiAgZGJhLlZlcnNpb25QYXRoID0gIi9OaWNraWVib3kvQm9ML21hc3Rlci92ZXJzaW9uL0xlQmxhbmMudmVyc2lvbiINCiAgZGJhLlNjcmlwdFBhdGggPSAiL05pY2tpZWJveS9Cb0wvbWFzdGVyL0xlQmxhbmMubHVhIg0KICBkYmEuU2F2ZVBhdGggPSBTQ1JJUFRfUEFUSCAuLiBHZXRDdXJyZW50RW52KCkuRklMRV9OQU1FDQogIGZ1bmN0aW9uIGRiYS5DYWxsYmFja1VwZGF0ZShfY2EsIGFjYSkNCiAgICBTYXkoIlN1Y2Nlc2Z1bGx5IHVwZGF0ZWQgKCAiIC4uIGFjYSAuLiAiID0+ICIgLi4gX2NhIC4uICIpLiIpDQogIGVuZA0KICBmdW5jdGlvbiBkYmEuQ2FsbGJhY2tOb1VwZGF0ZShfY2EpDQogICAgU2F5KCJObyBVcGRhdGVzIEZvdW5kIikNCiAgZW5kDQogIGZ1bmN0aW9uIGRiYS5DYWxsYmFja05ld1ZlcnNpb24oX2NhKQ0KICAgIFNheSgiTmV3IFZlcnNpb24gZm91bmQgKCIgLi4gX2NhIC4uICIpLiBQbGVhc2Ugd2FpdCB1bnRpbCBpdHMgZG93bmxvYWRlZC4iKQ0KICBlbmQNCiAgZnVuY3Rpb24gZGJhLkNhbGxiYWNrRXJyb3IoX2NhKQ0KICAgIFNheSgiRXJyb3Igd2hpbGUgRG93bmxvYWRpbmcuIFBsZWFzZSB0cnkgYWdhaW4uIikNCiAgZW5kDQogIFN4U2NyaXB0VXBkYXRlKGRiYS5WZXJzaW9uLCBkYmEuVXNlSHR0cHMsIGRiYS5Ib3N0LCBkYmEuVmVyc2lvblBhdGgsIGRiYS5TY3JpcHRQYXRoLCBkYmEuU2F2ZVBhdGgsIGRiYS5DYWxsYmFja1VwZGF0ZSwgZGJhLkNhbGxiYWNrTm9VcGRhdGUsIGRiYS5DYWxsYmFja05ld1ZlcnNpb24sIGRiYS5DYWxsYmFja0Vycm9yKQ0KZW5kDQpsb2NhbCBfYWEsIGFhYSwgYmFhLCBjYWEsIGRhYSwgX2JhLCBhYmEgPSBmYWxzZSwgbmlsLCBuaWwsIG5pbCwgbmlsLCBuaWwsIG5pbA0KbG9jYWwgYmJhLCBjYmEgPSBmYWxzZSwgbmlsDQppZiBGaWxlRXhpc3QoTElCX1BBVEggLi4gIlZQcmVkaWN0aW9uLmx1YSIpIHRoZW4NCiAgYmJhID0gdHJ1ZQ0KICByZXF1aXJlKCJWUHJlZGljdGlvbiIpDQplbmQNCmlmIFZJUF9VU0VSIGFuZCBGaWxlRXhpc3QoTElCX1BBVEggLi4gIkRpdmluZVByZWQubHVhIikgYW5kIEZpbGVFeGlzdChMSUJfUEFUSCAuLiAiRGl2aW5lUHJlZC5sdWFjIikgdGhlbg0KICBjYWEgPSB0cnVlDQogIHJlcXVpcmUoIkRpdmluZVByZWQiKQ0KZW5kDQppZiBGaWxlRXhpc3QoTElCX1BBVEggLi4gIkhQcmVkaWN0aW9uLmx1YSIpIHRoZW4NCiAgZGFhID0gdHJ1ZQ0KICByZXF1aXJlKCJIUHJlZGljdGlvbiIpDQplbmQNCmZ1bmN0aW9uIERlY2xhcmVWYXJpYWJsZXMoKQ0KICBRcmVhZHksIFdyZWFkeSwgRXJlYWR5LCBScmVhZHkgPSBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZQ0KICBTcGVsbHMgPSB7DQogICAgUCA9IHsNCiAgICAgIG5hbWUgPSAiTGVCbGFuY19CYXNlX1BfcG9vZi50cm95Ig0KICAgIH0sDQogICAgQUEgPSB7DQogICAgICByYW5nZSA9IDUyNSwNCiAgICAgIG5hbWUgPSAiQmFzaWNBdHRhY2siDQogICAgfSwNCiAgICBRID0gew0KICAgICAgbmFtZSA9ICJTaWdpbCBvZiBNYWxpY2UiLA0KICAgICAgc3BlbGxuYW1lID0gIkxlYmxhbmNDaGFvc09yYiIsDQogICAgICByYW5nZSA9IDcwMCwNCiAgICAgIHNwZWVkID0gMjAwMCwNCiAgICAgIG1hcmtUaW1lciA9IDMuNSwNCiAgICAgIGRlbGF5ID0gMCwNCiAgICAgIGFjdGl2YXRlZCA9IDAsDQogICAgICBidWZmUSA9ICJMZWJsYW5jQ2hhb3NPcmIiLA0KICAgICAgYnVmZlIgPSAiTGVibGFuY0NoYW9zT3JiTSINCiAgICB9LA0KICAgIFcgPSB7DQogICAgICBuYW1lID0gIkRpc3RvcnRpb24iLA0KICAgICAgc3BlbGxuYW1lID0gIkxlYmxhbmNTbGlkZSIsDQogICAgICByYW5nZSA9IDY1MCwNCiAgICAgIHJhZGl1cyA9IDI1MCwNCiAgICAgIHNwZWVkID0gMjAwMCwNCiAgICAgIGRlbGF5ID0gMC4yNSwNCiAgICAgIGR1cmF0aW9uID0gNCwNCiAgICAgIHRpbWVBY3RpdmF0ZWQgPSAwLA0KICAgICAgaXNBY3RpdmF0ZWQgPSBmYWxzZSwNCiAgICAgIHN0YXJ0UG9zID0gbXlIZXJvLnBvcw0KICAgIH0sDQogICAgRSA9IHsNCiAgICAgIG5hbWUgPSAiRXRoZXJlYWwgQ2hhaW5zIiwNCiAgICAgIHNwZWxsbmFtZSA9ICJMZWJsYW5jU291bFNoYWNrbGUiLA0KICAgICAgcmFuZ2UgPSA5NTAsDQogICAgICBzcGVlZCA9IDE2MDAsDQogICAgICBkZWxheSA9IDAuMjUsDQogICAgICByYWRpdXMgPSA5NQ0KICAgIH0sDQogICAgUiA9IHsNCiAgICAgIG5hbWUgPSAiTWltaWMiLA0KICAgICAgc3BlbGxuYW1lID0gIkxlYmxhbmNNaW1pYyIsDQogICAgICBRbmFtZSA9ICJMZWJsYW5jQ2hhb3NPcmJNIiwNCiAgICAgIFduYW1lID0gIkxlYmxhbmNTbGlkZU0iLA0KICAgICAgV3JldHVybm5hbWUgPSAibGVibGFuY3NsaWRlcmV0dXJubSIsDQogICAgICBFbmFtZSA9ICJMZWJsYW5jU291bFNoYWNrbGVNIg0KICAgIH0sDQogICAgV1IgPSB7DQogICAgICBkdXJhdGlvbiA9IDQsDQogICAgICBzcGVsbG5hbWUgPSAiTGVibGFuY1NsaWRlTSIsDQogICAgICB0aW1lQWN0aXZhdGVkID0gMCwNCiAgICAgIGlzQWN0aXZhdGVkID0gZmFsc2UsDQogICAgICBzdGFydFBvcyA9IG15SGVyby5wb3MNCiAgICB9DQogIH0NCiAgclNwZWxsTmFtZSA9IHsNCiAgICBMZWJsYW5jQ2hhb3NPcmJNID0gdHJ1ZSwNCiAgICBMZWJsYW5jU2xpZGVNID0gdHJ1ZSwNCiAgICBMZWJsYW5jU291bFNoYWNrbGVNID0gdHJ1ZQ0KICB9DQogIEl0ZW1zID0gew0KICAgIEJSSyA9IHsNCiAgICAgIGlkID0gMzE1MywNCiAgICAgIHJhbmdlID0gNDUwLA0KICAgICAgcmVxVGFyZ2V0ID0gdHJ1ZSwNCiAgICAgIHNsb3QgPSBuaWwNCiAgICB9LA0KICAgIEJXQyA9IHsNCiAgICAgIGlkID0gMzE0NCwNCiAgICAgIHJhbmdlID0gNDAwLA0KICAgICAgcmVxVGFyZ2V0ID0gdHJ1ZSwNCiAgICAgIHNsb3QgPSBuaWwNCiAgICB9LA0KICAgIEhHQiA9IHsNCiAgICAgIGlkID0gMzE0NiwNCiAgICAgIHJhbmdlID0gNDAwLA0KICAgICAgcmVxVGFyZ2V0ID0gdHJ1ZSwNCiAgICAgIHNsb3QgPSBuaWwNCiAgICB9LA0KICAgIFJTSCA9IHsNCiAgICAgIGlkID0gMzA3NCwNCiAgICAgIHJhbmdlID0gMzUwLA0KICAgICAgcmVxVGFyZ2V0ID0gZmFsc2UsDQogICAgICBzbG90ID0gbmlsDQogICAgfSwNCiAgICBTVEQgPSB7DQogICAgICBpZCA9IDMxMzEsDQogICAgICByYW5nZSA9IDM1MCwNCiAgICAgIHJlcVRhcmdldCA9IGZhbHNlLA0KICAgICAgc2xvdCA9IG5pbA0KICAgIH0sDQogICAgVE1UID0gew0KICAgICAgaWQgPSAzMDc3LA0KICAgICAgcmFuZ2UgPSAzNTAsDQogICAgICByZXFUYXJnZXQgPSBmYWxzZSwNCiAgICAgIHNsb3QgPSBuaWwNCiAgICB9LA0KICAgIFlHQiA9IHsNCiAgICAgIGlkID0gMzE0MiwNCiAgICAgIHJhbmdlID0gMzUwLA0KICAgICAgcmVxVGFyZ2V0ID0gZmFsc2UsDQogICAgICBzbG90ID0gbmlsDQogICAgfSwNCiAgICBCRlQgPSB7DQogICAgICBpZCA9IDMxODgsDQogICAgICByYW5nZSA9IDc1MCwNCiAgICAgIHJlcVRhcmdldCA9IHRydWUsDQogICAgICBzbG90ID0gbmlsDQogICAgfSwNCiAgICBSTkQgPSB7DQogICAgICBpZCA9IDMxNDMsDQogICAgICByYW5nZSA9IDI3NSwNCiAgICAgIHJlcVRhcmdldCA9IGZhbHNlLA0KICAgICAgc2xvdCA9IG5pbA0KICAgIH0NCiAgfQ0KICBBQWRpc2FibGVkID0gZmFsc2UNCiAgbGFzdEFjdGl2YXRlZCA9IG5pbA0KICBjYXN0ZWRUaHJvdWdoSGFyYXNzID0gZmFsc2UNCiAgS2lsbFRleHQgPSB7fQ0KICBjYmEsIERQID0gbmlsLCBuaWwNCiAgUHJvZFcsIFByb2RFID0gbmlsLCBuaWwNCiAgZVNTLCB3U1MgPSBuaWwsIG5pbA0KICBpZ25pdGUsIGhlYWwsIGJhcnJpZXIsIElyZWFkeSwgSHJlYWR5LCBCcmVhZHkgPSBmYWxzZSwgbmlsLCBuaWwsIG5pbCwgbmlsLCBuaWwNCiAgaWduaXRlVGljayA9IHt9DQogIGVuZW1pZXNCdWZmcyA9IHt9DQogIGlzS2lsbGVkID0ge30NCiAgZm9yIGRiYSwgX2NhIGluIHBhaXJzKEdldEVuZW15SGVyb2VzKCkpIGRvDQogICAgaWYgX2NhIHRoZW4NCiAgICAgIGlnbml0ZVRpY2tbX2NhLm5ldHdvcmtJRF0gPSB7DQogICAgICAgIHN0YXJ0VCA9IG9zLmNsb2NrKCksDQogICAgICAgIGhlYWx0aCA9IF9jYS5oZWFsdGgsDQogICAgICAgIGlzSWduaXRlZCA9IGZhbHNlDQogICAgICB9DQogICAgICBlbmVtaWVzQnVmZnNbX2NhLm5ldHdvcmtJRF0gPSB7DQogICAgICAgIHJlY2VpdmVkID0gZmFsc2UsDQogICAgICAgIGVuZFRpbWUgPSBvcy5jbG9jaygpDQogICAgICB9DQogICAgICBpc0tpbGxlZFtfY2EubmV0d29ya0lEXSA9IGZhbHNlDQogICAgZW5kDQogIGVuZA0KICBsYXN0UUNhc3QgPSB7DQogICAgdGFyZ2V0ID0gbmlsLA0KICAgIGVuZFQgPSBvcy5jbG9jaygpDQogIH0NCiAgaWduaXRlZFRhYmxlID0gew0KICAgIGlnbml0ZWQgPSB0cnVlLA0KICAgIHNvdXJjZSA9IG5pbCwNCiAgICB0aW1lID0gb3MuY2xvY2soKSwNCiAgICBoYXNTYWlkID0gZmFsc2UsDQogICAgd2lsbEtpbGxNZSA9IGZhbHNlDQogIH0NCiAgYXV0b0xldmVsVGFibGVzID0gew0KICAgIHsNCiAgICAgIF9RLA0KICAgICAgX1csDQogICAgICBfRSwNCiAgICAgIF9RLA0KICAgICAgX1EsDQogICAgICBfUiwNCiAgICAgIF9RLA0KICAgICAgX1csDQogICAgICBfUSwNCiAgICAgIF9XLA0KICAgICAgX1IsDQogICAgICBfVywNCiAgICAgIF9XLA0KICAgICAgX0UsDQogICAgICBfRSwNCiAgICAgIF9SLA0KICAgICAgX0UsDQogICAgICBfRQ0KICAgIH0sDQogICAgew0KICAgICAgX1csDQogICAgICBfUSwNCiAgICAgIF9FLA0KICAgICAgX1csDQogICAgICBfVywNCiAgICAgIF9SLA0KICAgICAgX1csDQogICAgICBfUSwNCiAgICAgIF9XLA0KICAgICAgX1EsDQogICAgICBfUiwNCiAgICAgIF9RLA0KICAgICAgX1EsDQogICAgICBfRSwNCiAgICAgIF9FLA0KICAgICAgX1IsDQogICAgICBfRSwNCiAgICAgIF9FDQogICAgfQ0KICB9DQogIGxhc3RMZXZlbCA9IG15SGVyby5sZXZlbCAtIDENCiAgWmhvbnlhc1NvdCA9IG5pbA0KICBaaHlvbmFzUmVhZHkgPSBmYWxzZQ0KICBjbG9uZSA9IG5pbA0KICBjbG9uZUFjdGl2ZSA9IGZhbHNlDQogIHRhcmdldCA9IG5pbA0KICB0cyA9IFRhcmdldFNlbGVjdG9yKFRBUkdFVF9MT1dfSFBfUFJJT1JJVFksIDcwMCkNCiAgdHMubmFtZSA9ICJUUyINCiAgdHNMb25nID0gVGFyZ2V0U2VsZWN0b3IoVEFSR0VUX0xPV19IUF9QUklPUklUWSwgMTUwMCkNCiAgdHNMb25nLm5hbWUgPSAiR2FwQ2xvc2UiDQogIGV4YW1wbGVUYXJnZXQgPSBuaWwNCiAgZm9yY2VkVGFyZ2V0ID0gbmlsDQogIGZvcmNlZFRhcmdldFRpbWUgPSBvcy5jbG9jaygpDQogIGVuZW15TWluaW9ucyA9IG1pbmlvbk1hbmFnZXIoTUlOSU9OX0VORU1ZLCA2MDAsIG15SGVybywgTUlOSU9OX1NPUlRfSEVBTFRIX0RFQykNCiAgX0cub2xkRHJhd0NpcmNsZSA9IHJhd2dldChfRywgIkRyYXdDaXJjbGUiKQ0KICBfRy5EcmF3Q2lyY2xlID0gRHJhd0NpcmNsZTINCiAgQmFzZUFuaW1hdGlvblRpbWUgPSB7fQ0KICBCYXNlV2luZFVwVGltZSA9IHt9DQogIGhhc1BvdGlvbkFjdGl2ZSA9IGZhbHNlDQogIHByaW9yaXR5VGFibGUgPSB7DQogICAgQVAgPSB7DQogICAgICAiQW5uaWUiLA0KICAgICAgIkFocmkiLA0KICAgICAgIkFrYWxpIiwNCiAgICAgICJBbml2aWEiLA0KICAgICAgIkFubmllIiwNCiAgICAgICJCcmFuZCIsDQogICAgICAiQ2Fzc2lvcGVpYSIsDQogICAgICAiRGlhbmEiLA0KICAgICAgIkV2ZWx5bm4iLA0KICAgICAgIkZpZGRsZVN0aWNrcyIsDQogICAgICAiRml6eiIsDQogICAgICAiR3JhZ2FzIiwNCiAgICAgICJIZWltZXJkaW5nZXIiLA0KICAgICAgIkthcnRodXMiLA0KICAgICAgIkthc3NhZGluIiwNCiAgICAgICJLYXRhcmluYSIsDQogICAgICAiS2F5bGUiLA0KICAgICAgIktlbm5lbiIsDQogICAgICAiTGVibGFuYyIsDQogICAgICAiTGlzc2FuZHJhIiwNCiAgICAgICJMdXgiLA0KICAgICAgIk1hbHphaGFyIiwNCiAgICAgICJNb3JkZWthaXNlciIsDQogICAgICAiTW9yZ2FuYSIsDQogICAgICAiTmlkYWxlZSIsDQogICAgICAiT3JpYW5uYSIsDQogICAgICAiUnl6ZSIsDQogICAgICAiU2lvbiIsDQogICAgICAiU3dhaW4iLA0KICAgICAgIlN5bmRyYSIsDQogICAgICAiVGVlbW8iLA0KICAgICAgIlR3aXN0ZWRGYXRlIiwNCiAgICAgICJWZWlnYXIiLA0KICAgICAgIlZpa3RvciIsDQogICAgICAiVmxhZGltaXIiLA0KICAgICAgIlhlcmF0aCIsDQogICAgICAiWmlnZ3MiLA0KICAgICAgIlp5cmEiLA0KICAgICAgIlZlbGtveiINCiAgICB9LA0KICAgIFN1cHBvcnQgPSB7DQogICAgICAiQWxpc3RhciIsDQogICAgICAiQmxpdHpjcmFuayIsDQogICAgICAiSmFubmEiLA0KICAgICAgIkthcm1hIiwNCiAgICAgICJMZW9uYSIsDQogICAgICAiTHVsdSIsDQogICAgICAiTmFtaSIsDQogICAgICAiTnVudSIsDQogICAgICAiU29uYSIsDQogICAgICAiU29yYWthIiwNCiAgICAgICJUYXJpYyIsDQogICAgICAiVGhyZXNoIiwNCiAgICAgICJaaWxlYW4iLA0KICAgICAgIkJyYXVtIg0KICAgIH0sDQogICAgVGFuayA9IHsNCiAgICAgICJBbXVtdSIsDQogICAgICAiQ2hvZ2F0aCIsDQogICAgICAiRHJNdW5kbyIsDQogICAgICAiR2FsaW8iLA0KICAgICAgIkhlY2FyaW0iLA0KICAgICAgIk1hbHBoaXRlIiwNCiAgICAgICJNYW9rYWkiLA0KICAgICAgIk5hc3VzIiwNCiAgICAgICJSYW1tdXMiLA0KICAgICAgIlNlanVhbmkiLA0KICAgICAgIk5hdXRpbHVzIiwNCiAgICAgICJTaGVuIiwNCiAgICAgICJTaW5nZWQiLA0KICAgICAgIlNrYXJuZXIiLA0KICAgICAgIlZvbGliZWFyIiwNCiAgICAgICJXYXJ3aWNrIiwNCiAgICAgICJZb3JpY2siLA0KICAgICAgIlphYyINCiAgICB9LA0KICAgIEFEX0NhcnJ5ID0gew0KICAgICAgIkFzaGUiLA0KICAgICAgIkNhaXRseW4iLA0KICAgICAgIkNvcmtpIiwNCiAgICAgICJEcmF2ZW4iLA0KICAgICAgIkV6cmVhbCIsDQogICAgICAiR3JhdmVzIiwNCiAgICAgICJKYXljZSIsDQogICAgICAiSmlueCIsDQogICAgICAiS29nTWF3IiwNCiAgICAgICJMdWNpYW4iLA0KICAgICAgIk1hc3RlcllpIiwNCiAgICAgICJNaXNzRm9ydHVuZSIsDQogICAgICAiUGFudGhlb24iLA0KICAgICAgIlF1aW5uIiwNCiAgICAgICJTaGFjbyIsDQogICAgICAiU2l2aXIiLA0KICAgICAgIlRhbG9uIiwNCiAgICAgICJUcnluZGFtZXJlIiwNCiAgICAgICJUcmlzdGFuYSIsDQogICAgICAiVHdpdGNoIiwNCiAgICAgICJVcmdvdCIsDQogICAgICAiVmFydXMiLA0KICAgICAgIlZheW5lIiwNCiAgICAgICJZYXN1byIsDQogICAgICAiWmVkIiwNCiAgICAgICJLYWxpc3RhIg0KICAgIH0sDQogICAgQnJ1aXNlciA9IHsNCiAgICAgICJBYXRyb3giLA0KICAgICAgIkRhcml1cyIsDQogICAgICAiRWxpc2UiLA0KICAgICAgIkZpb3JhIiwNCiAgICAgICJHYW5ncGxhbmsiLA0KICAgICAgIkdhcmVuIiwNCiAgICAgICJJcmVsaWEiLA0KICAgICAgIkphcnZhbklWIiwNCiAgICAgICJKYXgiLA0KICAgICAgIktoYXppeCIsDQogICAgICAiTGVlU2luIiwNCiAgICAgICJOb2N0dXJuZSIsDQogICAgICAiT2xhZiIsDQogICAgICAiUG9wcHkiLA0KICAgICAgIlJlbmVrdG9uIiwNCiAgICAgICJSZW5nYXIiLA0KICAgICAgIlJpdmVuIiwNCiAgICAgICJSdW1ibGUiLA0KICAgICAgIlNoeXZhbmEiLA0KICAgICAgIlRydW5kbGUiLA0KICAgICAgIlVkeXIiLA0KICAgICAgIlZpIiwNCiAgICAgICJNb25rZXlLaW5nIiwNCiAgICAgICJYaW5aaGFvIg0KICAgIH0NCiAgfQ0KICBjYW5DYXN0U3BlbGxzID0gdHJ1ZQ0KICBSU2tpbGwgPSBuaWwNCiAgUlNraWxsVGltZSA9IG9zLmNsb2NrKCkNCiAgY2FzdGVkRSA9IGZhbHNlDQogIGNhc3RlZEVUaW1lID0gb3MuY2xvY2soKQ0KICBpZiBjYWEgdGhlbg0KICAgIGVTUyA9IExpbmVTUyhTcGVsbHMuRS5zcGVlZCwgU3BlbGxzLkUucmFuZ2UsIFNwZWxscy5FLnJhZGl1cywgU3BlbGxzLkUuZGVsYXkgKiAxMDAwLCAwKQ0KICAgIHdTUyA9IENpcmNsZVNTKFNwZWxscy5XLnNwZWVkLCBTcGVsbHMuVy5yYW5nZSArIDUwLCBTcGVsbHMuVy5yYWRpdXMsIFNwZWxscy5XLmRlbGF5ICogMTAwMCwgbWF0aC5odWdlKQ0KICAgIExvYWREaXZpbmVQcmVkaWN0aW9uKCkNCiAgZW5kDQogIGlmIGJiYSB0aGVuDQogICAgY2JhID0gVlByZWRpY3Rpb24oKQ0KICBlbmQNCiAgaWYgY2FhIHRoZW4NCiAgICBEUCA9IERpdmluZVByZWQoKQ0KICBlbmQNCiAgaWYgZGFhIHRoZW4NCiAgICBIUF9XLCBIUF9FID0gbmlsLCBuaWwNCiAgICBhYmEgPSBIUHJlZGljdGlvbigpDQogICAgTG9hZEhQcmVkaWN0aW9uKCkNCiAgZW5kDQplbmQNCmZ1bmN0aW9uIFJTdGF0ZShkYmEpDQogIGxvY2FsIF9jYSA9IG15SGVybzpHZXRTcGVsbERhdGEoX1IpLm5hbWUNCiAgcmV0dXJuIGRiYSBhbmQgKGRiYSA9PSAiUSIgYW5kIF9jYSA9PSBTcGVsbHMuUi5RbmFtZSBvciBkYmEgPT0gIlciIGFuZCBfY2EgPT0gU3BlbGxzLlIuV25hbWUgb3IgZGJhID09ICJFIiBhbmQgX2NhID09IFNwZWxscy5SLkVuYW1lKQ0KZW5kDQpmdW5jdGlvbiBMb2FkSFByZWRpY3Rpb24oKQ0KICBIUF9FID0gSFBTa2lsbHNob3Qoew0KICAgIHR5cGUgPSAiRGVsYXlMaW5lIiwNCiAgICBkZWxheSA9IDAuMjUsDQogICAgcmFuZ2UgPSA5NTAsDQogICAgc3BlZWQgPSAxNjAwLA0KICAgIGNvbGxpc2lvbk0gPSB0cnVlLA0KICAgIGNvbGxpc2lvbkggPSB0cnVlLA0KICAgIHdpZHRoID0gMTQwDQogIH0pDQogIEhQX1cgPSBIUFNraWxsc2hvdCh7DQogICAgdHlwZSA9ICJEZWxheUNpcmNsZSIsDQogICAgZGVsYXkgPSBTcGVsbHMuVy5kZWxheSwNCiAgICByYW5nZSA9IFNwZWxscy5XLnJhbmdlICsgNTAsDQogICAgc3BlZWQgPSBTcGVsbHMuVy5zcGVlZCwNCiAgICByYWRpdXMgPSBTcGVsbHMuVy5yYWRpdXMNCiAgfSkNCmVuZA0KZnVuY3Rpb24gTG9hZERpdmluZVByZWRpY3Rpb24oKQ0KICBpZiBjYWEgdGhlbg0KICAgIGRpdmluZVByZWRpY3Rpb25UYXJnZXRUYWJsZSA9IHt9DQogICAgZm9yIGRiYSwgX2NhIGluIHBhaXJzKEdldEVuZW15SGVyb2VzKCkpIGRvDQogICAgICBpZiBfY2EgYW5kIF9jYS50eXBlIGFuZCBfY2EudHlwZSA9PSBteUhlcm8udHlwZSB0aGVuDQogICAgICAgIGRpdmluZVByZWRpY3Rpb25UYXJnZXRUYWJsZVtfY2EubmV0d29ya0lEXSA9IERQVGFyZ2V0KF9jYSkNCiAgICAgIGVuZA0KICAgIGVuZA0KICBlbmQNCmVuZA0KZnVuY3Rpb24gQ2hlY2tPcmJXYWxrZXIoKQ0KICBpZiBfRy5SZWJvcm5fSW5pdGlhbGlzZWQgdGhlbg0KICAgIFNBQ0xvYWRlZCA9IHRydWUNCiAgICBNZW51Lm9yYndhbGtlcjphZGRQYXJhbSgiaW5mbyIsICJEZXRlY3RlZCBTQUMiLCBTQ1JJUFRfUEFSQU1fSU5GTywgIiIpDQogICAgX0cuQXV0b0NhcnJ5LlNraWxsczpEaXNhYmxlQWxsKCkNCiAgICBTYXkoIlNBQyBEZXRlY3RlZC4iKQ0KICBlbHNlaWYgRmlsZUV4aXN0KExJQl9QQVRIIC4uICJTeE9yYldhbGsubHVhIikgdGhlbg0KICAgIHJlcXVpcmUoIlN4T3JiV2FsayIpDQogICAgX2FhID0gZmFsc2UNCiAgICBfRy5TeE9yYjpMb2FkVG9NZW51KE1lbnUub3Jid2Fsa2VyKQ0KICAgIFNheSgiU3hPcmIgZGV0ZWN0ZWQuIikNCiAgZW5kDQogIGlmIFNBQ0xvYWRlZCBvciBfYWEgdGhlbg0KICAgIF9iYSA9IHRydWUNCiAgZW5kDQogIGlmIG5vdCBfYmEgdGhlbg0KICAgIFNheSgiWW91IG5lZWQgZWl0aGVyIFNBQyBvciBTeE9yYldhbGsgZm9yIHRoaXMgc2NyaXB0LiBQbGVhc2UgZG93bmxvYWQgb25lIG9mIHRoZW0uIikNCiAgZWxzZWlmIGJfYSB0aGVuDQogICAgU2F5KCJXZWxjb21lICIgLi4gR2V0VXNlcigpIC4uICI6IFRyaWFsIHVzZXIiKQ0KICBlbHNlaWYgY19hIHRoZW4NCiAgICBTYXkoIldlbGNvbWUgIiAuLiBHZXRVc2VyKCkgLi4gIjogUGFpZCB1c2VyIikNCiAgZW5kDQplbmQNCmZ1bmN0aW9uIE9uTG9hZCgpDQogIGlmIF9HLkxlQmxhbmNfUGVyZm9ybUF1dG9VcGRhdGUgdGhlbg0KICAgIC0tQXV0b1VwZGF0ZSgpDQogIGVuZA0KICBEZWNsYXJlVmFyaWFibGVzKCkNCiAgU3VtbW9uZXJzKCkNCiAgRGVsYXlBY3Rpb24oZnVuY3Rpb24oKQ0KICAgIENoZWNrT3JiV2Fsa2VyKCkNCiAgZW5kLCAxMCkNCiAgRHJhd01lbnUoKQ0KICBpZiBoZXJvTWFuYWdlci5pQ291bnQgPT0gMTAgdGhlbg0KICAgIGFycmFuZ2VQcmlvcml0eXMoKQ0KICBlbHNlaWYgaGVyb01hbmFnZXIuaUNvdW50ID09IDYgdGhlbg0KICAgIGFycmFuZ2VQcmlvcml0eXNUVCgpDQogIGVuZA0KZW5kDQpmdW5jdGlvbiBPbkRyYXcoKQ0KICBpZiBteUhlcm8uZGVhZCB0aGVuDQogICAgcmV0dXJuDQogIGVuZA0KICBpZiBNZW51LmRyYXdpbmdzLmRyYXcgdGhlbg0KICAgIGlmIE1lbnUuZHJhd2luZ3MuZHJhd1EgYW5kIENhbkRyYXdTcGVsbChfUSkgdGhlbg0KICAgICAgRHJhd0NpcmNsZShteUhlcm8ueCwgbXlIZXJvLnksIG15SGVyby56LCBTcGVsbHMuUS5yYW5nZSwgUkdCKDI1NSwgMTAyLCAxMDIpKQ0KICAgIGVuZA0KICAgIGlmIE1lbnUuZHJhd2luZ3MuZHJhd1cgYW5kIENhbkRyYXdTcGVsbChfVykgdGhlbg0KICAgICAgRHJhd0NpcmNsZShteUhlcm8ueCwgbXlIZXJvLnksIG15SGVyby56LCBTcGVsbHMuVy5yYW5nZSwgUkdCKDI1NSwgNTEsIDE1MykpDQogICAgZW5kDQogICAgaWYgTWVudS5kcmF3aW5ncy5kcmF3VGFyZ2V0IGFuZCB0YXJnZXQgYW5kIFZhbGlkVGFyZ2V0KHRhcmdldCkgdGhlbg0KICAgICAgbG9jYWwgZGJhID0gV29ybGRUb1NjcmVlbihEM0RYVkVDVE9SMyh0YXJnZXQueCwgdGFyZ2V0LnksIHRhcmdldC56KSkNCiAgICAgIGxvY2FsIF9jYSA9IGRiYS54IC0gMzUNCiAgICAgIGxvY2FsIGFjYSA9IGRiYS55IC0gNDANCiAgICAgIGlmIGZvcmNlZFRhcmdldCBhbmQgZm9yY2VkVGFyZ2V0Lm5ldHdvcmtJRCA9PSB0YXJnZXQubmV0d29ya0lEIHRoZW4NCiAgICAgICAgRHJhd1RleHQoIkZvcmNlZDogIiAuLiB0YXJnZXQuY2hhck5hbWUgLi4gIiAtICIgLi4gIkRpc3RhbmNlIDogIiAuLiBtYXRoLmNlaWwoR2V0RGlzdGFuY2UodGFyZ2V0KSksIDEyLCBfY2EsIGFjYSwgQVJHQigyNTUsIDI1NSwgMjA0LCAwKSkNCiAgICAgIGVsc2UNCiAgICAgICAgRHJhd1RleHQodGFyZ2V0LmNoYXJOYW1lIC4uICIgLSAiIC4uICJEaXN0YW5jZSA6ICIgLi4gbWF0aC5jZWlsKEdldERpc3RhbmNlKHRhcmdldCkpLCAxMiwgX2NhLCBhY2EsIEFSR0IoMjU1LCAyNTUsIDIwNCwgMCkpDQogICAgICBlbmQNCiAgICBlbmQNCiAgICBpZiBNZW51LmRyYXdpbmdzLmRyYXdFIGFuZCBDYW5EcmF3U3BlbGwoX0UpIHRoZW4NCiAgICAgIERyYXdDaXJjbGUobXlIZXJvLngsIG15SGVyby55LCBteUhlcm8ueiwgU3BlbGxzLkUucmFuZ2UsIFJHQigyNTUsIDE1MywgMTUzKSkNCiAgICBlbmQNCiAgICBpZiBNZW51LmRyYXdpbmdzLmRyYXdLaWxsYWJsZSB0aGVuDQogICAgICBmb3IgZGJhLCBfY2EgaW4gcGFpcnMoR2V0RW5lbXlIZXJvZXMoKSkgZG8NCiAgICAgICAgaWYgX2NhIGFuZCBWYWxpZFRhcmdldChfY2EpIHRoZW4NCiAgICAgICAgICBsb2NhbCBhY2EgPSBXb3JsZFRvU2NyZWVuKEQzRFhWRUNUT1IzKF9jYS54LCBfY2EueSwgX2NhLnopKQ0KICAgICAgICAgIGxvY2FsIGJjYSA9IGFjYS54IC0gMzUNCiAgICAgICAgICBsb2NhbCBjY2EgPSBhY2EueSAtIDUwDQogICAgICAgICAgRHJhd1RleHQoS2lsbFRleHRbX2NhLm5ldHdvcmtJRF0sIE1lbnUuZHJhd2luZ3MuZHJhd0tpbGxhYmxlV2lkdGgsIGJjYSwgY2NhLCBBUkdCKDI1NSwgMjU1LCAyMDQsIDApKQ0KICAgICAgICBlbmQNCiAgICAgIGVuZA0KICAgIGVuZA0KICBlbmQNCmVuZA0KZnVuY3Rpb24gQ2FuRHJhd1NwZWxsKGRiYSkNCiAgaWYgTWVudS5kcmF3aW5ncy5kcmF3U3BlbGxSZWFkeSB0aGVuDQogICAgaWYgZGJhID09IF9RIHRoZW4NCiAgICAgIGlmIG5vdCBRcmVhZHkgdGhlbg0KICAgICAgICByZXR1cm4gZmFsc2UNCiAgICAgIGVuZA0KICAgIGVsc2VpZiBkYmEgPT0gX1cgdGhlbg0KICAgICAgaWYgbm90IElzV1JlYWR5KCkgdGhlbg0KICAgICAgICByZXR1cm4gZmFsc2UNCiAgICAgIGVuZA0KICAgIGVsc2VpZiBkYmEgPT0gX0UgYW5kIG5vdCBFcmVhZHkgdGhlbg0KICAgICAgcmV0dXJuIGZhbHNlDQogICAgZW5kDQogIGVuZA0KICByZXR1cm4gdHJ1ZQ0KZW5kDQpmdW5jdGlvbiBDaGVja0ZvcmNlZFRhcmdldCgpDQogIGlmIGZvcmNlZFRhcmdldCB0aGVuDQogICAgaWYgZm9yY2VkVGFyZ2V0LmRlYWQgdGhlbg0KICAgICAgZm9yY2VkVGFyZ2V0ID0gbmlsDQogICAgICByZXR1cm4NCiAgICBlbmQNCiAgICBpZiBmb3JjZWRUYXJnZXRUaW1lICsgMTAgPCBvcy5jbG9jaygpIHRoZW4NCiAgICAgIFNheSgiVGltZSBleHBpcmVkLiBEZXNlbGVjdGVkOiAiIC4uIGZvcmNlZFRhcmdldC5jaGFyTmFtZSkNCiAgICAgIGZvcmNlZFRhcmdldCA9IG5pbA0KICAgIGVuZA0KICBlbmQNCmVuZA0KZnVuY3Rpb24gQXV0b0xldmVsKCkNCiAgaWYgbXlIZXJvLmxldmVsID4gbGFzdExldmVsIHRoZW4NCiAgICBMZXZlbFNwZWxsKGF1dG9MZXZlbFRhYmxlc1tNZW51Lm1pc2MuYXV0b2xldmVsLnNlcXVlbmNlXVtteUhlcm8ubGV2ZWxdKQ0KICAgIGxhc3RMZXZlbCA9IG15SGVyby5sZXZlbA0KICBlbmQNCmVuZA0KZnVuY3Rpb24gT25UaWNrKCkNCiAgaWYgbXlIZXJvLmRlYWQgdGhlbg0KICAgIHJldHVybg0KICBlbmQNCiAgQ2hlY2tzKCkNCiAgQ2hlY2tJZ25pdGUoKQ0KICBJZ25pdGVXaWxsS2lsbE1lKCkNCiAgWU9MTygpDQogIGlmIE1lbnUubWlzYy5hdXRvbGV2ZWwudXNlQXV0b0xldmVsIHRoZW4NCiAgICBBdXRvTGV2ZWwoKQ0KICBlbmQNCiAgaWYgTWVudS5rZXlzZXR0aW5ncy51c2VDb21ibyB0aGVuDQogICAgQ29tYm8oKQ0KICBlbmQNCiAgaWYgTWVudS5zZXR0aW5nc1cudXNlT3B0aW9uYWwgdGhlbg0KICAgIExlQmxhbmNTcGVjaWZpY1NwZWxsQ2hlY2tzKCkNCiAgZW5kDQogIGlmIG5vdCBfYmEgdGhlbg0KICAgIHJldHVybg0KICBlbmQNCiAgaWYgTWVudS5jb21iby5jb21ib0FBIGFuZCAoX2FhIGFuZCBfRy5TeE9yYjpHZXRNb2RlKCkgPT0gMSBvciBTQUNMb2FkZWQgYW5kIF9HLkF1dG9DYXJyeS5LZXlzLkF1dG9DYXJyeSkgYW5kIEFBZGlzYWJsZWQgdGhlbg0KICAgIGlmIF9hYSB0aGVuDQogICAgICBfRy5TeE9yYjpFbmFibGVBdHRhY2tzKCkNCiAgICBlbHNlaWYgU0FDTG9hZGVkIHRoZW4NCiAgICAgIF9HLkF1dG9DYXJyeS5NeUhlcm86QXR0YWNrc0VuYWJsZWQodHJ1ZSkNCiAgICBlbmQNCiAgICBBQWRpc2FibGVkID0gZmFsc2UNCiAgZW5kDQogIGlmIChfYWEgYW5kIF9HLlN4T3JiOkdldE1vZGUoKSA9PSAxIG9yIFNBQ0xvYWRlZCBhbmQgX0cuQXV0b0NhcnJ5LktleXMuQXV0b0NhcnJ5KSBhbmQgbm90IE1lbnUuY29tYm8uY29tYm9BQSBhbmQgbm90IEFBZGlzYWJsZWQgdGhlbg0KICAgIGlmIF9hYSB0aGVuDQogICAgICBfRy5TeE9yYjpEaXNhYmxlQXR0YWNrcygpDQogICAgZWxzZWlmIFNBQ0xvYWRlZCB0aGVuDQogICAgICBfRy5BdXRvQ2FycnkuTXlIZXJvOkF0dGFja3NFbmFibGVkKGZhbHNlKQ0KICAgIGVuZA0KICAgIEFBZGlzYWJsZWQgPSB0cnVlDQogIGVuZA0KICBpZiBNZW51LmtleXNldHRpbmdzLnVzZUhhcmFzcyB0aGVuDQogICAgSGFyYXNzKCkNCiAgZW5kDQogIGlmIE1lbnUua2V5c2V0dGluZ3MudXNlRmFybSBhbmQgKF9hYSBhbmQgbm90IF9HLlN4T3JiOkdldE1vZGUoKSA9PSAxIGFuZCBub3QgX0cuU3hPcmI6R2V0TW9kZSgpID09IDIgYW5kIG5vdCBfRy5TeE9yYjpHZXRNb2RlKCkgPT0gMyBvciBTQUNMb2FkZWQgYW5kIG5vdCBfRy5BdXRvQ2FycnkuS2V5cy5BdXRvQ2FycnkgYW5kIG5vdCBfRy5BdXRvQ2FycnkuS2V5cy5NaXhlZE1vZGUgYW5kIG5vdCBfRy5BdXRvQ2FycnkuS2V5cy5MYW5lQ2xlYXIpIHRoZW4NCiAgICBGYXJtKCkNCiAgZW5kDQogIGlmIE1lbnUua2V5c2V0dGluZ3MudXNlTGFuZUNsZWFyIHRoZW4NCiAgICBMYW5lQ2xlYXIoKQ0KICBlbmQNCiAgaWYgQ2FuUGVybWZvcm1LaWxsU3RlYWwoKSB0aGVuDQogICAgS2lsbFN0ZWFsKCkNCiAgZW5kDQogIGlmIE1lbnUubWlzYy56aG9ueWFzLnpob255YXMgYW5kIG5vdCBJbkZvdW50YWluKCkgdGhlbg0KICAgIFpob255YXMoKQ0KICBlbmQNCiAgaWYgaWduaXRlIH49IG5pbCBhbmQgTWVudS5taXNjLmF1dG9pZ25pdGUudXNlSWduaXRlIHRoZW4NCiAgICBVc2VJZ25pdGUoKQ0KICBlbmQNCmVuZA0KZnVuY3Rpb24gVG9vRGFuZ2Vyb3VzKGRiYSkNCiAgbG9jYWwgX2NhID0ge30NCiAgbG9jYWwgYWNhID0gMA0KICBsb2NhbCBiY2EgPSB7fQ0KICBmb3IgY2NhLCBkY2EgaW4gcGFpcnMoR2V0RW5lbXlIZXJvZXMoKSkgZG8NCiAgICBpZiBkY2EgYW5kIEdldERpc3RhbmNlU3FyKGRjYSkgPD0gMTAwMDAwMCB0aGVuDQogICAgICBmb3IgX2RhLCBhZGEgaW4gcGFpcnMoew0KICAgICAgICBfUSwNCiAgICAgICAgX1csDQogICAgICAgIF9FLA0KICAgICAgICBfUg0KICAgICAgfSkgZG8NCiAgICAgICAgaWYgYWRhIGFuZCBkY2E6Q2FuVXNlU3BlbGwoYWRhKSA9PSBSRUFEWSB0aGVuDQogICAgICAgICAgbG9jYWwgYmRhID0gZGNhOkdldFNwZWxsRGF0YShhZGEpLnJhbmdlIGFuZCBkY2E6R2V0U3BlbGxEYXRhKGFkYSkucmFuZ2Ugb3IgNTAwDQogICAgICAgICAgaWYgYmRhIGFuZCB0eXBlKGJkYSkgPT0gIm51bWJlciIgYW5kIGJkYSA+PSBHZXREaXN0YW5jZShkYmEsIGRjYSkgdGhlbg0KICAgICAgICAgICAgdGFibGUuaW5zZXJ0KF9jYVtkY2FdLCBhZGEpDQogICAgICAgICAgZW5kDQogICAgICAgIGVuZA0KICAgICAgZW5kDQogICAgZW5kDQogIGVuZA0KICBpZiAjX2NhIDwgMiBhbmQgQ2hlY2tBRENUYXJnZXQoZGJhKSB0aGVuDQogICAgcmV0dXJuIDMNCiAgZW5kDQogIGZvciBjY2EsIGRjYSBpbiBwYWlycyhiY2EpIGRvDQogICAgZm9yIF9kYSwgYWRhIGluIHBhaXJzKF9jYVtkY2FdKSBkbw0KICAgICAgaWYgYWRhIGFuZCBkY2EgdGhlbg0KICAgICAgICBhY2EgPSBhY2EgKyBnZXREbWcoU3BlbGxUb1N0cmluZyhhZGEpLCBteUhlcm8sIGRjYSkNCiAgICAgIGVuZA0KICAgIGVuZA0KICBlbmQNCiAgaWYgYWNhIHRoZW4NCiAgICBpZiBhY2EgPT0gMCB0aGVuDQogICAgICByZXR1cm4gMA0KICAgIGVsc2VpZiBhY2EgPD0gbXlIZXJvLmhlYWx0aCAvIDIgdGhlbg0KICAgICAgcmV0dXJuIDANCiAgICBlbHNlaWYgYWNhIDw9IG15SGVyby5oZWFsdGggKiAwLjcgdGhlbg0KICAgICAgcmV0dXJuIDENCiAgICBlbHNlaWYgYWNhIDw9IG15SGVyby5oZWFsdGggdGhlbg0KICAgICAgcmV0dXJuIDINCiAgICBlbHNlaWYgYWNhID49IG15SGVyby5oZWFsdGggdGhlbg0KICAgICAgcmV0dXJuIDMNCiAgICBlbHNlaWYgYWNhID49IG15SGVyby5oZWFsdGggKiAxLjUgdGhlbg0KICAgICAgcmV0dXJuIDQNCiAgICBlbHNlaWYgYWNhID49IG15SGVyby5oZWFsdGggKiAyIHRoZW4NCiAgICAgIHJldHVybiA1DQogICAgZWxzZWlmIGFjYSA+PSBteUhlcm8uaGVhbHRoICogMyB0aGVuDQogICAgICByZXR1cm4gNg0KICAgIGVsc2VpZiBhY2EgPj0gbXlIZXJvLmhlYWx0aCAqIDQgdGhlbg0KICAgICAgcmV0dXJuIDcNCiAgICBlbHNlaWYgYWNhID49IG15SGVyby5oZWFsdGggKiA1IHRoZW4NCiAgICAgIHJldHVybiA4DQogICAgZWxzZWlmIGFjYSA+PSBteUhlcm8uaGVhbHRoICogNiB0aGVuDQogICAgICByZXR1cm4gOQ0KICAgIGVsc2VpZiBhY2EgPj0gbXlIZXJvLmhlYWx0aCAqIDcgdGhlbg0KICAgICAgcmV0dXJuIDEwDQogICAgZW5kDQogIGVuZA0KICByZXR1cm4gMA0KZW5kDQpmdW5jdGlvbiBpc0tpbGxhYmxlKGRiYSkNCiAgbG9jYWwgX2NhID0gMA0KICBsb2NhbCBhY2EgPSBkYmEuaGVhbHRoDQogIGZvciBiY2EsIGNjYSBpbiBwYWlycyh7DQogICAgX1EsDQogICAgX1csDQogICAgX0UsDQogICAgX1INCiAgfSkgZG8NCiAgICBpZiBjY2EgdGhlbg0KICAgICAgaWYgY2NhID09IF9SIGFuZCBteUhlcm86Q2FuVXNlU3BlbGwoY2NhKSA9PSBSRUFEWSB0aGVuDQogICAgICAgIF9jYSA9IF9jYSArIFNwZWxsRG1nQ2FsY3VsYXRpb25zKCJSUSIsIGRiYSkNCiAgICAgIGVsc2VpZiBjY2EgPT0gX1Igb3IgbXlIZXJvOkNhblVzZVNwZWxsKGNjYSkgfj0gUkVBRFkgb3IgY2NhID09IF9XIGFuZCB3VXNlZCgpIHRoZW4NCiAgICAgIGVsc2UNCiAgICAgICAgX2NhID0gX2NhICsgU3BlbGxEbWdDYWxjdWxhdGlvbnMoU3BlbGxUb1N0cmluZyhjY2EpLCBkYmEpDQogICAgICBlbmQNCiAgICBlbmQNCiAgZW5kDQogIF9jYSA9IG15SGVybzpDYWxjTWFnaWNEYW1hZ2UoZGJhLCBfY2EpDQogIGlmIG5vdCBkYW1nZSBvciBub3QgX2NhIHRoZW4NCiAgICBfY2EgPSAwDQogIGVuZA0KICByZXR1cm4gX2NhIGFuZCB0eXBlKF9jYSkgPT0gIm51bWJlciIgYW5kIGFjYSBhbmQgdHlwZShhY2EpID09ICJudW1iZXIiIGFuZCBhY2EgPD0gX2NhIG9yIGZhbHNlDQplbmQNCmZ1bmN0aW9uIE9uZXRvT25lKCkNCiAgbG9jYWwgZGJhID0gdHNMb25nLnRhcmdldA0KICBpZiBkYmEgYW5kIENvdW50RW5lbXlIZXJvSW5SYW5nZSgxMDAwKSA9PSAxIGFuZCBteU9wcGVuZW50TGFuZXJbZGJhLmNoYXJOYW1lXSA9PSB0cnVlIHRoZW4NCiAgICBsb2NhbCBfY2EgPSBDaGVja01pbmlvbnMoKQ0KICAgIGxvY2FsIGFjYSA9IENoZWNrVHVycmV0RGFtYWdlKCkNCiAgICBsb2NhbCBiY2EgPSBEYW1hZ2VUb1RhcmdldChkYmEpDQogICAgbG9jYWwgY2NhID0gRGFtYWdlVG9NZShkYmEpDQogICAgaWYgX2NhID49IDUgYW5kIG5vdCBpc0tpbGxhYmxlKGRiYSkgdGhlbg0KICAgICAgcmV0dXJuDQogICAgZWxzZWlmIGlzS2lsbGFibGUoZGJhKSB0aGVuDQogICAgICBTbWFydENvbWJvKGRiYSkNCiAgICBlbmQNCiAgICBpZiBhY2EgYW5kIChub3QgU0FDTG9hZGVkIG9yIG5vdCBfRy5BdXRvQ2FycnkuT3JiV2Fsa2VyOkNhblNob290KCkgb3Igbm90IFN4T3JiTG9hZCBvciBub3QgX0cuU3hPcmI6Q2FuQXR0YWNrKCkpIHRoZW4NCiAgICAgIGlmIG5vdCBpc0tpbGxhYmxlKGRiYSkgdGhlbg0KICAgICAgICBpZiBnZXREbWcoIlEiLCBhY2EsIGRiYSkgYW5kIFFyZWFkeSBhbmQgR2V0RGlzdGFuY2VTcXIoYWNhKSA8PSBTcGVsbHMuUS5yYW5nZSAqIFNwZWxscy5RLnJhbmdlIHRoZW4NCiAgICAgICAgICBDYXN0UShhY2EpDQogICAgICAgIGVuZA0KICAgICAgZWxzZQ0KICAgICAgICBTbWFydENvbWJvKGRiYSkNCiAgICAgIGVuZA0KICAgIGVuZA0KICAgIGxvY2FsIGRjYSwgX2RhID0gTWluaW9uQ291bnQoZGJhKQ0KICAgIGNjYSA9IF9kYSArIGNjYQ0KICAgIGlmIGJjYSA+PSBjY2EgYW5kIG5vdCBVbmRlclR1cnJldChkYmEucG9zLCB0cnVlKSB0aGVuDQogICAgICBTbWFydENvbWJvKGRiYSkNCiAgICBlbmQNCiAgZW5kDQplbmQNCmZ1bmN0aW9uIENoZWNrTWluaW9ucygpDQogIGxvY2FsIGRiYSA9IDANCiAgZm9yIF9jYSwgYWNhIGluIHBhaXJzKGVuZW15TWluaW9ucy5vYmplY3RzKSBkbw0KICAgIGlmIGFjYSBhbmQgR2V0RGlzdGFuY2VTcXIobWluaW9ucykgPD0gKG15SGVyby5yYW5nZSArIG15SGVyby5ib3VuZGluZ1JhZGl1cykgKiAobXlIZXJvLnJhbmdlICsgbXlIZXJvLmJvdW5kaW5nUmFkaXVzKSBhbmQgZ2V0RG1nKCJBQSIsIGFjYSwgbXlIZXJvKSA+PSBhY2EuaGVhbHRoIHRoZW4NCiAgICAgIGRiYSA9IGRiYSArIDENCiAgICBlbmQNCiAgZW5kDQogIHJldHVybiBkYmENCmVuZA0KZnVuY3Rpb24gTWluaW9uQ291bnQoZGJhKQ0KICBsb2NhbCBfY2EgPSAwDQogIGxvY2FsIGFjYSA9IDANCiAgZm9yIGJjYSwgY2NhIGluIHBhaXJzKGVuZW15TWluaW9ucy5vYmplY3RzKSBkbw0KICAgIGlmIGNjYSBhbmQgR2V0RGlzdGFuY2VTcXIobWluaW9ucywgZGJhLnBvcykgPD0gY2NhLnJhbmdlICogY2NhLnJhbmdlIGFuZCBnZXREbWcoIkFBIiwgY2NhLCBteUhlcm8pID49IGNjYS5oZWFsdGggdGhlbg0KICAgICAgX2NhID0gX2NhICsgMQ0KICAgICAgYWNhID0gYWNhICsgZ2V0RG1nKCJBQSIsIG15SGVybywgY2NhKQ0KICAgIGVuZA0KICBlbmQNCiAgcmV0dXJuIF9jYSwgYWNhDQplbmQNCmZ1bmN0aW9uIENoZWNrVHVycmV0RGFtYWdlKGRiYSwgX2NhKQ0KZW5kDQpmdW5jdGlvbiBEYW1hZ2VUb1RhcmdldChkYmEpDQogIGxvY2FsIF9jYSA9IDANCiAgZm9yIGFjYSwgYmNhIGluIHBhaXJzKHsNCiAgICBfUSwNCiAgICBfVywNCiAgICBfRSwNCiAgICBfUg0KICB9KSBkbw0KICAgIGlmIGJjYSBhbmQgbXlIZXJvOkNhblVzZVNwZWxsKGJjYSkgPT0gUkVBRFkgdGhlbg0KICAgICAgaWYgYmNhID09IF9SIHRoZW4NCiAgICAgICAgX2NhID0gX2NhICsgU3BlbGxEbWdDYWxjdWxhdGlvbnMoIlJRIiwgZGJhKQ0KICAgICAgZWxzZWlmIGJjYSA9PSBfVyBhbmQgd1VzZWQoKSB0aGVuDQogICAgICBlbHNlDQogICAgICAgIF9jYSA9IF9jYSArIFNwZWxsRG1nQ2FsY3VsYXRpb25zKFNwZWxsVG9TdHJpbmcoYmNhKSwgZGJhKQ0KICAgICAgZW5kDQogICAgZW5kDQogIGVuZA0KICBfY2EgPSBteUhlcm86Q2FsY01hZ2ljRGFtYWdlKGRiYSwgX2NhKQ0KICBpZiBub3QgZGFtZ2Ugb3Igbm90IF9jYSB0aGVuDQogICAgX2NhID0gMA0KICBlbmQNCiAgcmV0dXJuIF9jYSBhbmQgdHlwZShfY2EpID09ICJudW1iZXIiIGFuZCBoZWFsdGggYW5kIHR5cGUoaGVhbHRoKSA9PSAibnVtYmVyIiBhbmQgX2NhIG9yIDANCmVuZA0KZnVuY3Rpb24gRGFtYWdlVG9NZShkYmEpDQogIGxvY2FsIF9jYSA9IDANCiAgZm9yIGFjYSwgYmNhIGluIHBhaXJzKHsNCiAgICBfUSwNCiAgICBfVywNCiAgICBfRSwNCiAgICBfUg0KICB9KSBkbw0KICAgIGlmIGJjYSBhbmQgZGJhOkNhblVzZVNwZWxsKGJjYSkgPT0gUkVBRFkgdGhlbg0KICAgICAgX2NhID0gX2NhICsgZ2V0RG1nKFNwZWxsVG9TdHJpbmcoYmNhKSwgbXlIZXJvLCBkYmEpDQogICAgZW5kDQogIGVuZA0KICBfY2EgPSBkYmE6Q2FsY01hZ2ljRGFtYWdlKG15SGVybywgX2NhKQ0KICBpZiBub3QgZGFtZ2Ugb3Igbm90IF9jYSB0aGVuDQogICAgX2NhID0gMA0KICBlbmQNCiAgcmV0dXJuIF9jYSBhbmQgdHlwZShfY2EpID09ICJudW1iZXIiIGFuZCBoZWFsdGggYW5kIHR5cGUoaGVhbHRoKSA9PSAibnVtYmVyIiBhbmQgX2NhIG9yIDANCmVuZA0KZnVuY3Rpb24gQ2hlY2tBRENUYXJnZXQoZGJhKQ0KICBsb2NhbCBfY2EgPSBmYWxzZQ0KICBsb2NhbCBhY2ENCiAgZm9yIGJjYSwgY2NhIGluIHBhaXJzKEdldEVuZW15SGVyb2VzKCkpIGRvDQogICAgaWYgY2NhIGFuZCBjY2EudHlwZSBhbmQgY2NhLnR5cGUgPT0gbXlIZXJvLnR5cGUgYW5kIEdldERpc3RhbmNlU3FyKGNjYSkgPD0gY2NhLnJhbmdlICogY2NhLnJhbmdlIGFuZCB0YWJsZS5jb250YWlucyhwcmlvcml0eVRhYmxlLkFEX0NhcnJ5LCBjY2EuY2hhck5hbWUpIHRoZW4NCiAgICAgIF9jYSA9IHRydWUNCiAgICAgIGFjYSA9IGNjYQ0KICAgICAgYnJlYWsNCiAgICBlbmQNCiAgZW5kDQogIGlmIF9jYSB0aGVuDQogICAgbG9jYWwgYmNhID0ge30NCiAgICBsb2NhbCBjY2EgPSBHZXRMYXRlbmN5KCkNCiAgICBmb3IgYmRhLCBjZGEgaW4gcGFpcnMoew0KICAgICAgX1EsDQogICAgICBfVywNCiAgICAgIF9FLA0KICAgICAgX1INCiAgICB9KSBkbw0KICAgICAgaWYgY2RhIGFuZCBteUhlcm86Q2FuVXNlU3BlbGwoY2RhKSA9PSBSRUFEWSB0aGVuDQogICAgICAgIHRhYmxlLmluc2VydChiY2EsIGNkYSkNCiAgICAgIGVuZA0KICAgIGVuZA0KICAgIGxvY2FsIGRjYSA9IDANCiAgICBmb3IgYmRhLCBjZGEgaW4gcGFpcnMoYmNhKSBkbw0KICAgICAgbG9jYWwgZGRhID0gU3BlbGxzW1NwZWxsVG9TdHJpbmcoY2RhKV0uZGVsYXkNCiAgICAgIGxvY2FsIF9fYiA9IFNwZWxsc1tTcGVsbFRvU3RyaW5nKGNkYSldLnNwZWVkDQogICAgICBpZiBkZGEgPT0gbmlsIHRoZW4NCiAgICAgICAgZGRhID0gMC4yDQogICAgICBlbmQNCiAgICAgIGlmIF9fYiA9PSBuaWwgdGhlbg0KICAgICAgICBfX2IgPSAxODAwDQogICAgICBlbmQNCiAgICAgIGRjYSA9IGRjYSArIGRkYSArIGNjYSAvIDIwMDAgKyBHZXREaXN0YW5jZShhY2EpIC8gX19iDQogICAgZW5kDQogICAgbG9jYWwgX2RhID0gbWF0aC5jZWlsKG15SGVyby5oZWFsdGggLyBnZXREbWcoIkFEIiwgbXlIZXJvLCBhY2EpKQ0KICAgIGxvY2FsIGFkYSA9IDANCiAgICBpZiBCYXNlV2luZFVwVGltZVthY2EubmV0d29ya0lEXSBhbmQgQmFzZUFuaW1hdGlvblRpbWVbYWNhLm5ldHdvcmtJRF0gdGhlbg0KICAgICAgYWRhID0gKDEgLyAoYWNhLmF0dGFja1NwZWVkICogQmFzZVdpbmRVcFRpbWVbYWNhLm5ldHdvcmtJRF0pICsgMSAvIChhY2EuYXR0YWNrU3BlZWQgKiBCYXNlQW5pbWF0aW9uVGltZVthY2EubmV0d29ya0lEXSkgKyBjY2EgLyAyMDAwKSAqIF9kYQ0KICAgIGVsc2UNCiAgICAgIGFkYSA9IF9kYSAvIGFjYS5hdHRhY2tTcGVlZA0KICAgIGVuZA0KICAgIGlmIGRjYSA8PSBhZGEgdGhlbg0KICAgICAgcmV0dXJuIGZhbHNlDQogICAgZW5kDQogIGVuZA0KICByZXR1cm4gdHJ1ZQ0KZW5kDQpmdW5jdGlvbiBTcGVsbFRvU3RyaW5nKGRiYSkNCiAgcmV0dXJuIGRiYSA9PSBfUSBhbmQgIlEiIG9yIGRiYSA9PSBfVyBhbmQgIlciIG9yIGRiYSA9PSBfRSBhbmQgIkUiIG9yIGRiYSA9PSBfUiBhbmQgIlIiDQplbmQNCmZ1bmN0aW9uIE9uQXBwbHlCdWZmKGRiYSwgX2NhLCBhY2EpDQogIGlmIGRiYSBhbmQgZGJhLmlzTWUgYW5kIF9jYSBhbmQgX2NhLnRlYW0gYW5kIF9jYS50ZWFtIH49IG15SGVyby50ZWFtIGFuZCBfY2EudHlwZSBhbmQgX2NhLnR5cGUgPT0gbXlIZXJvLnR5cGUgYW5kIG5vdCBfY2EuZGVhZCBhbmQgYWNhIGFuZCBhY2EudmFsaWQgYW5kIGFjYS5uYW1lIHRoZW4NCiAgICBpZiBhY2EubmFtZTpmaW5kKCJMZWJsYW5jU291bFNoYWNrbGUiKSB0aGVuDQogICAgICBjaGFpblRhcmdldCA9IF9jYQ0KICAgICAgY2FzdGVkRVRpbWUgPSBvcy5jbG9jaygpDQogICAgZW5kDQogICAgaWYgYWNhLm5hbWU6ZmluZChTcGVsbHMuUS5idWZmUSkgb3IgYWNhLm5hbWU6ZmluZChTcGVsbHMuUS5idWZmUikgdGhlbg0KICAgICAgZW5lbWllc0J1ZmZzW19jYS5uZXR3b3JrSURdLnJlY2VpdmVkID0gdHJ1ZQ0KICAgICAgZW5lbWllc0J1ZmZzW19jYS5uZXR3b3JrSURdLmVuZFRpbWUgPSBvcy5jbG9jaygpICogMzUwMA0KICAgIGVuZA0KICAgIGlmIGFjYS5uYW1lOmxvd2VyKCk6ZmluZCgic3VtbW9uZXJkb3QiKSB0aGVuDQogICAgICBpZ25pdGVUaWNrW19jYS5uZXR3b3JrSURdLmlzSWduaXRlZCA9IHRydWUNCiAgICAgIGlnbml0ZVRpY2tbX2NhLm5ldHdvcmtJRF0uc3RhcnRUID0gb3MuY2xvY2soKQ0KICAgIGVuZA0KICBlbmQNCiAgaWYgX2NhIGFuZCBfY2EuaXNNZSBhbmQgYWNhIGFuZCBhY2EubmFtZSA9PSAiUmVnZW5lcmF0aW9uUG90aW9uIiB0aGVuDQogICAgaGFzUG90aW9uQWN0aXZlID0gdHJ1ZQ0KICBlbmQNCmVuZA0KZnVuY3Rpb24gT25SZW1vdmVCdWZmKGRiYSwgX2NhKQ0KICBpZiBkYmEgYW5kIGRiYS50eXBlIGFuZCBkYmEudHlwZSA9PSBteUhlcm8udHlwZSBhbmQgX2NhIGFuZCBfY2EubmFtZSB0aGVuDQogICAgaWYgY2hhaW5UYXJnZXQgYW5kIF9jYS5uYW1lOmZpbmQoIkxlYmxhbmNTb3VsU2hhY2tsZSIpIGFuZCBkYmEubmV0d29ya0lEID09IGNoYWluVGFyZ2V0Lm5ldHdvcmtJRCB0aGVuDQogICAgICBjaGFpblRhcmdldCA9IG5pbA0KICAgIGVuZA0KICAgIGlmIGlnbml0ZWRUYWJsZS5pZ25pdGVkIGFuZCBkYmEuaXNNZSBhbmQgX2NhLm5hbWUgPT0gInN1bW1vbmVyZG90IiB0aGVuDQogICAgICBpZ25pdGVkVGFibGUuaWduaXRlZCA9IGZhbHNlDQogICAgICBpZ25pdGVkVGFibGUuc291cmNlID0gbmlsDQogICAgICBpZ25pdGVkVGFibGUuaGFzU2FpZCA9IGZhbHNlDQogICAgICBpZ25pdGVkVGFibGUud2lsbEtpbGxNZSA9IGZhbHNlDQogICAgZW5kDQogICAgaWYgZGJhLnRlYW0gYW5kIGRiYS50ZWFtIH49IG15SGVyby50ZWFtIGFuZCBpZ25pdGVUaWNrW2RiYS5uZXR3b3JrSURdLmlzSWduaXRlZCA9PSB0cnVlIGFuZCBfY2EubmFtZTpmaW5kKCJzdW1tb25lcmRvdCIpIHRoZW4NCiAgICAgIGlnbml0ZVRpY2tbZGJhLm5ldHdvcmtJRF0uaXNJZ25pdGVkID0gZmFsc2UNCiAgICBlbmQNCiAgICBpZiBkYmEuaXNNZSBhbmQgX2NhLm5hbWUgPT0gIlJlZ2VuZXJhdGlvblBvdGlvbiIgYW5kIGhhc1BvdGlvbkFjdGl2ZSB0aGVuDQogICAgICBoYXNQb3Rpb25BY3RpdmUgPSBmYWxzZQ0KICAgIGVuZA0KICAgIGlmIGRiYS50ZWFtIGFuZCBkYmEudGVhbSB+PSBteUhlcm8udGVhbSBhbmQgZW5lbWllc0J1ZmZzW2RiYS5uZXR3b3JrSURdLnJlY2VpdmVkID09IHRydWUgYW5kIChfY2EubmFtZTpmaW5kKFNwZWxscy5RLmJ1ZmZRKSBvciBfY2EubmFtZTpmaW5kKFNwZWxscy5RLmJ1ZmZSKSkgdGhlbg0KICAgICAgZW5lbWllc0J1ZmZzW2RiYS5uZXR3b3JrSURdLnJlY2VpdmVkID0gZmFsc2UNCiAgICBlbmQNCiAgZW5kDQplbmQNCmZ1bmN0aW9uIFNwZWxsQXZhaWxhYmxlKCkNCiAgcmV0dXJuIFFyZWFkeSBvciBJc1dSZWFkeSgpIG9yIFJyZWFkeQ0KZW5kDQpmdW5jdGlvbiBJc092ZXJraWxsKGRiYSkNCiAgaWYgZGJhIGFuZCBkYmEudHlwZSBhbmQgZGJhLnR5cGUgPT0gbXlIZXJvLnR5cGUgYW5kIGRiYS5uZXR3b3JrSUQgdGhlbg0KICAgIGlmIGlnbml0ZSA9PSBuaWwgdGhlbg0KICAgICAgcmV0dXJuIGZhbHNlDQogICAgZW5kDQogICAgaWYgaWduaXRlVGlja1tkYmEubmV0d29ya0lEXS5pc0lnbml0ZWQgYW5kIGlnbml0ZVRpY2tbZGJhLm5ldHdvcmtJRF0uaXNJZ25pdGVkIH49IHRydWUgdGhlbg0KICAgICAgcmV0dXJuIGZhbHNlDQogICAgZW5kDQogICAgbG9jYWwgX2NhID0gNSArIGlnbml0ZVRpY2tbZGJhLm5ldHdvcmtJRF0uc3RhcnRUIC0gb3MuY2xvY2soKQ0KICAgIGlmIF9jYSA8PSAwIHRoZW4NCiAgICAgIGlnbml0ZVRpY2tbZGJhLm5ldHdvcmtJRF0uaXNJZ25pdGVkID0gZmFsc2UNCiAgICAgIHJldHVybiBmYWxzZQ0KICAgIGVuZA0KICAgIGxvY2FsIGFjYSA9IDEwICsgbXlIZXJvLmxldmVsICogNA0KICAgIGxvY2FsIGJjYSA9IF9jYSAqIGFjYQ0KICAgIGlmIGJjYSA+IGRiYS5oZWFsdGggdGhlbg0KICAgICAgcmV0dXJuIHRydWUNCiAgICBlbmQNCiAgZW5kDQogIHJldHVybiBmYWxzZQ0KZW5kDQpmdW5jdGlvbiBPblByb2Nlc3NTcGVsbChkYmEsIF9jYSkNCiAgaWYgZGJhIGFuZCBkYmEudHlwZSBhbmQgZGJhLnR5cGUgPT0gbXlIZXJvLnR5cGUgYW5kIGRiYS50ZWFtIGFuZCBkYmEudGVhbSB+PSBteUhlcm8udGVhbSBhbmQgX2NhIGFuZCBfY2EubmFtZSBhbmQgX2NhLm5hbWU6bG93ZXIoKTpmaW5kKCJhdHRhY2siKSB0aGVuDQogICAgQmFzZUFuaW1hdGlvblRpbWVbZGJhLm5ldHdvcmtJRF0gPSAxIC8gKF9jYS5hbmltYXRpb25UaW1lICogZGJhLmF0dGFja1NwZWVkKQ0KICAgIEJhc2VXaW5kVXBUaW1lW2RiYS5uZXR3b3JrSURdID0gX2NhLndpbmRVcFRpbWUNCiAgZW5kDQogIGlmIGRiYSBhbmQgZGJhLnR5cGUgYW5kIGRiYS50eXBlID09IG15SGVyby50eXBlIGFuZCBkYmEudGVhbSBhbmQgZGJhLnRlYW0gfj0gbXlIZXJvLnRlYW0gYW5kIF9jYSBhbmQgX2NhLm5hbWUgYW5kIF9jYS50YXJnZXQgYW5kIF9jYS50YXJnZXQuaXNNZSBhbmQgX2NhLm5hbWUgPT0gInN1bW1vbmVyZG90IiB0aGVuDQogICAgaWYgZ2V0RG1nKCJJR05JVEUiLCBteUhlcm8sIGRiYSkgPj0gbXlIZXJvLmhlYWx0aCB0aGVuDQogICAgICBTYXkoZGJhLmNoYXJOYW1lIC4uICIgaWduaXRlZCBtZS4gSWduaXRlIFdJTEwga2lsbCBtZS4iKQ0KICAgICAgaWduaXRlZFRhYmxlLmhhc1NhaWQgPSB0cnVlDQogICAgICBpZ25pdGVkVGFibGUud2lsbEtpbGxNZSA9IHRydWUNCiAgICBlbHNlDQogICAgICBTYXkoZGJhLmNoYXJOYW1lIC4uICIgaWduaXRlZCBtZS4gSSB3aWxsIHN1cnZpdmUuIikNCiAgICBlbmQNCiAgICBpZ25pdGVkVGFibGUuaWduaXRlZCA9IHRydWUNCiAgICBpZ25pdGVkVGFibGUuc291cmNlID0gZGJhDQogICAgaWduaXRlZFRhYmxlLnRpbWUgPSBvcy5jbG9jaygpDQogIGVuZA0KICBpZiBkYmEgYW5kIGRiYS5pc01lIGFuZCBfY2EgYW5kIF9jYS5uYW1lIGFuZCBub3QgX2NhLm5hbWU6bG93ZXIoKTpmaW5kKCJhdHRhY2siKSB0aGVuDQogICAgaWYgKGNhbkNhc3RTcGVsbHMgPT0gZmFsc2Ugb3IgUlNraWxsIH49IG5pbCBvciBjYW5DYXN0U3BlbGxzID09IGZhbHNlIGFuZCBSU2tpbGwgfj0gbmlsKSBhbmQgclNwZWxsTmFtZVtfY2EubmFtZV0gfj0gbmlsIHRoZW4NCiAgICAgIGNhbkNhc3RTcGVsbHMgPSB0cnVlDQogICAgICBSU2tpbGwgPSBuaWwNCiAgICBlbmQNCiAgICBpZiBfY2EudGFyZ2V0IGFuZCBfY2EudGFyZ2V0LnR5cGUgYW5kIF9jYS50YXJnZXQudHlwZSA9PSBteUhlcm8udHlwZSBhbmQgX2NhLnRhcmdldC50ZWFtIH49IG15SGVyby50ZWFtIGFuZCBfY2EudGFyZ2V0LmhlYWx0aCB0aGVuDQogICAgICBpZiBfY2EubmFtZSA9PSBTcGVsbHMuUS5zcGVsbG5hbWUgYW5kIFNwZWxsRG1nQ2FsY3VsYXRpb25zKCJRIiwgX2NhLnRhcmdldCkgPj0gX2NhLnRhcmdldC5oZWFsdGggdGhlbg0KICAgICAgICBpc0tpbGxlZFtfY2EudGFyZ2V0Lm5ldHdvcmtJRF0gPSB0cnVlDQogICAgICBlbHNlaWYgX2NhLm5hbWUgPT0gU3BlbGxzLlEuc3BlbGxuYW1lIGFuZCBlbmVtaWVzQnVmZnNbX2NhLnRhcmdldC5uZXR3b3JrSURdLnJlY2VpdmVkID09IHRydWUgYW5kIFNwZWxsRG1nQ2FsY3VsYXRpb25zKCJRIiwgX2NhLnRhcmdldCkgKyBTcGVsbERtZ0NhbGN1bGF0aW9ucygiUVByb2MiLCBfY2EudGFyZ2V0KSA+PSBfY2EudGFyZ2V0LmhlYWx0aCB0aGVuDQogICAgICAgIGlzS2lsbGVkW19jYS50YXJnZXQubmV0d29ya0lEXSA9IHRydWUNCiAgICAgIGVsc2VpZiBfY2EubmFtZSA9PSBTcGVsbHMuUi5RbmFtZSBhbmQgU3BlbGxEbWdDYWxjdWxhdGlvbnMoIlJRIiwgX2NhLnRhcmdldCkgPj0gX2NhLnRhcmdldC5oZWFsdGggdGhlbg0KICAgICAgICBpc0tpbGxlZFtfY2EudGFyZ2V0Lm5ldHdvcmtJRF0gPSB0cnVlDQogICAgICBlbHNlaWYgX2NhLm5hbWUgPT0gU3BlbGxzLlIuUW5hbWUgYW5kIGVuZW1pZXNCdWZmc1tfY2EudGFyZ2V0Lm5ldHdvcmtJRF0ucmVjZWl2ZWQgPT0gdHJ1ZSBhbmQgU3BlbGxEbWdDYWxjdWxhdGlvbnMoIlJRIiwgX2NhLnRhcmdldCkgKyBTcGVsbERtZ0NhbGN1bGF0aW9ucygiUVByb2MiLCBfY2EudGFyZ2V0KSA+PSBfY2EudGFyZ2V0LmhlYWx0aCB0aGVuDQogICAgICAgIGlzS2lsbGVkW19jYS50YXJnZXQubmV0d29ya0lEXSA9IHRydWUNCiAgICAgIGVuZA0KICAgIGVuZA0KICAgIGlmIHRhcmdldCBhbmQgX2NhLm5hbWUgPT0gU3BlbGxzLlcuc3BlbGxuYW1lIGFuZCBfY2EuZW5kUG9zIGFuZCBHZXREaXN0YW5jZSh0YXJnZXQsIF9jYS5lbmRQb3MpIDw9IFNwZWxscy5XLnJhZGl1cyAtIDUwIGFuZCBTcGVsbERtZ0NhbGN1bGF0aW9ucygiVyIsIF9jYS50YXJnZXQpID49IHRhcmdldC5oZWFsdGggdGhlbg0KICAgICAgaXNLaWxsZWRbdGFyZ2V0Lm5ldHdvcmtJRF0gPSB0cnVlDQogICAgZW5kDQogICAgaWYgX2NhLm5hbWUgPT0gU3BlbGxzLlEuc3BlbGxuYW1lIGFuZCBXcmVhZHkgYW5kIHRhcmdldCBhbmQgX2NhLnRhcmdldCBhbmQgX2NhLnRhcmdldC5uZXR3b3JrSUQgYW5kIF9jYS50YXJnZXQubmV0d29ya0lEID09IHRhcmdldC5uZXR3b3JrSUQgdGhlbg0KICAgICAgbG9jYWwgYWNhID0gR2V0V1ByZWRpY3Rpb24odGFyZ2V0KQ0KICAgICAgaWYgYWNhIH49IG5pbCB0aGVuDQogICAgICAgIGxvY2FsIGJjYSA9IG9zLmNsb2NrKCkNCiAgICAgICAgbG9jYWwgY2NhID0gU3BlbGxzLlEuZGVsYXkNCiAgICAgICAgbG9jYWwgZGNhID0gR2V0RGlzdGFuY2UodGFyZ2V0KQ0KICAgICAgICBsb2NhbCBfZGEgPSBTcGVsbHMuUS5zcGVlZA0KICAgICAgICBsb2NhbCBhZGEgPSBkY2EgLyBfZGEgKyBjY2ENCiAgICAgICAgbG9jYWwgYmRhID0gYmNhICsgYWRhDQogICAgICAgIGxhc3RRQ2FzdCA9IHsNCiAgICAgICAgICB0YXJnZXQgPSBfY2EudGFyZ2V0LA0KICAgICAgICAgIGVuZFQgPSBiZGENCiAgICAgICAgfQ0KICAgICAgZW5kDQogICAgZW5kDQogICAgaWYgX2NhLm5hbWUgPT0gU3BlbGxzLlcuc3BlbGxuYW1lIHRoZW4NCiAgICAgIFNwZWxscy5XLnN0YXJ0UG9zID0gX2NhLnN0YXJ0UG9zDQogICAgZWxzZWlmIF9jYS5uYW1lID09IFNwZWxscy5XUi5zcGVsbG5hbWUgdGhlbg0KICAgICAgU3BlbGxzLldSLnN0YXJ0UG9zID0gX2NhLnN0YXJ0UG9zDQogICAgZW5kDQogICAgaWYgX2NhLm5hbWUgPT0gU3BlbGxzLlEuc3BlbGxuYW1lIG9yIF9jYS5uYW1lID09IFNwZWxscy5XLnNwZWxsbmFtZSBvciBfY2EubmFtZSA9PSBTcGVsbHMuRS5zcGVsbG5hbWUgdGhlbg0KICAgICAgbGFzdEFjdGl2YXRlZCA9IF9jYS5uYW1lDQogICAgZW5kDQogIGVuZA0KZW5kDQpmdW5jdGlvbiBDb21ibygpDQogIGlmIG15SGVyby5kZWFkIHRoZW4NCiAgICByZXR1cm4NCiAgZW5kDQogIGlmIHRhcmdldCB+PSBuaWwgYW5kIFZhbGlkVGFyZ2V0KHRhcmdldCwgMTUwMCkgdGhlbg0KICAgIGlmIGlzS2lsbGVkW3RhcmdldC5uZXR3b3JrSURdIH49IG5pbCBhbmQgaXNLaWxsZWRbdGFyZ2V0Lm5ldHdvcmtJRF0gPT0gdHJ1ZSB0aGVuDQogICAgICByZXR1cm4NCiAgICBlbmQNCiAgICBpZiBNZW51LmNvbWJvLmNvbWJvSXRlbXMgdGhlbg0KICAgICAgVXNlSXRlbXModGFyZ2V0KQ0KICAgIGVuZA0KICAgIGlmIChjYW5DYXN0U3BlbGxzID09IGZhbHNlIG9yIFJTa2lsbCB+PSBuaWwpIGFuZCBSU2tpbGxUaW1lICsgMS41IDwgb3MuY2xvY2soKSB0aGVuDQogICAgICBjYW5DYXN0U3BlbGxzID0gdHJ1ZQ0KICAgICAgUlNraWxsID0gbmlsDQogICAgZW5kDQogICAgaWYgbm90IFJyZWFkeSBhbmQgKGNhbkNhc3RTcGVsbHMgPT0gZmFsc2Ugb3IgUlNraWxsIH49IG5pbCkgdGhlbg0KICAgICAgUlNraWxsID0gbmlsDQogICAgICBjYW5DYXN0U3BlbGxzID0gdHJ1ZQ0KICAgIGVuZA0KICAgIGlmIFJyZWFkeSBhbmQgbm90IGNhbkNhc3RTcGVsbHMgYW5kIFJTa2lsbCB+PSBuaWwgdGhlbg0KICAgICAgaWYgUlNraWxsID09ICJRIiB0aGVuDQogICAgICAgIGlmIFJTdGF0ZSgiUSIpIHRoZW4NCiAgICAgICAgICBDYXN0UlEodGFyZ2V0KQ0KICAgICAgICBlbHNlaWYgUXJlYWR5IGFuZCBDYXN0USh0YXJnZXQpIHRoZW4NCiAgICAgICAgICBDYXN0UlEodGFyZ2V0KQ0KICAgICAgICBlbmQNCiAgICAgIGVsc2VpZiBSU2tpbGwgPT0gIlciIHRoZW4NCiAgICAgICAgaWYgUlN0YXRlKCJXIikgdGhlbg0KICAgICAgICAgIENhc3RSVyh0YXJnZXQpDQogICAgICAgIGVsc2VpZiBJc1dSZWFkeSgpIGFuZCBDYXN0Vyh0YXJnZXQpIHRoZW4NCiAgICAgICAgICBDYXN0UlcodGFyZ2V0KQ0KICAgICAgICBlbmQNCiAgICAgIGVsc2VpZiBSU2tpbGwgPT0gIkUiIHRoZW4NCiAgICAgICAgaWYgUlN0YXRlKCJFIikgdGhlbg0KICAgICAgICAgIENhc3RSRSh0YXJnZXQpDQogICAgICAgIGVsc2VpZiBFcmVhZHkgYW5kIENhc3RFKHRhcmdldCkgdGhlbg0KICAgICAgICAgIENhc3RSRSh0YXJnZXQpDQogICAgICAgIGVuZA0KICAgICAgZW5kDQogICAgICByZXR1cm4NCiAgICBlbmQNCiAgICBpZiBub3QgY2FuQ2FzdFNwZWxscyBhbmQgUlNraWxsIH49IG5pbCB0aGVuDQogICAgICByZXR1cm4NCiAgICBlbmQNCiAgICBpZiBNZW51LmNvbWJvLmNvbWJvV2F5ID09IDEgdGhlbg0KICAgICAgU21hcnRDb21ibyh0YXJnZXQpDQogICAgZWxzZWlmIE1lbnUuY29tYm8uY29tYm9XYXkgPT0gMiB0aGVuDQogICAgICBDb21ib1FSV0UodGFyZ2V0KQ0KICAgIGVsc2VpZiBNZW51LmNvbWJvLmNvbWJvV2F5ID09IDMgdGhlbg0KICAgICAgQ29tYm9RV1JFKHRhcmdldCkNCiAgICBlbHNlaWYgTWVudS5jb21iby5jb21ib1dheSA9PSA0IHRoZW4NCiAgICAgIENvbWJvV1FSRSh0YXJnZXQpDQogICAgZWxzZWlmIE1lbnUuY29tYm8uY29tYm9XYXkgPT0gNSB0aGVuDQogICAgICBDb21ib1dSUUUodGFyZ2V0KQ0KICAgIGVuZA0KICBlbmQNCmVuZA0KZnVuY3Rpb24gQ29tYm9RUldFKGRiYSkNCiAgaWYgUXJlYWR5IGFuZCBScmVhZHkgYW5kIEdldERpc3RhbmNlKGRiYSkgPD0gU3BlbGxzLlEucmFuZ2UgdGhlbg0KICAgIGlmIENhc3RRKGRiYSkgdGhlbg0KICAgICAgY2FuQ2FzdFNwZWxscyA9IGZhbHNlDQogICAgICBSU2tpbGwgPSAiUSINCiAgICAgIFJTa2lsbFRpbWUgPSBvcy5jbG9jaygpDQogICAgICByZXR1cm4NCiAgICBlbmQNCiAgZWxzZWlmIFFyZWFkeSBhbmQgbm90IFJyZWFkeSB0aGVuDQogICAgQ2FzdFEoZGJhKQ0KICBlbHNlaWYgUnJlYWR5IGFuZCBub3QgUXJlYWR5IGFuZCBSU3RhdGUoIlEiKSB0aGVuDQogICAgQ2FzdFJRKGRiYSkNCiAgZW5kDQogIGlmIG5vdCBRcmVhZHkgYW5kIChub3QgUnJlYWR5IG9yIG5vdCBSU3RhdGUoIlEiKSkgdGhlbg0KICAgIGlmIG5vdCB3VXNlZCgpIHRoZW4NCiAgICAgIENhc3RXKGRiYSkNCiAgICBlbmQNCiAgICBDYXN0RShkYmEpDQogIGVuZA0KZW5kDQpmdW5jdGlvbiBDb21ib1FXUkUoZGJhKQ0KICBpZiBRcmVhZHkgdGhlbg0KICAgIENhc3RRKGRiYSkNCiAgZW5kDQogIGlmIElzV1JlYWR5KCkgYW5kIFJyZWFkeSBhbmQgbm90IHdyVXNlZCgpIGFuZCBHZXREaXN0YW5jZShkYmEpIDw9IFNwZWxscy5XLnJhbmdlIHRoZW4NCiAgICBpZiBDYXN0VyhkYmEpIHRoZW4NCiAgICAgIGNhbkNhc3RTcGVsbHMgPSBmYWxzZQ0KICAgICAgUlNraWxsID0gIlciDQogICAgICBSU2tpbGxUaW1lID0gb3MuY2xvY2soKQ0KICAgICAgcmV0dXJuDQogICAgZW5kDQogIGVsc2VpZiBJc1dSZWFkeSgpIGFuZCBub3QgUnJlYWR5IGFuZCBub3Qgd1VzZWQoKSB0aGVuDQogICAgQ2FzdFcoZGJhKQ0KICBlbHNlaWYgUnJlYWR5IGFuZCBSU3RhdGUoIlciKSBhbmQgR2V0RGlzdGFuY2UoZGJhKSA8PSBTcGVsbHMuVy5yYW5nZSBhbmQgbm90IHdyVXNlZCgpIHRoZW4NCiAgICBjYW5DYXN0U3BlbGxzID0gZmFsc2UNCiAgICBSU2tpbGwgPSAiVyINCiAgICBSU2tpbGxUaW1lID0gb3MuY2xvY2soKQ0KICAgIHJldHVybg0KICBlbmQNCiAgaWYgbm90IFFyZWFkeSBhbmQgbm90IElzV1JlYWR5KCkgdGhlbg0KICAgIENhc3RFKGRiYSkNCiAgZW5kDQplbmQNCmZ1bmN0aW9uIENvbWJvV1FSRShkYmEpDQogIGlmIElzV1JlYWR5KCkgdGhlbg0KICAgIENhc3RXKGRiYSkNCiAgZW5kDQogIGlmIFFyZWFkeSBhbmQgUnJlYWR5IGFuZCBHZXREaXN0YW5jZShkYmEpIDw9IFNwZWxscy5RLnJhbmdlIGFuZCBub3QgSXNXUmVhZHkoKSB0aGVuDQogICAgaWYgQ2FzdFEoZGJhKSB0aGVuDQogICAgICBjYW5DYXN0U3BlbGxzID0gZmFsc2UNCiAgICAgIFJTa2lsbCA9ICJRIg0KICAgICAgUlNraWxsVGltZSA9IG9zLmNsb2NrKCkNCiAgICAgIHJldHVybg0KICAgIGVuZA0KICBlbHNlaWYgUXJlYWR5IGFuZCBub3QgUnJlYWR5IGFuZCBub3QgSXNXUmVhZHkoKSB0aGVuDQogICAgQ2FzdFEoZGJhKQ0KICBlbHNlaWYgUnJlYWR5IGFuZCBub3QgUXJlYWR5IGFuZCBSU3RhdGUoIlEiKSB0aGVuDQogICAgQ2FzdFJRKGRiYSkNCiAgZW5kDQogIGlmIG5vdCBJc1dSZWFkeSgpIGFuZCBub3QgUXJlYWR5IGFuZCAobm90IFJyZWFkeSBvciBub3QgUlN0YXRlKCJRIikpIHRoZW4NCiAgICBDYXN0RShkYmEpDQogIGVuZA0KZW5kDQpmdW5jdGlvbiBDb21ib1dSUUUoZGJhKQ0KICBpZiBub3Qgd3JVc2VkKCkgYW5kIElzV1JlYWR5KCkgYW5kIFJyZWFkeSB0aGVuDQogICAgaWYgQ2FzdFcoZGJhKSB0aGVuDQogICAgICBjYW5DYXN0U3BlbGxzID0gZmFsc2UNCiAgICAgIFJTa2lsbCA9ICJXIg0KICAgICAgUlNraWxsVGltZSA9IG9zLmNsb2NrKCkNCiAgICAgIHJldHVybg0KICAgIGVuZA0KICBlbHNlaWYgbm90IFJyZWFkeSBhbmQgSXNXUmVhZHkoKSB0aGVuDQogICAgQ2FzdFcoZGJhKQ0KICBlbHNlaWYgbm90IHdyVXNlZCgpIGFuZCBScmVhZHkgYW5kIG5vdCBJc1dSZWFkeSgpIGFuZCBSU3RhdGUoIlciKSB0aGVuDQogICAgY2FuQ2FzdFNwZWxscyA9IGZhbHNlDQogICAgUlNraWxsID0gIlciDQogICAgUlNraWxsVGltZSA9IG9zLmNsb2NrKCkNCiAgICByZXR1cm4NCiAgZWxzZWlmIG5vdCBJc1dSZWFkeSgpIGFuZCAobm90IFJyZWFkeSBvciB3clVzZWQoKSBvciBub3QgUlN0YXRlKCJXIikpIHRoZW4NCiAgICBDYXN0UShkYmEpDQogICAgQ2FzdEUoZGJhKQ0KICBlbmQNCmVuZA0KZnVuY3Rpb24gU21hcnRDb21ibyhkYmEpDQogIGxvY2FsIF9jYSwgYWNhLCBiY2EgPSBSZXR1cm5CZXN0VGFyZ2V0UG9zaXRpb24oMywgU3BlbGxzLlcucmFuZ2UpDQogIGlmIF9jYSB+PSBuaWwgYW5kIGFjYSB+PSBuaWwgYW5kIEdldERpc3RhbmNlU3FyKF9jYSkgPCBTcGVsbHMuVy5yYW5nZSAqIFNwZWxscy5XLnJhbmdlIGFuZCBub3Qgd3JVc2VkKCkgYW5kIElzV1JlYWR5KCkgYW5kIFJyZWFkeSBhbmQgYmNhID49IDMgYW5kIENhc3RXKF9jYS54LCBfY2EueikgdGhlbg0KICAgIGNhbkNhc3RTcGVsbHMgPSBmYWxzZQ0KICAgIFJTa2lsbCA9ICJXIg0KICAgIFJTa2lsbFRpbWUgPSBvcy5jbG9jaygpDQogICAgcmV0dXJuDQogIGVuZA0KICBsb2NhbCBjY2EgPSBTcGVsbERtZ0NhbGN1bGF0aW9ucygiUSIsIGRiYSkNCiAgbG9jYWwgZGNhID0gU3BlbGxEbWdDYWxjdWxhdGlvbnMoIlFQcm9jIiwgZGJhKQ0KICBsb2NhbCBfZGEgPSBTcGVsbERtZ0NhbGN1bGF0aW9ucygiVyIsIGRiYSkNCiAgbG9jYWwgYWRhID0gU3BlbGxEbWdDYWxjdWxhdGlvbnMoIkUiLCBkYmEpDQogIGxvY2FsIGJkYSA9IFNwZWxsRG1nQ2FsY3VsYXRpb25zKCJSUSIsIGRiYSkNCiAgbG9jYWwgY2RhID0gU3BlbGxEbWdDYWxjdWxhdGlvbnMoIlJXIiwgZGJhKQ0KICBsb2NhbCBkZGEgPSBHZXREaXN0YW5jZVNxcihkYmEpDQogIGlmIFFyZWFkeSBhbmQgSXNXUmVhZHkoKSBhbmQgUnJlYWR5IGFuZCBjY2EgKyBiZGEgKyBkY2EgKyBkY2EgKyBfZGEgPj0gX2RhICsgY2RhICsgY2NhIGFuZCBkZGEgPCBTcGVsbHMuUS5yYW5nZSAqIFNwZWxscy5RLnJhbmdlIHRoZW4NCiAgICBpZiBDYXN0UShkYmEpIHRoZW4NCiAgICAgIGNhbkNhc3RTcGVsbHMgPSBmYWxzZQ0KICAgICAgUlNraWxsID0gIlEiDQogICAgICBSU2tpbGxUaW1lID0gb3MuY2xvY2soKQ0KICAgIGVuZA0KICBlbHNlaWYgUXJlYWR5IGFuZCBScmVhZHkgYW5kIElzV1JlYWR5KCkgYW5kIG5vdCB3clVzZWQoKSBhbmQgZGRhIDwgU3BlbGxzLlEucmFuZ2UgKiBTcGVsbHMuUS5yYW5nZSBhbmQgY2NhICsgYmRhICsgZGNhICsgZGNhICsgX2RhIDwgX2RhICsgY2RhICsgY2NhIHRoZW4NCiAgICBDYXN0UShkYmEpDQogICAgaWYgQ2FzdFcoZGJhKSB0aGVuDQogICAgICBjYW5DYXN0U3BlbGxzID0gZmFsc2UNCiAgICAgIFJTa2lsbCA9ICJXIg0KICAgICAgUlNraWxsVGltZSA9IG9zLmNsb2NrKCkNCiAgICBlbmQNCiAgZWxzZWlmIGRkYSA8IFNwZWxscy5FLnJhbmdlICogU3BlbGxzLkUucmFuZ2UgYW5kIGRkYSA+IFNwZWxscy5RLnJhbmdlICogU3BlbGxzLlEucmFuZ2UgdGhlbg0KICAgIENhc3RFKGRiYSkNCiAgZWxzZWlmIFFyZWFkeSBhbmQgUnJlYWR5IGFuZCBHZXREaXN0YW5jZVNxcihkYmEpIDwgU3BlbGxzLlEucmFuZ2UgKiBTcGVsbHMuUS5yYW5nZSB0aGVuDQogICAgaWYgQ2FzdFEoZGJhKSB0aGVuDQogICAgICBjYW5DYXN0U3BlbGxzID0gZmFsc2UNCiAgICAgIFJTa2lsbCA9ICJRIg0KICAgICAgUlNraWxsVGltZSA9IG9zLmNsb2NrKCkNCiAgICBlbmQNCiAgZWxzZWlmIE1lbnUuY29tYm8uY29tYm9HYXAgYW5kIEdldERpc3RhbmNlKGRiYSkgPiBTcGVsbHMuUS5yYW5nZSBhbmQgR2V0RGlzdGFuY2UoZGJhKSA8IFNwZWxscy5RLnJhbmdlICsgU3BlbGxzLlcucmFuZ2UgLSAxMDAgYW5kIFFyZWFkeSBhbmQgSXNXUmVhZHkoKSBhbmQgUnJlYWR5IGFuZCBIYXNNYW5hVG9HYXBDbG9zZSgpIGFuZCBHYXBDbG9zZShkYmEpIHRoZW4NCiAgICBpZiBDYXN0UShkYmEpIGFuZCBScmVhZHkgdGhlbg0KICAgICAgY2FuQ2FzdFNwZWxscyA9IGZhbHNlDQogICAgICBSU2tpbGwgPSAiUSINCiAgICAgIFJTa2lsbFRpbWUgPSBvcy5jbG9jaygpDQogICAgZW5kDQogIGVsc2VpZiBNZW51LmNvbWJvLmNvbWJvR2FwIGFuZCBHZXREaXN0YW5jZShkYmEpID4gU3BlbGxzLlEucmFuZ2UgYW5kIEdldERpc3RhbmNlKGRiYSkgPCBTcGVsbHMuUS5yYW5nZSArIFNwZWxscy5XLnJhbmdlIC0gMTAwIGFuZCBRcmVhZHkgYW5kIElzV1JlYWR5KCkgYW5kIEVyZWFkeSBhbmQgSGFzTWFuYVRvR2FwQ2xvc2UoKSBhbmQgR2FwQ2xvc2UoZGJhKSB0aGVuDQogICAgaWYgQ2FzdFEoZGJhKSBhbmQgUnJlYWR5IHRoZW4NCiAgICAgIGNhbkNhc3RTcGVsbHMgPSBmYWxzZQ0KICAgICAgUlNraWxsID0gIlEiDQogICAgICBSU2tpbGxUaW1lID0gb3MuY2xvY2soKQ0KICAgIGVuZA0KICBlbHNlaWYgSXNXUmVhZHkoKSBhbmQgbm90IEVyZWFkeSBhbmQgbm90IFFyZWFkeSBhbmQgbXlIZXJvOkdldFNwZWxsRGF0YShfUSkubGV2ZWwgYW5kIG15SGVybzpHZXRTcGVsbERhdGEoX1EpLmxldmVsID49IDEgYW5kIG15SGVybzpHZXRTcGVsbERhdGEoX1EpLmN1cnJlbnRDZCBhbmQgbXlIZXJvOkdldFNwZWxsRGF0YShfUSkuY3VycmVudENkIDw9IDIgYW5kIChub3QgbXlIZXJvOkdldFNwZWxsRGF0YShfRSkubGV2ZWwgb3Igbm90ICgxIDw9IG15SGVybzpHZXRTcGVsbERhdGEoX0UpLmxldmVsKSBvciBub3QgbXlIZXJvOkdldFNwZWxsRGF0YShfRSkuY3VycmVudENkIG9yIG5vdCAoMiA+PSBteUhlcm86R2V0U3BlbGxEYXRhKF9FKS5jdXJyZW50Q2QpKSBhbmQgbm90IGlzS2lsbGFibGUoZGJhKSB0aGVuDQogICAgcmV0dXJuDQogIGVsc2UNCiAgICBpZiBDYXN0UShkYmEpIGFuZCBTcGVsbERtZ0NhbGN1bGF0aW9ucygiUSIsIGRiYSkgPiBkYmEuaGVhbHRoIHRoZW4NCiAgICAgIGlzS2lsbGVkW2RiYS5uZXR3b3JrSURdID0gdHJ1ZQ0KICAgICAgcmV0dXJuDQogICAgZW5kDQogICAgaWYgQ2FzdFJRKGRiYSkgYW5kIFNwZWxsRG1nQ2FsY3VsYXRpb25zKCJSUSIsIGRiYSkgPiBkYmEuaGVhbHRoIHRoZW4NCiAgICAgIGlzS2lsbGVkW2RiYS5uZXR3b3JrSURdID0gdHJ1ZQ0KICAgICAgcmV0dXJuDQogICAgZW5kDQogICAgaWYgQ2FzdFcoZGJhKSBhbmQgU3BlbGxEbWdDYWxjdWxhdGlvbnMoIlciLCBkYmEpID4gZGJhLmhlYWx0aCB0aGVuDQogICAgICBpc0tpbGxlZFtkYmEubmV0d29ya0lEXSA9IHRydWUNCiAgICAgIHJldHVybg0KICAgIGVuZA0KICAgIENhc3RFKGRiYSkNCiAgZW5kDQplbmQNCmZ1bmN0aW9uIENhc3RSUShkYmEpDQogIGlmIGRiYSBhbmQgUnJlYWR5IGFuZCBHZXREaXN0YW5jZVNxcihkYmEpIDw9IFNwZWxscy5RLnJhbmdlICogU3BlbGxzLlEucmFuZ2UgYW5kIFJTdGF0ZSgiUSIpIHRoZW4NCiAgICBDYXN0U3BlbGwoX1IsIGRiYSkNCiAgZW5kDQplbmQNCmZ1bmN0aW9uIENhc3RSVyhkYmEpDQogIGlmIFJTdGF0ZSgiVyIpIHRoZW4NCiAgICBsb2NhbCBfY2EgPSBHZXRXUHJlZGljdGlvbihkYmEpDQogICAgaWYgZGJhIGFuZCBScmVhZHkgYW5kIEdldERpc3RhbmNlKGRiYSkgPD0gU3BlbGxzLlcucmFuZ2UgKyAxMDAgYW5kIF9jYSB+PSBuaWwgYW5kIG5vdCB3clVzZWQoKSB0aGVuDQogICAgICBDYXN0U3BlbGwoX1IsIF9jYS54LCBfY2EueikNCiAgICBlbmQNCiAgZW5kDQplbmQNCmZ1bmN0aW9uIENhc3RSRShkYmEpDQogIGlmIFJTdGF0ZSgiRSIpIHRoZW4NCiAgICBsb2NhbCBfY2EgPSBHZXRFUHJlZGljdGlvbihkYmEpDQogICAgaWYgZGJhIGFuZCBScmVhZHkgYW5kIEdldERpc3RhbmNlKGRiYSkgPD0gU3BlbGxzLkUucmFuZ2UgYW5kIF9jYSB+PSBuaWwgdGhlbg0KICAgICAgQ2FzdFNwZWxsKF9SLCBfY2EueCwgX2NhLlopDQogICAgZW5kDQogIGVuZA0KZW5kDQpmdW5jdGlvbiBIYXJhc3MoKQ0KICBsb2NhbCBkYmEgPSBmYWxzZQ0KICBpZiB0YXJnZXQgfj0gbmlsIGFuZCBWYWxpZFRhcmdldCh0YXJnZXQpIGFuZCBNYW5hTWFuYWdlcigpIHRoZW4NCiAgICBpZiBNZW51LmhhcmFzcy5oYXJhc3NRIHRoZW4NCiAgICAgIENhc3RRKHRhcmdldCkNCiAgICBlbmQNCiAgICBpZiBNZW51LmhhcmFzcy5oYXJhc3NXIGFuZCBDYXN0Vyh0YXJnZXQpIHRoZW4NCiAgICAgIGRiYSA9IHRydWUNCiAgICBlbmQNCiAgICBpZiBNZW51LmhhcmFzcy5oYXJhc3NFIHRoZW4NCiAgICAgIENhc3RFKHRhcmdldCkNCiAgICBlbmQNCiAgZW5kDQogIGlmIGRiYSBhbmQgd1VzZWQoKSB0aGVuDQogICAgQ2FzdFNwZWxsKF9XKQ0KICBlbmQNCmVuZA0KZnVuY3Rpb24gTGVCbGFuY1NwZWNpZmljU3BlbGxDaGVja3MoKQ0KICBpZiBjYXN0ZWRFVGltZSArIDEuMiA+IG9zLmNsb2NrKCkgdGhlbg0KICAgIHJldHVybg0KICBlbmQNCiAgaWYgY2hhaW5UYXJnZXQgYW5kIGNhc3RlZEVUaW1lICsgMiA8IG9zLmNsb2NrKCkgdGhlbg0KICAgIGNoYWluVGFyZ2V0ID0gbmlsDQogIGVuZA0KICBpZiB3VXNlZCgpIGFuZCBjaGFpblRhcmdldCB+PSBuaWwgYW5kIEdldERpc3RhbmNlKFNwZWxscy5XLnN0YXJ0UG9zLCBjaGFpblRhcmdldCkgPj0gU3BlbGxzLkUucmFuZ2UgdGhlbg0KICAgIHJldHVybg0KICBlbmQNCiAgaWYgd3JVc2VkKCkgYW5kIG5vdCB3VXNlZCgpIGFuZCBjaGFpblRhcmdldCB+PSBuaWwgYW5kIEdldERpc3RhbmNlKFNwZWxscy5XUi5zdGFydFBvcywgY2hhaW5UYXJnZXQpID49IFNwZWxscy5FLnJhbmdlIHRoZW4NCiAgICByZXR1cm4NCiAgZW5kDQogIGlmIHdVc2VkKCkgYW5kIHdyVXNlZCgpIGFuZCBHZXREaXN0YW5jZShTcGVsbHMuVy5zdGFydFBvcywgY2hhaW5UYXJnZXQpID49IFNwZWxscy5FLnJhbmdlIGFuZCBHZXREaXN0YW5jZShTcGVsbHMuV1Iuc3RhcnRQb3MsIGNoYWluVGFyZ2V0KSA+PSBTcGVsbHMuRS5yYW5nZSBhbmQgVG9vRGFuZ2Vyb3VzKG15SGVyby5wb3MpIDw9IDUgdGhlbg0KICAgIHJldHVybg0KICBlbmQNCiAgbG9jYWwgZGJhID0gVG9vRGFuZ2Vyb3VzKG15SGVyby5wb3MpDQogIGlmIHdVc2VkKCkgYW5kIFdyZWFkeSB0aGVuDQogICAgaWYgQ291bnRFbmVteUhlcm9JblJhbmdlKDE1MDApID09IDAgYW5kIFVuZGVyVHVycmV0KG15SGVybywgdHJ1ZSkgdGhlbg0KICAgICAgQ2FzdFNwZWxsKF9XKQ0KICAgIGVuZA0KICAgIGxvY2FsIF9jYSA9IG15SGVyby5oZWFsdGggLyBteUhlcm8ubWF4SGVhbHRoDQogICAgaWYgX2NhID49IDAuNiBhbmQgdGFyZ2V0IGFuZCBpc0tpbGxhYmxlKHRhcmdldCkgYW5kIEdldERpc3RhbmNlKHRhcmdldCkgPD0gODAwIGFuZCBkYmEgPD0gNCB0aGVuDQogICAgICByZXR1cm4NCiAgICBlbmQNCiAgICBpZiBfY2EgPD0gMC4yIGFuZCAyIDw9IENvdW50RW5lbXlIZXJvSW5SYW5nZSg2MDApIHRoZW4NCiAgICAgIHJldHVybg0KICAgIGVuZA0KICAgIGlmIF9jYSA8PSAwLjMgYW5kIHRhcmdldCBhbmQgaXNLaWxsYWJsZSh0YXJnZXQpIGFuZCBHZXREaXN0YW5jZSh0YXJnZXQpIDw9IDUwMCBhbmQgZGJhIDw9IDQgdGhlbg0KICAgICAgcmV0dXJuDQogICAgZW5kDQogICAgaWYgQ2hlY2tBRENUYXJnZXQoU3BlbGxzLlcuc3RhcnRQb3MpIGFuZCBub3QgQ2hlY2tBRENUYXJnZXQobXlIZXJvLnBvcykgYW5kIGRiYSA8PSA0IHRoZW4NCiAgICAgIHJldHVybg0KICAgIGVsc2VpZiBDaGVja0FEQ1RhcmdldChteUhlcm8ucG9zKSBhbmQgbm90IENoZWNrQURDVGFyZ2V0KFNwZWxscy5XLnN0YXJ0UG9zKSBhbmQgVG9vRGFuZ2Vyb3VzKFNwZWxscy5XLnN0YXJ0UG9zKSA8PSA0IHRoZW4NCiAgICAgIENhc3RTcGVsbChfVykNCiAgICBlbmQNCiAgICBpZiBkYmEgPj0gVG9vRGFuZ2Vyb3VzKFNwZWxscy5XLnN0YXJ0UG9zKSBhbmQgZGJhID49IDQgdGhlbg0KICAgICAgQ2FzdFNwZWxsKF9XKQ0KICAgIGVuZA0KICBlbmQNCiAgaWYgd3JVc2VkKCkgYW5kIG5vdCB3VXNlZCgpIHRoZW4NCiAgICBpZiBDaGVja0FEQ1RhcmdldChteUhlcm8ucG9zKSBhbmQgbm90IENoZWNrQURDVGFyZ2V0KFNwZWxscy5XUi5zdGFydFBvcykgdGhlbg0KICAgICAgQ2FzdFNwZWxsKF9SKQ0KICAgIGVuZA0KICAgIGlmIGRiYSA+PSBUb29EYW5nZXJvdXMoU3BlbGxzLldSLnN0YXJ0UG9zKSBhbmQgZGJhID49IDQgdGhlbg0KICAgICAgQ2FzdFNwZWxsKF9SKQ0KICAgIGVuZA0KICBlbmQNCiAgaWYgd1VzZWQoKSBhbmQgQ291bnRFbmVteUhlcm9JblJhbmdlKDYwMCkgPT0gMSBhbmQgZGJhID49IDQgdGhlbg0KICAgIENhc3RTcGVsbChfVykNCiAgZW5kDQogIGlmIE1lbnUuc2V0dGluZ3NXLnVzZU9wdGlvbmFsVyA9PSAxIHRoZW4NCiAgICBpZiB3VXNlZCgpIGFuZCB3clVzZWQoKSB0aGVuDQogICAgICBpZiBDb3VudEVuZW15SGVyb0luUmFuZ2UoNDAwLCBTcGVsbHMuV1Iuc3RhcnRQb3MpIDwgQ291bnRFbmVteUhlcm9JblJhbmdlKDQwMCwgU3BlbGxzLlcuc3RhcnRQb3MpIGFuZCBDb3VudEVuZW15SGVyb0luUmFuZ2UoNDAwLCBTcGVsbHMuV1Iuc3RhcnRQb3MpIDwgQ291bnRFbmVteUhlcm9JblJhbmdlKDQwMCkgdGhlbg0KICAgICAgICBpZiBub3QgUXJlYWR5IGFuZCBub3QgRXJlYWR5IHRoZW4NCiAgICAgICAgICBDYXN0U3BlbGwoX1IpDQogICAgICAgIGVuZA0KICAgICAgZWxzZWlmIENvdW50RW5lbXlIZXJvSW5SYW5nZSg0MDAsIFNwZWxscy5XLnN0YXJ0UG9zKSA+IENvdW50RW5lbXlIZXJvSW5SYW5nZSg0MDAsIFNwZWxscy5XUi5zdGFydFBvcykgYW5kIENvdW50RW5lbXlIZXJvSW5SYW5nZSg0MDAsIFNwZWxscy5XLnN0YXJ0UG9zKSA8IENvdW50RW5lbXlIZXJvSW5SYW5nZSg0MDApIGFuZCBub3QgUXJlYWR5IGFuZCBub3QgRXJlYWR5IHRoZW4NCiAgICAgICAgQ2FzdFNwZWxsKF9XKQ0KICAgICAgZW5kDQogICAgZWxzZWlmIHdVc2VkKCkgdGhlbg0KICAgICAgaWYgQ291bnRFbmVteUhlcm9JblJhbmdlKDQwMCwgU3BlbGxzLlcuc3RhcnRQb3MpIDwgQ291bnRFbmVteUhlcm9JblJhbmdlKDQwMCkgYW5kIChub3QgUXJlYWR5IGFuZCBub3QgRXJlYWR5IG9yIGRiYSA+IFRvb0Rhbmdlcm91cyhTcGVsbHMuVy5zdGFydFBvcykpIHRoZW4NCiAgICAgICAgQ2FzdFNwZWxsKF9XKQ0KICAgICAgZW5kDQogICAgZWxzZWlmIHdyVXNlZCgpIGFuZCBDb3VudEVuZW15SGVyb0luUmFuZ2UoNDAwLCBTcGVsbHMuV1Iuc3RhcnRQb3MpIDwgQ291bnRFbmVteUhlcm9JblJhbmdlKDQwMCkgYW5kIG5vdCBRcmVhZHkgYW5kIG5vdCBFcmVhZHkgdGhlbg0KICAgICAgQ2FzdFNwZWxsKF9XKQ0KICAgIGVuZA0KICBlbHNlaWYgTWVudS5zZXR0aW5nc1cudXNlT3B0aW9uYWxXID09IDMgb3IgTWVudS5zZXR0aW5nc1cudXNlT3B0aW9uYWxXID09IDQgdGhlbg0KICAgIGlmIHdVc2VkKCkgYW5kIHdyVXNlZCgpIHRoZW4NCiAgICAgIGlmIG5vdCBRcmVhZHkgYW5kIG5vdCBFcmVhZHkgdGhlbg0KICAgICAgICBDYXN0U3BlbGwoX1cpDQogICAgICBlbmQNCiAgICBlbHNlaWYgd1VzZWQoKSB0aGVuDQogICAgICBpZiBub3QgUXJlYWR5IGFuZCBub3QgRXJlYWR5IHRoZW4NCiAgICAgICAgQ2FzdFNwZWxsKF9XKQ0KICAgICAgZW5kDQogICAgZWxzZWlmIHdyVXNlZCgpIGFuZCBub3QgUXJlYWR5IGFuZCBub3QgRXJlYWR5IHRoZW4NCiAgICAgIENhc3RTcGVsbChfVykNCiAgICBlbmQNCiAgZW5kDQplbmQNCmZ1bmN0aW9uIEZhcm0oKQ0KICBsb2NhbCBkYmEgPSBmYWxzZQ0KICBpZiBNZW51LmZhcm0uZmFybUFBIGFuZCAoX2FhIGFuZCBfRy5TeE9yYjpDYW5BdHRhY2soKSA9PSB0cnVlIG9yIFNBQ0xvYWRlZCBhbmQgX0cuQXV0b0NhcnJ5Lk9yYndhbGtlcjpDYW5TaG9vdCgpKSB0aGVuDQogICAgcmV0dXJuDQogIGVuZA0KICBpZiBNZW51LmZhcm0uZmFybVEgdGhlbg0KICAgIGZvciBfY2EsIGFjYSBpbiBwYWlycyhlbmVteU1pbmlvbnMub2JqZWN0cykgZG8NCiAgICAgIGlmIGFjYSBhbmQgTWVudS5mYXJtLmZhcm1SYW5nZSBhbmQgR2V0RGlzdGFuY2VTcXIoYWNhKSA8IFNwZWxscy5BQS5yYW5nZSAqIFNwZWxscy5BQS5yYW5nZSBhbmQgR2V0RGlzdGFuY2VTcXIoYWNhKSA8IFNwZWxscy5RLnJhbmdlICogU3BlbGxzLlEucmFuZ2UgdGhlbg0KICAgICAgICBpZiBnZXREbWcoIlEiLCBhY2EsIG15SGVybykgPiBhY2EuaGVhbHRoIGFuZCBDYXN0UShhY2EsIGZhbHNlKSB0aGVuDQogICAgICAgICAgZGJhID0gdHJ1ZQ0KICAgICAgICBlbmQNCiAgICAgIGVuZA0KICAgICAgaWYgZGJhIH49IHRydWUgdGhlbg0KICAgICAgICBpZiBub3QgTWVudS5mYXJtLmZhcm1SYW5nZSBhbmQgR2V0RGlzdGFuY2VTcXIoYWNhKSA8IFNwZWxscy5RLnJhbmdlICogU3BlbGxzLlEucmFuZ2UgdGhlbg0KICAgICAgICAgIGlmIGdldERtZygiUSIsIGFjYSwgbXlIZXJvKSA+IGFjYS5oZWFsdGggdGhlbg0KICAgICAgICAgICAgaWYgQ2FzdFEoYWNhLCBmYWxzZSkgdGhlbg0KICAgICAgICAgICAgICBkYmEgPSB0cnVlDQogICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIGlmIGRiYSB0aGVuDQogICAgICAgICAgICAgIENhc3RTcGVsbChfVykNCiAgICAgICAgICAgIGVuZA0KICAgICAgICAgIGVuZA0KICAgICAgICBlbmQNCiAgICAgIGVuZA0KICAgICAgaWYgZGJhIH49IHRydWUgdGhlbg0KICAgICAgZW5kDQogICAgZW5kDQogIGVuZA0KICBpZiBkYmEgdGhlbg0KICAgIFFyZWFkeSA9IGZhbHNlDQogICAgcmV0dXJuDQogIGVuZA0KICBpZiBNZW51LmZhcm0uZmFybVcgdGhlbg0KICAgIGZvciBfY2EsIGFjYSBpbiBwYWlycyhlbmVteU1pbmlvbnMub2JqZWN0cykgZG8NCiAgICAgIGlmIGFjYSBhbmQgTWVudS5mYXJtLmZhcm1SYW5nZSBhbmQgR2V0RGlzdGFuY2VTcXIoYWNhKSA8IFNwZWxscy5BQS5yYW5nZSAqIFNwZWxscy5BQS5yYW5nZSBhbmQgR2V0RGlzdGFuY2VTcXIoYWNhKSA8IFNwZWxscy5XLnJhbmdlICogU3BlbGxzLlcucmFuZ2UgYW5kIElzV1JlYWR5KCkgYW5kIGdldERtZygiVyIsIGFjYSwgbXlIZXJvKSA+IGFjYS5oZWFsdGggYW5kIENhc3RXKGFjYSkgdGhlbg0KICAgICAgICBDYXN0U3BlbGwoX1cpDQogICAgICAgIGRiYSA9IHRydWUNCiAgICAgICAgZG8gYnJlYWsgZW5kDQogICAgICAgIHJldHVybg0KICAgICAgZW5kDQogICAgICBpZiBub3QgTWVudS5mYXJtLmZhcm1SYW5nZSBhbmQgR2V0RGlzdGFuY2VTcXIoYWNhKSA8IFNwZWxscy5XLnJhbmdlICogU3BlbGxzLlcucmFuZ2UgYW5kIElzV1JlYWR5KCkgYW5kIGdldERtZygiVyIsIGFjYSwgbXlIZXJvKSA+IGFjYS5oZWFsdGggYW5kIENhc3RXKGFjYSkgdGhlbg0KICAgICAgICBDYXN0U3BlbGwoX1cpDQogICAgICAgIGRiYSA9IHRydWUNCiAgICAgICAgYnJlYWsNCiAgICAgIGVuZA0KICAgIGVuZA0KICBlbmQNCiAgaWYgZGJhIHRoZW4NCiAgICBXcmVhZHkgPSBmYWxzZQ0KICAgIHJldHVybg0KICBlbmQNCmVuZA0KZnVuY3Rpb24gTGFuZUNsZWFyKCkNCiAgaWYgTWVudS5sYW5lY2xlYXIubGFuZWNsZWFyUSB0aGVuDQogICAgZm9yIGRiYSwgX2NhIGluIGlwYWlycyhlbmVteU1pbmlvbnMub2JqZWN0cykgZG8NCiAgICAgIGlmIEdldERpc3RhbmNlU3FyKF9jYSkgPCBTcGVsbHMuUS5yYW5nZSAqIFNwZWxscy5RLnJhbmdlIHRoZW4NCiAgICAgICAgQ2FzdFNwZWxsKF9RLCBfY2EpDQogICAgICAgIGJyZWFrDQogICAgICBlbmQNCiAgICBlbmQNCiAgZW5kDQogIGlmIE1lbnUubGFuZWNsZWFyLmxhbmVjbGVhclcgYW5kIE1lbnUubGFuZWNsZWFyLmxhbmVjbGVhclIgYW5kIFJyZWFkeSBhbmQgV3JlYWR5IHRoZW4NCiAgICBpZiBub3Qgd1VzZWQoKSBhbmQgbm90IHdyVXNlZCgpIHRoZW4NCiAgICAgIGxvY2FsIGRiYSwgX2NhID0gR2V0QmVzdEFPRVBvc2l0aW9uKGVuZW15TWluaW9ucy5vYmplY3RzLCBTcGVsbHMuVy5yYW5nZSwgU3BlbGxzLlcucmFkaXVzLCBteUhlcm8pDQogICAgICBpZiBfY2EgYW5kIF9jYSA+PSBNZW51LmxhbmVjbGVhci5sYW5lY2xlYXJXUkFtb3VudCB0aGVuDQogICAgICAgIGlmIGRiYSB+PSBuaWwgdGhlbg0KICAgICAgICAgIENhc3RTcGVsbChfVywgZGJhLngsIGRiYS56KQ0KICAgICAgICBlbmQNCiAgICAgICAgZGJhLCBfY2EgPSBHZXRCZXN0QU9FUG9zaXRpb24oZW5lbXlNaW5pb25zLm9iamVjdHMsIFNwZWxscy5XLnJhbmdlLCBTcGVsbHMuVy5yYWRpdXMsIG15SGVybykNCiAgICAgICAgaWYgZGJhIH49IG5pbCB0aGVuDQogICAgICAgICAgQ2FzdFNwZWxsKF9SLCBkYmEueCwgZGJhLnopDQogICAgICAgIGVuZA0KICAgICAgZW5kDQogICAgZW5kDQogICAgaWYgd1VzZWQoKSB0aGVuDQogICAgICBDYXN0U3BlbGwoX1cpDQogICAgZW5kDQogIGVsc2VpZiBNZW51LmxhbmVjbGVhci5sYW5lY2xlYXJXIGFuZCBJc1dSZWFkeSgpIHRoZW4NCiAgICBsb2NhbCBkYmEsIF9jYSA9IEdldEJlc3RBT0VQb3NpdGlvbihlbmVteU1pbmlvbnMub2JqZWN0cywgU3BlbGxzLlcucmFuZ2UsIFNwZWxscy5XLnJhZGl1cywgbXlIZXJvKQ0KICAgIGlmIGRiYSB+PSBuaWwgYW5kIF9jYSA+PSBNZW51LmxhbmVjbGVhci5sYW5lY2xlYXJXQW1vdW50IHRoZW4NCiAgICAgIENhc3RTcGVsbChfVywgZGJhLngsIGRiYS56KQ0KICAgICAgQ2FzdFNwZWxsKF9XKQ0KICAgIGVuZA0KICBlbHNlaWYgTWVudS5sYW5lY2xlYXIubGFuZWNsZWFyUiBhbmQgUnJlYWR5IGFuZCBSU3RhdGUoIlciKSBhbmQgbm90IHdyVXNlZCgpIHRoZW4NCiAgICBsb2NhbCBkYmEsIF9jYSA9IEdldEJlc3RBT0VQb3NpdGlvbihlbmVteU1pbmlvbnMub2JqZWN0cywgU3BlbGxzLlcucmFuZ2UsIFNwZWxscy5XLnJhZGl1cywgbXlIZXJvKQ0KICAgIGlmIGRiYSB+PSBuaWwgYW5kIF9jYSA+PSBNZW51LmxhbmVjbGVhci5sYW5lY2xlYXJSQW1vdW50IHRoZW4NCiAgICAgIENhc3RTcGVsbChfUiwgZGJhLngsIGRiYS56KQ0KICAgICAgQ2FzdFNwZWxsKF9SKQ0KICAgIGVuZA0KICBlbmQNCmVuZA0KZnVuY3Rpb24gS2lsbFN0ZWFsKCkNCiAgaWYgbm90IGNhbkNhc3RTcGVsbHMgdGhlbg0KICAgIHJldHVybg0KICBlbmQNCiAgZm9yIGRiYSwgX2NhIGluIHBhaXJzKEdldEVuZW15SGVyb2VzKCkpIGRvDQogICAgaWYgVmFsaWRUYXJnZXQoX2NhKSBhbmQgbm90IF9jYS5kZWFkIGFuZCBfY2EudmlzaWJsZSBhbmQgTWVudS5raWxsc3RlYWwuZW5lbWllc1tfY2EuY2hhck5hbWVdIHRoZW4NCiAgICAgIGxvY2FsIGFjYSwgYmNhLCBjY2EsIGRjYSwgX2RhLCBhZGEgPSAwLCBuaWwsIG5pbCwgbmlsLCBuaWwsIG5pbA0KICAgICAgaWYgR2V0RGlzdGFuY2UoX2NhKSA8PSBTcGVsbHMuUS5yYW5nZSArIFNwZWxscy5XLnJhbmdlIHRoZW4NCiAgICAgICAgYWNhID0gUXJlYWR5IGFuZCBNZW51LmtpbGxzdGVhbC5raWxsc3RlYWxRIGFuZCBTcGVsbERtZ0NhbGN1bGF0aW9ucygiUSIsIF9jYSkgb3IgMA0KICAgICAgICBiY2EgPSBScmVhZHkgYW5kIFJTdGF0ZSgiUSIpIGFuZCBTcGVsbERtZ0NhbGN1bGF0aW9ucygiUlEiLCBfY2EpIG9yIDANCiAgICAgICAgY2NhID0gU3BlbGxEbWdDYWxjdWxhdGlvbnMoIlFQcm9jIiwgX2NhKQ0KICAgICAgICBkY2EgPSBJc1dSZWFkeSgpIGFuZCBNZW51LmtpbGxzdGVhbC5raWxsc3RlYWxXIGFuZCBTcGVsbERtZ0NhbGN1bGF0aW9ucygiVyIsIF9jYSkgb3IgMA0KICAgICAgICBfZGEgPSBScmVhZHkgYW5kIE1lbnUua2lsbHN0ZWFsLmtpbGxzdGVhbFIgYW5kIG5vdCB3clVzZWQoKSBhbmQgUlN0YXRlKCJXIikgYW5kIFNwZWxsRG1nQ2FsY3VsYXRpb25zKCJSVyIsIF9jYSkgb3IgMA0KICAgICAgZW5kDQogICAgICBpZiBub3QgSXNPdmVya2lsbChfY2EpIHRoZW4NCiAgICAgICAgaWYgR2V0RGlzdGFuY2VTcXIoX2NhKSA8PSA0MjI1MDAgdGhlbg0KICAgICAgICAgIGlmIGFjYSA+IGRjYSBhbmQgZGNhID4gX2NhLmhlYWx0aCB0aGVuDQogICAgICAgICAgICBDYXN0VyhfY2EpDQogICAgICAgICAgZWxzZWlmIGFjYSA+IF9jYS5oZWFsdGggdGhlbg0KICAgICAgICAgICAgQ2FzdFEoX2NhKQ0KICAgICAgICAgIGVsc2VpZiBlbmVtaWVzQnVmZnNbX2NhLm5ldHdvcmtJRF0ucmVjZWl2ZWQgYW5kIGFjYSArIGNjYSA+IF9jYS5oZWFsdGggdGhlbg0KICAgICAgICAgICAgQ2FzdFEoX2NhKQ0KICAgICAgICAgIGVsc2VpZiBlbmVtaWVzQnVmZnNbX2NhLm5ldHdvcmtJRF0ucmVjZWl2ZWQgYW5kIGRjYSArIGNjYSA+IF9jYS5oZWFsdGggdGhlbg0KICAgICAgICAgICAgQ2FzdFcoX2NhKQ0KICAgICAgICAgIGVsc2VpZiBiY2EgPiBfZGEgYW5kIF9kYSA+IF9jYS5oZWFsdGggYW5kIFJTdGF0ZSgiVyIpIHRoZW4NCiAgICAgICAgICAgIENhc3RSVyhfY2EpDQogICAgICAgICAgZWxzZWlmIGJjYSA+IF9jYS5oZWFsdGggYW5kIFJTdGF0ZSgiUSIpIHRoZW4NCiAgICAgICAgICAgIENhc3RSUShfY2EpDQogICAgICAgICAgZWxzZWlmIGVuZW1pZXNCdWZmc1tfY2EubmV0d29ya0lEXS5yZWNlaXZlZCBhbmQgY2NhICsgYmNhID4gX2NhLmhlYWx0aCBhbmQgUlN0YXRlKCJRIikgdGhlbg0KICAgICAgICAgICAgQ2FzdFJRKF9jYSkNCiAgICAgICAgICBlbHNlaWYgYmNhICsgY2NhICsgYWNhID4gX2NhLmhlYWx0aCBhbmQgUXJlYWR5IGFuZCBScmVhZHkgdGhlbg0KICAgICAgICAgICAgQ2FzdFEoX2NhKQ0KICAgICAgICAgICAgQ2FzdFJRKF9jYSkNCiAgICAgICAgICBlbmQNCiAgICAgICAgZWxzZWlmIE1lbnUua2lsbHN0ZWFsLmtpbGxzdGVhbEdhcCBhbmQgR2V0RGlzdGFuY2VTcXIoX2NhKSA+PSAzNjAwMDAgYW5kIEdldERpc3RhbmNlKF9jYSkgPD0gU3BlbGxzLlEucmFuZ2UgKyBTcGVsbHMuVy5yYW5nZSAtIDEwMCBhbmQgSXNXUmVhZHkoKSBhbmQgSGFzTWFuYVRvR2FwQ2xvc2UoKSB0aGVuDQogICAgICAgICAgaWYgYWNhID4gX2NhLmhlYWx0aCB0aGVuDQogICAgICAgICAgICBpZiBHYXBDbG9zZShfY2EpIHRoZW4NCiAgICAgICAgICAgICAgQ2FzdFEoX2NhKQ0KICAgICAgICAgICAgZW5kDQogICAgICAgICAgZWxzZWlmIEdldERpc3RhbmNlKF9jYSkgPCBTcGVsbHMuVy5yYW5nZSArIFNwZWxscy5XLnJhbmdlIC0gMTAwIGFuZCBiY2EgPiBfZGEgYW5kIF9kYSA+IF9jYS5oZWFsdGggYW5kIFJyZWFkeSB0aGVuDQogICAgICAgICAgICBpZiBHYXBDbG9zZShfY2EpIGFuZCBSU3RhdGUoIlciKSB0aGVuDQogICAgICAgICAgICAgIENhc3RSVyhfY2EpDQogICAgICAgICAgICBlbmQNCiAgICAgICAgICBlbHNlaWYgTWVudS5raWxsc3RlYWwua2lsbHN0ZWFsUVIgYW5kIGJjYSArIGNjYSArIGFjYSA+IF9jYS5oZWFsdGggYW5kIFFyZWFkeSBhbmQgUnJlYWR5IHRoZW4NCiAgICAgICAgICAgIGlmIEdldERpc3RhbmNlU3FyKF9jYSkgPj0gU3BlbGxzLlEucmFuZ2UgKiBTcGVsbHMuUS5yYW5nZSBhbmQgR2V0RGlzdGFuY2VTcXIoX2NhKSA8PSAoU3BlbGxzLlEucmFuZ2UgKyBTcGVsbHMuVy5yYW5nZSAtIDIwMCkgKiAoU3BlbGxzLlEucmFuZ2UgKyBTcGVsbHMuVy5yYW5nZSAtIDIwMCkgdGhlbg0KICAgICAgICAgICAgICBHYXBDbG9zZShfY2EpDQogICAgICAgICAgICAgIENhc3RRKF9jYSkNCiAgICAgICAgICAgICAgQ2FzdFJRKF9jYSkNCiAgICAgICAgICAgIGVsc2VpZiBHZXREaXN0YW5jZVNxcihfY2EpIDw9IFNwZWxscy5RLnJhbmdlICogU3BlbGxzLlEucmFuZ2UgdGhlbg0KICAgICAgICAgICAgICBDYXN0UShfY2EpDQogICAgICAgICAgICAgIENhc3RSUShfY2EpDQogICAgICAgICAgICBlbmQNCiAgICAgICAgICBlbmQNCiAgICAgICAgZW5kDQogICAgICBlbmQNCiAgICBlbmQNCiAgZW5kDQplbmQNCmZ1bmN0aW9uIEdldE9yYlRhcmdldCgpDQogIGxvY2FsIGRiYSwgX2NhDQogIGlmIGZvcmNlZFRhcmdldCBhbmQgR2V0RGlzdGFuY2VTcXIoZm9yY2VkVGFyZ2V0KSA8PSBTcGVsbHMuRS5yYW5nZSAqIFNwZWxscy5FLnJhbmdlIHRoZW4NCiAgICByZXR1cm4gZm9yY2VkVGFyZ2V0DQogIGVuZA0KICB0czp1cGRhdGUoKQ0KICB0c0xvbmc6dXBkYXRlKCkNCiAgZGJhID0gdHNMb25nLnRhcmdldA0KICBfY2EgPSBkYmENCiAgaWYgZGJhIHRoZW4NCiAgICBpZiBHZXREaXN0YW5jZShkYmEpID4gNzAwIGFuZCBDb3VudEVuZW15SGVyb0luUmFuZ2UoNjAwKSA+PSAzIGFuZCBub3QgdGFibGUuY29udGFpbnMocHJpb3JpdHlUYWJsZS5BUCwgZGJhLmNoYXJOYW1lKSBhbmQgbm90IHRhYmxlLmNvbnRhaW5zKHByaW9yaXR5VGFibGUuU3VwcG9ydCwgZGJhLmNoYXJOYW1lKSBhbmQgbm90IHRhYmxlLmNvbnRhaW5zKHByaW9yaXR5VGFibGUuQURfQ2FycnksIGRiYS5jaGFyTmFtZSkgdGhlbg0KICAgICAgZGJhID0gbmlsDQogICAgZWxzZQ0KICAgICAgbG9jYWwgYWNhID0gUXJlYWR5IGFuZCBTcGVsbERtZ0NhbGN1bGF0aW9ucygiUSIsIGRiYSkgb3IgMA0KICAgICAgbG9jYWwgYmNhID0gUXJlYWR5IGFuZCBSU3RhdGUoIlEiKSBhbmQgU3BlbGxEbWdDYWxjdWxhdGlvbnMoIlJRIiwgZGJhKSBvciAwDQogICAgICBsb2NhbCBjY2EgPSAoUXJlYWR5IG9yIFJyZWFkeSkgYW5kIFNwZWxsRG1nQ2FsY3VsYXRpb25zKCJRUHJvYyIsIGRiYSkgb3IgMA0KICAgICAgbG9jYWwgZGNhID0gUnJlYWR5IGFuZCBRcmVhZHkgYW5kIGFjYSArIGJjYSArIGNjYSBvciAwDQogICAgICBpZiBHZXREaXN0YW5jZShkYmEpID4gNzAwIGFuZCAzIDw9IENvdW50RW5lbXlIZXJvSW5SYW5nZSgzMDAsIGRiYSkgYW5kIGRjYSA8IGRiYS5oZWFsdGggdGhlbg0KICAgICAgICBkYmEgPSBuaWwNCiAgICAgIGVuZA0KICAgIGVuZA0KICAgIGlmIG5vdCBIYXNNYW5hVG9HYXBDbG9zZSgpIG9yIGRiYSA9PSBuaWwgdGhlbg0KICAgICAgZGJhID0gdHMudGFyZ2V0DQogICAgZW5kDQogICAgaWYgZGJhIGFuZCBHZXREaXN0YW5jZVNxcihkYmEpID49IDQ5MDAwMCBhbmQgdHMudGFyZ2V0IH49IG5pbCBhbmQgKHRhYmxlLmNvbnRhaW5zKHByaW9yaXR5VGFibGUuQVAsIHRzLnRhcmdldC5jaGFyTmFtZSkgb3IgdGFibGUuY29udGFpbnMocHJpb3JpdHlUYWJsZS5TdXBwb3J0LCB0cy50YXJnZXQuY2hhck5hbWUpIG9yIHRhYmxlLmNvbnRhaW5zKHByaW9yaXR5VGFibGUuQURfQ2FycnksIHRzLnRhcmdldC5jaGFyTmFtZSkpIHRoZW4NCiAgICAgIGRiYSA9IHRzLnRhcmdldA0KICAgIGVuZA0KICAgIGlmIGRiYSA9PSBuaWwgYW5kIF9jYSB+PSBuaWwgdGhlbg0KICAgICAgZGJhID0gX2NhDQogICAgZW5kDQogICAgaWYgZGJhIGFuZCBJc092ZXJraWxsKGRiYSkgdGhlbg0KICAgICAgZGJhID0gbmlsDQogICAgZW5kDQogICAgaWYgZGJhIGFuZCAoZGJhLnR5cGUgYW5kIGRiYS50eXBlIH49IG15SGVyby50eXBlIG9yIG5vdCBkYmEudHlwZSkgdGhlbg0KICAgICAgZGJhID0gbmlsDQogICAgZW5kDQogIGVuZA0KICBpZiBNZW51LmNvbWJvLmZvcmNlQURDIHRoZW4NCiAgICBsb2NhbCBhY2EgPSBmYWxzZQ0KICAgIGZvciBiY2EsIGNjYSBpbiBwYWlycyhHZXRFbmVteUhlcm9lcygpKSBkbw0KICAgICAgaWYgY2NhIGFuZCBjY2EudHlwZSBhbmQgVmFsaWRUYXJnZXQoY2NhLCBTcGVsbHMuRS5yYW5nZSkgYW5kIGNjYS52aXNpYmxlIGFuZCBub3QgY2NhLmRlYWQgYW5kICh0YWJsZS5jb250YWlucyhwcmlvcml0eVRhYmxlLkFQLCBjY2EuY2hhck5hbWUpIG9yIHRhYmxlLmNvbnRhaW5zKHByaW9yaXR5VGFibGUuQURfQ2FycnksIGNjYS5jaGFyTmFtZSkpIHRoZW4NCiAgICAgICAgaWYgZGJhIGFuZCBpc0tpbGxhYmxlKGRiYSkgYW5kIG5vdCBpc0tpbGxhYmxlKGNjYSkgdGhlbg0KICAgICAgICAgIGJyZWFrDQogICAgICAgIGVuZA0KICAgICAgICBkYmEgPSBjY2ENCiAgICAgICAgYWNhID0gdHJ1ZQ0KICAgICAgICBicmVhaw0KICAgICAgZW5kDQogICAgZW5kDQogIGVuZA0KICByZXR1cm4gZGJhDQplbmQNCmZ1bmN0aW9uIFpob255YXMoKQ0KICBsb2NhbCBkYmEgPSBHZXRJbnZlbnRvcnlTbG90SXRlbSgzMTU3KQ0KICBpZiBkYmEgfj0gbmlsIGFuZCBteUhlcm86Q2FuVXNlU3BlbGwoZGJhKSA9PSBSRUFEWSBhbmQgbXlIZXJvLmhlYWx0aCAvIG15SGVyby5tYXhIZWFsdGggPD0gTWVudS5taXNjLnpob255YXMuemhvbnlhc3VuZGVyIHRoZW4NCiAgICBDYXN0U3BlbGwoZGJhKQ0KICBlbmQNCmVuZA0KZnVuY3Rpb24gVXNlSWduaXRlKCkNCiAgbG9jYWwgZGJhID0gNTAgKyAyMCAqIG15SGVyby5sZXZlbA0KICBmb3IgX2NhLCBhY2EgaW4gcGFpcnMoR2V0RW5lbXlIZXJvZXMoKSkgZG8NCiAgICBpZiBhY2EgYW5kIEdldERpc3RhbmNlKGFjYSwgbXlIZXJvKSA8IDYwMCBhbmQgVmFsaWRUYXJnZXQoYWNhLCA2MDApIGFuZCBNZW51Lm1pc2MuYXV0b2lnbml0ZVthY2EuY2hhck5hbWVdIGFuZCBJcmVhZHkgYW5kIGRiYSA+IGFjYS5oZWFsdGggdGhlbg0KICAgICAgQ2FzdFNwZWxsKGlnbml0ZSwgYWNhKQ0KICAgIGVuZA0KICBlbmQNCmVuZA0KZnVuY3Rpb24gTWFuYU1hbmFnZXIoKQ0KICBpZiBteUhlcm8ubWFuYSAvIG15SGVyby5tYXhNYW5hIDw9IE1lbnUuaGFyYXNzLmhhcmFzc01hbmEgdGhlbg0KICAgIHJldHVybiBmYWxzZQ0KICBlbmQNCiAgcmV0dXJuIHRydWUNCmVuZA0KZnVuY3Rpb24gQ2hlY2tJZ25pdGUoKQ0KICBpZiBNZW51Lm1pc2MuY291bnRlckxvZ2ljLnVzZVBvdGlvbiBhbmQgaWduaXRlZFRhYmxlLmlnbml0ZWQgYW5kIGlnbml0ZWRUYWJsZS5zb3VyY2UgdGhlbg0KICAgIGxvY2FsIGRiYSA9IGlnbml0ZWRUYWJsZS50aW1lICsgNSAtIG9zLmNsb2NrKCkNCiAgICBsb2NhbCBfY2EgPSBkYmEgKiAoMTAgKyBpZ25pdGVkVGFibGUuc291cmNlLmxldmVsICogNCkNCiAgICBpZiBfY2EgPiBteUhlcm8uaGVhbHRoIGFuZCBfY2EgLSAzNyA8PSBteUhlcm8uaGVhbHRoIG9yIF9jYSA+PSBteUhlcm8uaGVhbHRoICogMC4zIHRoZW4NCiAgICAgIGxvY2FsIGFjYSA9IEdldEludmVudG9yeVNsb3RJdGVtKDIwMDMpDQogICAgICBpZiBhY2Egfj0gbmlsIGFuZCBub3QgaGFzUG90aW9uQWN0aXZlIHRoZW4NCiAgICAgICAgQ2FzdFNwZWxsKGFjYSkNCiAgICAgIGVuZA0KICAgIGVuZA0KICBlbmQNCmVuZA0KZnVuY3Rpb24gSWduaXRlV2lsbEtpbGxNZSgpDQogIGlmIGlnbml0ZWRUYWJsZS5pZ25pdGVkIGFuZCBpZ25pdGVkVGFibGUuc291cmNlIGFuZCBpZ25pdGVkVGFibGUuc291cmNlLmxldmVsIHRoZW4NCiAgICBsb2NhbCBkYmEgPSBpZ25pdGVkVGFibGUudGltZSArIDUgLSBvcy5jbG9jaygpDQogICAgbG9jYWwgX2NhID0gZGJhICogKDEwICsgaWduaXRlZFRhYmxlLnNvdXJjZS5sZXZlbCAqIDQpDQogICAgaWYgX2NhID4gbXlIZXJvLmhlYWx0aCB0aGVuDQogICAgICBpZiBpZ25pdGVkVGFibGUuaGFzU2FpZCA9PSBmYWxzZSB0aGVuDQogICAgICAgIFNheShpZ25pdGVkVGFibGUuc291cmNlLmNoYXJOYW1lIC4uICIncyBpZ25pdGUgd2lsbCBraWxsIG1lLiIpDQogICAgICAgIGlnbml0ZWRUYWJsZS5oYXNTYWlkID0gdHJ1ZQ0KICAgICAgZW5kDQogICAgICBpZiBpZ25pdGVkVGFibGUud2lsbEtpbGxNZSB+PSB0cnVlIHRoZW4NCiAgICAgICAgaWduaXRlZFRhYmxlLndpbGxLaWxsTWUgPSB0cnVlDQogICAgICBlbmQNCiAgICBlbHNlDQogICAgICBpZiBpZ25pdGVkVGFibGUuaGFzU2FpZCA9PSB0cnVlIHRoZW4NCiAgICAgICAgU2F5KGlnbml0ZWRUYWJsZS5zb3VyY2UuY2hhck5hbWUgLi4gIidzIGlnbml0ZSB3aWxsIE5PIExPTkdFUiBraWxsIG1lLiIpDQogICAgICAgIGlnbml0ZWRUYWJsZS5oYXNTYWlkID0gZmFsc2UNCiAgICAgIGVuZA0KICAgICAgaWYgaWduaXRlZFRhYmxlLndpbGxLaWxsTWUgPT0gdHJ1ZSB0aGVuDQogICAgICAgIGlnbml0ZWRUYWJsZS53aWxsS2lsbE1lID0gZmFsc2UNCiAgICAgIGVuZA0KICAgIGVuZA0KICBlbHNlaWYgaWduaXRlZFRhYmxlLndpbGxLaWxsTWUgPT0gdHJ1ZSB0aGVuDQogICAgaWduaXRlZFRhYmxlLndpbGxLaWxsTWUgPSBmYWxzZQ0KICBlbmQNCmVuZA0KZnVuY3Rpb24gWU9MTygpDQogIGlmIE1lbnUueW9sby51c2VZb2xvIGFuZCBpZ25pdGVkVGFibGUud2lsbEtpbGxNZSA9PSB0cnVlIHRoZW4NCiAgICBTbWFydENvbWJvKCkNCiAgZW5kDQplbmQNCmZ1bmN0aW9uIFNldFByaW9yaXR5KGRiYSwgX2NhLCBhY2EpDQogIGZvciBpID0gMSwgI2RiYSBkbw0KICAgIGlmIF9jYS5jaGFyTmFtZTpmaW5kKGRiYVtpXSkgfj0gbmlsIHRoZW4NCiAgICAgIFRTX1NldEhlcm9Qcmlvcml0eShhY2EsIF9jYS5jaGFyTmFtZSkNCiAgICBlbmQNCiAgZW5kDQplbmQNCmZ1bmN0aW9uIGFycmFuZ2VQcmlvcml0eXMoKQ0KICBmb3IgZGJhLCBfY2EgaW4gaXBhaXJzKEdldEVuZW15SGVyb2VzKCkpIGRvDQogICAgU2V0UHJpb3JpdHkocHJpb3JpdHlUYWJsZS5BRF9DYXJyeSwgX2NhLCAxKQ0KICAgIFNldFByaW9yaXR5KHByaW9yaXR5VGFibGUuQVAsIF9jYSwgMikNCiAgICBTZXRQcmlvcml0eShwcmlvcml0eVRhYmxlLlN1cHBvcnQsIF9jYSwgMykNCiAgICBTZXRQcmlvcml0eShwcmlvcml0eVRhYmxlLkJydWlzZXIsIF9jYSwgNCkNCiAgICBTZXRQcmlvcml0eShwcmlvcml0eVRhYmxlLlRhbmssIF9jYSwgNSkNCiAgZW5kDQplbmQNCmZ1bmN0aW9uIGFycmFuZ2VQcmlvcml0eXNUVCgpDQogIGZvciBkYmEsIF9jYSBpbiBpcGFpcnMoR2V0RW5lbXlIZXJvZXMoKSkgZG8NCiAgICBTZXRQcmlvcml0eShwcmlvcml0eVRhYmxlLkFEX0NhcnJ5LCBfY2EsIDEpDQogICAgU2V0UHJpb3JpdHkocHJpb3JpdHlUYWJsZS5BUCwgX2NhLCAxKQ0KICAgIFNldFByaW9yaXR5KHByaW9yaXR5VGFibGUuU3VwcG9ydCwgX2NhLCAyKQ0KICAgIFNldFByaW9yaXR5KHByaW9yaXR5VGFibGUuQnJ1aXNlciwgX2NhLCAyKQ0KICAgIFNldFByaW9yaXR5KHByaW9yaXR5VGFibGUuVGFuaywgX2NhLCAzKQ0KICBlbmQNCmVuZA0KZnVuY3Rpb24gVXNlSXRlbXMoZGJhKQ0KICBpZiBkYmEgfj0gbmlsIHRoZW4NCiAgICBmb3IgX2NhLCBhY2EgaW4gcGFpcnMoSXRlbXMpIGRvDQogICAgICBhY2Euc2xvdCA9IEdldEludmVudG9yeVNsb3RJdGVtKGFjYS5pZCkNCiAgICAgIGlmIGFjYS5zbG90IH49IG5pbCBhbmQgbXlIZXJvOkNhblVzZVNwZWxsKGFjYS5zbG90KSA9PSBSRUFEWSB0aGVuDQogICAgICAgIGlmIGFjYS5yZXFUYXJnZXQgYW5kIEdldERpc3RhbmNlKGRiYSkgPCBhY2EucmFuZ2UgdGhlbg0KICAgICAgICAgIENhc3RTcGVsbChhY2Euc2xvdCwgZGJhKQ0KICAgICAgICBlbHNlaWYgbm90IGFjYS5yZXFUYXJnZXQgYW5kIEdldERpc3RhbmNlKGRiYSkgLSBnZXRIaXRCb3hSYWRpdXMobXlIZXJvKSAtIGdldEhpdEJveFJhZGl1cyhkYmEpIDwgNTAgdGhlbg0KICAgICAgICAgIENhc3RTcGVsbChhY2Euc2xvdCkNCiAgICAgICAgZW5kDQogICAgICBlbmQNCiAgICBlbmQNCiAgZW5kDQplbmQNCmZ1bmN0aW9uIENhbGNEYW1hZ2UoKQ0KICBmb3IgZGJhLCBfY2EgaW4gcGFpcnMoR2V0RW5lbXlIZXJvZXMoKSkgZG8NCiAgICBpZiBfY2EgYW5kIGlzS2lsbGVkW19jYS5uZXR3b3JrSURdIGFuZCBpc0tpbGxlZFtfY2EubmV0d29ya0lEXSA9PSB0cnVlIHRoZW4NCiAgICAgIGlmIF9jYS5kZWFkIHRoZW4NCiAgICAgICAgaXNLaWxsZWRbX2NhLm5ldHdvcmtJRF0gPSBmYWxzZQ0KICAgICAgZWxzZWlmIHRhcmdldCBhbmQgX2NhLm5ldHdvcmtJRCB+PSB0YXJnZXQubmV0d29ya0lEIHRoZW4NCiAgICAgICAgaXNLaWxsZWRbX2NhLm5ldHdvcmtJRF0gPSBmYWxzZQ0KICAgICAgZW5kDQogICAgZW5kDQogICAgaWYgZW5lbWllc0J1ZmZzW19jYS5uZXR3b3JrSURdLnJlY2VpdmVkIGFuZCBlbmVtaWVzQnVmZnNbX2NhLm5ldHdvcmtJRF0ucmVjZWl2ZWQgPT0gdHJ1ZSBhbmQgZW5lbWllc0J1ZmZzW19jYS5uZXR3b3JrSURdLmVuZFRpbWUgYW5kIGVuZW1pZXNCdWZmc1tfY2EubmV0d29ya0lEXS5lbmRUaW1lIDwgb3MuY2xvY2soKSB0aGVuDQogICAgICBlbmVtaWVzQnVmZnNbX2NhLm5ldHdvcmtJRF0ucmVjZWl2ZWQgPSBmYWxzZQ0KICAgIGVuZA0KICAgIGlmIF9jYSBhbmQgVmFsaWRUYXJnZXQoX2NhKSB0aGVuDQogICAgICBsb2NhbCBhY2EgPSBTcGVsbERtZ0NhbGN1bGF0aW9ucygiUSIsIF9jYSkgb3IgMA0KICAgICAgbG9jYWwgYmNhID0gUlN0YXRlKCJRIikgYW5kIFNwZWxsRG1nQ2FsY3VsYXRpb25zKCJSUSIsIF9jYSkgb3IgMA0KICAgICAgbG9jYWwgY2NhID0gKFFyZWFkeSBvciBScmVhZHkgYW5kIFJTdGF0ZSgiUSIpKSBhbmQgU3BlbGxEbWdDYWxjdWxhdGlvbnMoIlFQcm9jIiwgX2NhKSBvciAwDQogICAgICBsb2NhbCBkY2EgPSBJc1dSZWFkeSgpIGFuZCBTcGVsbERtZ0NhbGN1bGF0aW9ucygiVyIsIF9jYSkgb3IgMA0KICAgICAgbG9jYWwgX2RhID0gbm90IHdyVXNlZCgpIGFuZCBSU3RhdGUoIlciKSBhbmQgU3BlbGxEbWdDYWxjdWxhdGlvbnMoIlJXIiwgX2NhKSBvciAwDQogICAgICBsb2NhbCBhZGEgPSBTcGVsbERtZ0NhbGN1bGF0aW9ucygiRSIsIF9jYSkgb3IgMA0KICAgICAgbG9jYWwgYmRhID0gNTAgKyAyMCAqIG15SGVyby5sZXZlbCBvciAwDQogICAgICBpZiBteUhlcm8uZGFtYWdlID4gX2NhLmhlYWx0aCB0aGVuDQogICAgICAgIEtpbGxUZXh0W19jYS5uZXR3b3JrSURdID0gIk1VUkRFUiBISU0iDQogICAgICBlbHNlaWYgUXJlYWR5IGFuZCBhY2EgPCBkY2EgYW5kIGFjYSA+IF9jYS5oZWFsdGggdGhlbg0KICAgICAgICBLaWxsVGV4dFtfY2EubmV0d29ya0lEXSA9ICJRID0ga2lsbCINCiAgICAgIGVsc2VpZiBJc1dSZWFkeSgpIGFuZCBkY2EgPiBfY2EuaGVhbHRoIHRoZW4NCiAgICAgICAgS2lsbFRleHRbX2NhLm5ldHdvcmtJRF0gPSAiVyA9IGtpbGwiDQogICAgICBlbHNlaWYgRXJlYWR5IGFuZCBhZGEgPiBfY2EuaGVhbHRoIHRoZW4NCiAgICAgICAgS2lsbFRleHRbX2NhLm5ldHdvcmtJRF0gPSAiRSA9IGtpbGwiDQogICAgICBlbHNlaWYgUXJlYWR5IGFuZCBJcmVhZHkgYW5kIGFjYSArIGJkYSA+IF9jYS5oZWFsdGggdGhlbg0KICAgICAgICBLaWxsVGV4dFtfY2EubmV0d29ya0lEXSA9ICJRICsgSWduaXRlID0ga2lsbCINCiAgICAgIGVsc2VpZiBJc1dSZWFkeSgpIGFuZCBJcmVhZHkgYW5kIGRjYSArIGJkYSA+IF9jYS5oZWFsdGggdGhlbg0KICAgICAgICBLaWxsVGV4dFtfY2EubmV0d29ya0lEXSA9ICJXICsgSWduaXRlID0ga2lsbCINCiAgICAgIGVsc2VpZiBJc1dSZWFkeSgpIGFuZCBRcmVhZHkgYW5kIGFjYSArIGNjYSArIGRjYSA+IF9jYS5oZWFsdGggdGhlbg0KICAgICAgICBLaWxsVGV4dFtfY2EubmV0d29ya0lEXSA9ICJRICsgVyA9IGtpbGwiDQogICAgICBlbHNlaWYgUXJlYWR5IGFuZCBFcmVhZHkgYW5kIGRjYSArIGFkYSA+IF9jYS5oZWFsdGggdGhlbg0KICAgICAgICBLaWxsVGV4dFtfY2EubmV0d29ya0lEXSA9ICJRICsgRSA9IGtpbGwiDQogICAgICBlbHNlaWYgUXJlYWR5IGFuZCBScmVhZHkgYW5kIGFjYSArIGJjYSArIGNjYSA+IF9jYS5oZWFsdGggdGhlbg0KICAgICAgICBLaWxsVGV4dFtfY2EubmV0d29ya0lEXSA9ICJRICsgUiA9IGtpbGwiDQogICAgICBlbHNlaWYgSXNXUmVhZHkoKSBhbmQgUnJlYWR5IGFuZCBkY2EgKyBfZGEgPiBfY2EuaGVhbHRoIHRoZW4NCiAgICAgICAgS2lsbFRleHRbX2NhLm5ldHdvcmtJRF0gPSAiVyArIFIgPSBraWxsIg0KICAgICAgZWxzZWlmIFFyZWFkeSBhbmQgUnJlYWR5IGFuZCBJcmVhZHkgYW5kIGFjYSArIGJjYSArIGNjYSArIGJkYSA+IF9jYS5oZWFsdGggdGhlbg0KICAgICAgICBLaWxsVGV4dFtfY2EubmV0d29ya0lEXSA9ICJRICsgUiArIElnbml0ZSA9IGtpbGwiDQogICAgICBlbHNlaWYgUXJlYWR5IGFuZCBJc1dSZWFkeSgpIGFuZCBScmVhZHkgYW5kIGFjYSArIGNjYSArIGRjYSArIF9kYSA+IF9jYS5oZWFsdGggdGhlbg0KICAgICAgICBLaWxsVGV4dFtfY2EubmV0d29ya0lEXSA9ICJRICsgVyArIFIgPSBraWxsIg0KICAgICAgZWxzZWlmIFFyZWFkeSBhbmQgUnJlYWR5IGFuZCBJc1dSZWFkeSgpIGFuZCBhY2EgKyBiY2EgKyBjY2EgKyBjY2EgKyBkY2EgPiBfY2EuaGVhbHRoIHRoZW4NCiAgICAgICAgS2lsbFRleHRbX2NhLm5ldHdvcmtJRF0gPSAiUSArIFIgKyBXID0ga2lsbCINCiAgICAgIGVsc2VpZiBRcmVhZHkgYW5kIElzV1JlYWR5KCkgYW5kIFJyZWFkeSBhbmQgSXJlYWR5IGFuZCBhY2EgKyBjY2EgKyBkY2EgKyBfZGEgKyBiZGEgPiBfY2EuaGVhbHRoIHRoZW4NCiAgICAgICAgS2lsbFRleHRbX2NhLm5ldHdvcmtJRF0gPSAiUSArIFcgKyBSICsgSWduaXRlID0ga2lsbCINCiAgICAgIGVsc2VpZiBRcmVhZHkgYW5kIElzV1JlYWR5KCkgYW5kIElyZWFkeSBhbmQgYWNhICsgYmNhICsgY2NhICsgY2NhICsgZGNhICsgYmRhID4gX2NhLmhlYWx0aCB0aGVuDQogICAgICAgIEtpbGxUZXh0W19jYS5uZXR3b3JrSURdID0gIlEgKyBSICsgVyArIElnbml0ZSA9IGtpbGwiDQogICAgICBlbHNlaWYgUXJlYWR5IGFuZCBScmVhZHkgYW5kIElzV1JlYWR5KCkgYW5kIEVyZWFkeSBhbmQgYWNhICsgYmNhICsgY2NhICsgY2NhICsgZGNhICsgYWRhID4gX2NhLmhlYWx0aCB0aGVuDQogICAgICAgIEtpbGxUZXh0W19jYS5uZXR3b3JrSURdID0gIlEgKyBSICsgVyArIEUgPSBraWxsIg0KICAgICAgZWxzZWlmIElzV1JlYWR5KCkgYW5kIFFyZWFkeSBhbmQgUnJlYWR5IGFuZCBFcmVhZHkgYW5kIGFjYSArIGNjYSArIGRjYSArIF9kYSArIGFkYSA+IF9jYS5oZWFsdGggdGhlbg0KICAgICAgICBLaWxsVGV4dFtfY2EubmV0d29ya0lEXSA9ICJRICsgVyArIFIgKyBFID0ga2lsbCINCiAgICAgIGVsc2VpZiBRcmVhZHkgYW5kIFJyZWFkeSBhbmQgRXJlYWR5IGFuZCBJc1dSZWFkeSgpIGFuZCBJcmVhZHkgYW5kIGFjYSArIGJjYSArIGNjYSArIGNjYSArIGRjYSArIGFkYSArIGJkYSA+IF9jYS5oZWFsdGggdGhlbg0KICAgICAgICBLaWxsVGV4dFtfY2EubmV0d29ya0lEXSA9ICJRICsgUiArIFcgKyBFICsgSWduaXRlID0ga2lsbCINCiAgICAgIGVsc2VpZiBRcmVhZHkgYW5kIFJyZWFkeSBhbmQgRXJlYWR5IGFuZCBJc1dSZWFkeSgpIGFuZCBJcmVhZHkgYW5kIGFjYSArIGNjYSArIGRjYSArIF9kYSArIGFkYSArIGJkYSA+IF9jYS5oZWFsdGggdGhlbg0KICAgICAgICBLaWxsVGV4dFtfY2EubmV0d29ya0lEXSA9ICJRICsgVyArIFIgKyBFICsgSWduaXRlID0ga2lsbCINCiAgICAgIGVsc2VpZiBRcmVhZHkgb3IgSXNXUmVhZHkoKSBvciBFcmVhZHkgdGhlbg0KICAgICAgICBLaWxsVGV4dFtfY2EubmV0d29ya0lEXSA9ICJIYXJhc3MgaGltISINCiAgICAgIGVsc2UNCiAgICAgICAgS2lsbFRleHRbX2NhLm5ldHdvcmtJRF0gPSAiU3BlbGxzIG9uIENEIg0KICAgICAgZW5kDQogICAgZW5kDQogIGVuZA0KZW5kDQpmdW5jdGlvbiBnZXRIaXRCb3hSYWRpdXMoZGJhKQ0KICByZXR1cm4gR2V0RGlzdGFuY2UoZGJhLm1pbkJCb3gsIGRiYS5tYXhCQm94KSAvIDINCmVuZA0KZnVuY3Rpb24gQ2FuUGVybWZvcm1LaWxsU3RlYWwoKQ0KICByZXR1cm4gTWVudS5raWxsc3RlYWwua2lsbHN0ZWFsIGFuZCAoTWVudS5raWxsc3RlYWwua2lsbFN0ZWFsRXhjZWN1dGUgPT0gMSBvciBNZW51LmtpbGxzdGVhbC5raWxsU3RlYWxFeGNlY3V0ZSA9PSAyIGFuZCBub3QgTWVudS5rZXlzZXR0aW5ncy51c2VDb21ibykgb3IgTWVudS5raWxsc3RlYWwua2lsbFN0ZWFsRXhjZWN1dGUgPT0gMyBhbmQgbm90IE1lbnUua2V5c2V0dGluZ3MudXNlQ29tYm8gYW5kIG5vdCBNZW51LmtleXNldHRpbmdzLnVzZUxhbmVDbGVhciBhbmQgbm90IE1lbnUua2V5c2V0dGluZ3MudXNlRmFybSBhbmQgbm90IE1lbnUua2V5c2V0dGluZ3MudXNlSGFyYXNzDQplbmQNCmZ1bmN0aW9uIERyYXdNZW51KCkNCiAgTWVudSA9IHNjcmlwdENvbmZpZygiVG90YWxseSBMZUJsYW5jIC0gVG90YWxseSBMZWdpdCIsICJUb3RhbGx5TGVCbGFuYy5jZmciKQ0KICBsb2NhbCBkYmEgPSAiVG90YWxseSBMZUJsYW5jICAtICAiDQogIE1lbnU6YWRkU3ViTWVudShkYmEgLi4gIktleSBTZXR0aW5ncyIsICJrZXlzZXR0aW5ncyIpDQogIE1lbnUua2V5c2V0dGluZ3M6YWRkUGFyYW0oInVzZUNvbWJvIiwgIkNvbWJvIEtleSIsIFNDUklQVF9QQVJBTV9PTktFWURPV04sIGZhbHNlLCAzMikNCiAgTWVudS5rZXlzZXR0aW5nczphZGRQYXJhbSgidXNlSGFyYXNzIiwgIkhhcmFzcyBLZXkiLCBTQ1JJUFRfUEFSQU1fT05LRVlET1dOLCBmYWxzZSwgc3RyaW5nLmJ5dGUoIlQiKSkNCiAgTWVudS5rZXlzZXR0aW5nczphZGRQYXJhbSgidXNlTGFuZUNsZWFyIiwgIkxhbmVDbGVhciBLZXkiLCBTQ1JJUFRfUEFSQU1fT05LRVlET1dOLCBmYWxzZSwgc3RyaW5nLmJ5dGUoIksiKSkNCiAgTWVudS5rZXlzZXR0aW5nczphZGRQYXJhbSgidXNlRmFybSIsICJGYXJtIEtleSIsIFNDUklQVF9QQVJBTV9PTktFWVRPR0dMRSwgZmFsc2UsIHN0cmluZy5ieXRlKCJMIikpDQogIE1lbnU6YWRkU3ViTWVudShkYmEgLi4gIkNvbWJvIiwgImNvbWJvIikNCiAgTWVudS5jb21ibzphZGRQYXJhbSgiY29tYm9XYXkiLCAiUGVyZm9ybSBDb21ibzoiLCBTQ1JJUFRfUEFSQU1fTElTVCwgMSwgew0KICAgICJTbWFydCIsDQogICAgIlFSV0UiLA0KICAgICJRV1JFIiwNCiAgICAiV1FSRSIsDQogICAgIldSUUUiDQogIH0pDQogIE1lbnUuY29tYm86YWRkUGFyYW0oImNvbWJvSXRlbXMiLCAiVXNlIEl0ZW1zIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KICBNZW51LmNvbWJvOmFkZFBhcmFtKCJjb21ib0FBIiwgIlVzZSBBQXMiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogIE1lbnUuY29tYm86YWRkUGFyYW0oImNvbWJvR2FwIiwgIlVzZSBXIHRvIEdhcENsb3NlIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KICBNZW51LmNvbWJvOmFkZFBhcmFtKCJzZWxlY3RlZFRhcmdldCIsICJGb2N1cyBTZWxlY3RlZCBUYXJnZXQiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogIE1lbnUuY29tYm86YWRkUGFyYW0oImZvcmNlQURDIiwgIkZvcmNlIEFEQy9BUEMiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIGZhbHNlKQ0KICBNZW51OmFkZFN1Yk1lbnUoZGJhIC4uICJTZXR0aW5nczogVyIsICJzZXR0aW5nc1ciKQ0KICBNZW51LnNldHRpbmdzVzphZGRQYXJhbSgidXNlT3B0aW9uYWwiLCAiVXNlIE9wdGlvbmFsIFcgU2V0dGluZ3MiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogIE1lbnUuc2V0dGluZ3NXOmFkZFBhcmFtKCJ1c2VPcHRpb25hbFciLCAiUmV0dXJuOiAiLCBTQ1JJUFRfUEFSQU1fTElTVCwgMSwgew0KICAgICJTbWFydCIsDQogICAgIlRhcmdldCBkZWFkIiwNCiAgICAiU2tpbGxzIHVzZWQiLA0KICAgICJCb3RoIg0KICB9KQ0KICBNZW51OmFkZFN1Yk1lbnUoZGJhIC4uICJIYXJhc3MiLCAiaGFyYXNzIikNCiAgTWVudS5oYXJhc3M6YWRkUGFyYW0oImhhcmFzc1EiLCAiVXNlICIgLi4gU3BlbGxzLlEubmFtZSAuLiAiIChRKSIsIFNDUklQVF9QQVJBTV9PTk9GRiwgdHJ1ZSkNCiAgTWVudS5oYXJhc3M6YWRkUGFyYW0oImhhcmFzc1ciLCAiVXNlICIgLi4gU3BlbGxzLlcubmFtZSAuLiAiIChXKSIsIFNDUklQVF9QQVJBTV9PTk9GRiwgZmFsc2UpDQogIE1lbnUuaGFyYXNzOmFkZFBhcmFtKCJoYXJhc3NFIiwgIlVzZSAiIC4uIFNwZWxscy5FLm5hbWUgLi4gIiAoRSkiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIGZhbHNlKQ0KICBNZW51LmhhcmFzczphZGRQYXJhbSgiaGFyYXNzTWFuYSIsICJNYW5hIE1hbmFnZXIgJSIsIFNDUklQVF9QQVJBTV9TTElDRSwgMC4yNSwgMCwgMSwgMikNCiAgTWVudTphZGRTdWJNZW51KGRiYSAuLiAiRmFybWluZyIsICJmYXJtIikNCiAgTWVudS5mYXJtOmFkZFBhcmFtKCJmYXJtUSIsICJVc2UgIiAuLiBTcGVsbHMuUS5uYW1lIC4uICIgKFEpIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KICBNZW51LmZhcm06YWRkUGFyYW0oImZhcm1XIiwgIlVzZSAiIC4uIFNwZWxscy5XLm5hbWUgLi4gIiAoVykiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogIE1lbnUuZmFybTphZGRQYXJhbSgiZmFybVJhbmdlIiwgIk1pbmlvbnMgb3V0c2lkZSBBQSByYW5nZSBvbmx5IiwgU0NSSVBUX1BBUkFNX09OT0ZGLCBmYWxzZSkNCiAgTWVudS5mYXJtOmFkZFBhcmFtKCJmYXJtQUEiLCAiRmFybSBpZiBBQSBpcyBvbiBDRCIsIFNDUklQVF9QQVJBTV9PTk9GRiwgZmFsc2UpDQogIE1lbnU6YWRkU3ViTWVudShkYmEgLi4gIkxhbmVjbGVhciIsICJsYW5lY2xlYXIiKQ0KICBNZW51LmxhbmVjbGVhcjphZGRQYXJhbSgibGFuZWNsZWFyUSIsICJVc2UgIiAuLiBTcGVsbHMuUS5uYW1lIC4uICIgKFEpIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KICBNZW51LmxhbmVjbGVhcjphZGRQYXJhbSgibGFuZWNsZWFyVyIsICJVc2UgIiAuLiBTcGVsbHMuVy5uYW1lIC4uICIgKFcpIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KICBNZW51LmxhbmVjbGVhcjphZGRQYXJhbSgibGFuZWNsZWFyUiIsICJVc2UgIiAuLiBTcGVsbHMuUi5uYW1lIC4uICIgKFIpIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCBmYWxzZSkNCiAgTWVudS5sYW5lY2xlYXI6YWRkUGFyYW0oImxhbmVjbGVhcldBbW91bnQiLCAiTWluIG1pbmlvbnMgdG8gV1IiLCBTQ1JJUFRfUEFSQU1fU0xJQ0UsIDUsIDAsIDMwLCAwKQ0KICBNZW51LmxhbmVjbGVhcjphZGRQYXJhbSgibGFuZWNsZWFyUkFtb3VudCIsICJNaW4gbWluaW9ucyB0byBXUiIsIFNDUklQVF9QQVJBTV9TTElDRSwgNSwgMCwgMzAsIDApDQogIE1lbnUubGFuZWNsZWFyOmFkZFBhcmFtKCJsYW5lY2xlYXJXUkFtb3VudCIsICJNaW4gbWluaW9ucyB0byBXIGFuZCBXUiIsIFNDUklQVF9QQVJBTV9TTElDRSwgNSwgMCwgMzAsIDApDQogIE1lbnU6YWRkU3ViTWVudShkYmEgLi4gIktpbGxTdGVhbCIsICJraWxsc3RlYWwiKQ0KICBNZW51LmtpbGxzdGVhbDphZGRQYXJhbSgia2lsbHN0ZWFsIiwgIlVzZSBLaWxsU3RlYWwiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogIE1lbnUua2lsbHN0ZWFsOmFkZFBhcmFtKCJraWxsU3RlYWxFeGNlY3V0ZSIsICJFeGNlY3V0ZSIsIFNDUklQVF9QQVJBTV9MSVNULCAxLCB7DQogICAgIkFsd2F5cyIsDQogICAgIk5vdCBpbiBDb21ibyIsDQogICAgIk5vIG90aGVyIG1vZGUgYWN0aXZlIg0KICB9KQ0KICBNZW51LmtpbGxzdGVhbDphZGRQYXJhbSgia2lsbHN0ZWFsR2FwIiwgIkdhcENsb3NlIHRvIGtpbGwgZW5lbXkiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIGZhbHNlKQ0KICBNZW51LmtpbGxzdGVhbDphZGRQYXJhbSgia2lsbHN0ZWFsUSIsICJVc2UgIiAuLiBTcGVsbHMuUS5uYW1lIC4uICIgKFEpIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KICBNZW51LmtpbGxzdGVhbDphZGRQYXJhbSgia2lsbHN0ZWFsVyIsICJVc2UgIiAuLiBTcGVsbHMuVy5uYW1lIC4uICIgKFcpIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KICBNZW51LmtpbGxzdGVhbDphZGRQYXJhbSgia2lsbHN0ZWFsUiIsICJVc2UgIiAuLiBTcGVsbHMuUi5uYW1lIC4uICIgKFIpIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCBmYWxzZSkNCiAgTWVudS5raWxsc3RlYWw6YWRkUGFyYW0oImtpbGxzdGVhbFFSIiwgIkdhcGNsb3NlID4gUSArIFIiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogIE1lbnUua2lsbHN0ZWFsOmFkZFN1Yk1lbnUoIktpbGxTdGVhbCBFbmVteSIsICJlbmVtaWVzIikNCiAgZm9yIF9jYSwgYWNhIGluIHBhaXJzKEdldEVuZW15SGVyb2VzKCkpIGRvDQogICAgaWYgYWNhIGFuZCB0YWJsZS5jb250YWlucyhwcmlvcml0eVRhYmxlLlN1cHBvcnQsIGFjYS5jaGFyTmFtZSkgb3IgdGFibGUuY29udGFpbnMocHJpb3JpdHlUYWJsZS5BRF9DYXJyeSwgYWNhLmNoYXJOYW1lKSBvciB0YWJsZS5jb250YWlucyhwcmlvcml0eVRhYmxlLkFQLCBhY2EuY2hhck5hbWUpIHRoZW4NCiAgICAgIE1lbnUua2lsbHN0ZWFsLmVuZW1pZXM6YWRkUGFyYW0oYWNhLmNoYXJOYW1lLCBhY2EuY2hhck5hbWUsIFNDUklQVF9QQVJBTV9PTk9GRiwgdHJ1ZSkNCiAgICBlbHNlDQogICAgICBNZW51LmtpbGxzdGVhbC5lbmVtaWVzOmFkZFBhcmFtKGFjYS5jaGFyTmFtZSwgYWNhLmNoYXJOYW1lLCBTQ1JJUFRfUEFSQU1fT05PRkYsIGZhbHNlKQ0KICAgIGVuZA0KICBlbmQNCiAgTWVudTphZGRTdWJNZW51KGRiYSAuLiAiWU9MTyIsICJ5b2xvIikNCiAgTWVudS55b2xvOmFkZFBhcmFtKCJ1c2VZb2xvIiwgIlVzZSBZb2xvIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KICBNZW51LnlvbG86YWRkUGFyYW0oImluZm81MiIsICJJbmZvIiwgU0NSSVBUX1BBUkFNX0lORk8sICJBbGwtaW4gd2hlbiBpZ25pdGVkIikNCiAgTWVudS55b2xvOmFkZFBhcmFtKCJpbmZvNTMiLCAiSW5mbzoiLCBTQ1JJUFRfUEFSQU1fSU5GTywgImFuZCB3aWxsIGtpbGwgbWUiKQ0KICBNZW51OmFkZFN1Yk1lbnUoZGJhIC4uICJEcmF3aW5ncyIsICJkcmF3aW5ncyIpDQogIE1lbnUuZHJhd2luZ3M6YWRkU3ViTWVudSgiTGFnLUZyZWUgQ2lyY2xlcyIsICJsZmMiKQ0KICBNZW51LmRyYXdpbmdzLmxmYzphZGRQYXJhbSgidXNlTEZDIiwgIlVzZSBMYWctRnJlZSBDaXJjbGVzIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCBmYWxzZSkNCiAgTWVudS5kcmF3aW5ncy5sZmM6YWRkUGFyYW0oIkNMIiwgIkxlbmd0aCBiZWZvcmUgU25hcHBpbmciLCBTQ1JJUFRfUEFSQU1fU0xJQ0UsIDMwMCwgNzUsIDIwMDAsIDApDQogIE1lbnUuZHJhd2luZ3M6YWRkUGFyYW0oImRyYXciLCAiVXNlIERyYXdpbmdzIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KICBNZW51LmRyYXdpbmdzOmFkZFBhcmFtKCJkcmF3USIsICJEcmF3ICIgLi4gU3BlbGxzLlEubmFtZSAuLiAiIChRKSIsIFNDUklQVF9QQVJBTV9PTk9GRiwgdHJ1ZSkNCiAgTWVudS5kcmF3aW5nczphZGRQYXJhbSgiZHJhd1ciLCAiRHJhdyAiIC4uIFNwZWxscy5XLm5hbWUgLi4gIiAoVykiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogIE1lbnUuZHJhd2luZ3M6YWRkUGFyYW0oImRyYXdFIiwgIkRyYXcgIiAuLiBTcGVsbHMuRS5uYW1lIC4uICIgKEUpIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KICBNZW51LmRyYXdpbmdzOmFkZFBhcmFtKCJkcmF3S2lsbGFibGUiLCAiRHJhdyBLaWxsYWJsZSBUZXh0IiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KICBNZW51LmRyYXdpbmdzOmFkZFBhcmFtKCJkcmF3S2lsbGFibGVXaWR0aCIsICJEcmF3IEtpbGxhYmxlIFdpZHRoIiwgU0NSSVBUX1BBUkFNX1NMSUNFLCAxMCwgNSwgMjAsIDApDQogIE1lbnUuZHJhd2luZ3M6YWRkUGFyYW0oImRyYXdUYXJnZXQiLCAiRHJhdyBUYXJnZXQiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogIE1lbnUuZHJhd2luZ3M6YWRkUGFyYW0oImRyYXdTcGVsbFJlYWR5IiwgIkRvbid0IGRyYXcgaWYgc3BlbGwgaXMgQ0QiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIGZhbHNlKQ0KICBNZW51OmFkZFN1Yk1lbnUoZGJhIC4uICJQcmVkaWN0aW9uIiwgInByZWRpY3Rpb24iKQ0KICBpZiBjYWEgYW5kIGRhYSBhbmQgYmJhIHRoZW4NCiAgICBNZW51LnByZWRpY3Rpb246YWRkUGFyYW0oInVzZVByZWRpY3Rpb24iLCAiUHJlZGljdGlvbiBUeXBlOiIsIFNDUklQVF9QQVJBTV9MSVNULCAyLCB7DQogICAgICAiVlByZWRpY3Rpb24iLA0KICAgICAgIkRpdmluZVByZWRpY3Rpb24iLA0KICAgICAgIkhQcmVkaWN0aW9uIg0KICAgIH0pDQogICAgTWVudS5wcmVkaWN0aW9uOmFkZFBhcmFtKCJ1c2VQcmVkaWN0aW9uVlByZWQiLCAiVlByZWRpY3Rpb24gSGl0Q2hhbmNlIiwgU0NSSVBUX1BBUkFNX1NMSUNFLCAyLCAxLCA2LCAwKQ0KICAgIE1lbnUucHJlZGljdGlvbjphZGRQYXJhbSgidXNlUHJlZGljdGlvbkhQcmVkIiwgIkhQcmVkaWN0aW9uIEhpdENoYW5jZSIsIFNDUklQVF9QQVJBTV9TTElDRSwgMSwgMSwgMywgMikNCiAgICBNZW51LnByZWRpY3Rpb246YWRkUGFyYW0oInVzZVByZWRpY3Rpb25EUHJlZCIsICJEaXZpbmVQcmVkIEhpdENoYW5jZSIsIFNDUklQVF9QQVJBTV9TTElDRSwgNTAsIDAsIDEwMCwgMCkNCiAgZWxzZWlmIGNhYSBhbmQgbm90IGRhYSBhbmQgYmJhIHRoZW4NCiAgICBNZW51LnByZWRpY3Rpb246YWRkUGFyYW0oInVzZVByZWRpY3Rpb24iLCAiUHJlZGljdGlvbiBUeXBlOiIsIFNDUklQVF9QQVJBTV9MSVNULCAyLCB7DQogICAgICAiVlByZWRpY3Rpb24iLA0KICAgICAgIkRpdmluZVByZWRpY3Rpb24iDQogICAgfSkNCiAgICBNZW51LnByZWRpY3Rpb246YWRkUGFyYW0oInVzZVByZWRpY3Rpb25WUHJlZCIsICJWUHJlZGljdGlvbiBIaXRDaGFuY2UiLCBTQ1JJUFRfUEFSQU1fU0xJQ0UsIDIsIDEsIDYsIDApDQogICAgTWVudS5wcmVkaWN0aW9uOmFkZFBhcmFtKCJ1c2VQcmVkaWN0aW9uRFByZWQiLCAiRGl2aW5lUHJlZCBIaXRDaGFuY2UiLCBTQ1JJUFRfUEFSQU1fU0xJQ0UsIDUwLCAwLCAxMDAsIDApDQogIGVsc2VpZiBkYWEgYW5kIG5vdCBjYWEgYW5kIGJiYSB0aGVuDQogICAgTWVudS5wcmVkaWN0aW9uOmFkZFBhcmFtKCJ1c2VQcmVkaWN0aW9uIiwgIlByZWRpY3Rpb24gVHlwZToiLCBTQ1JJUFRfUEFSQU1fTElTVCwgMiwgew0KICAgICAgIlZQcmVkaWN0aW9uIiwNCiAgICAgICJIUHJlZGljdGlvbiINCiAgICB9KQ0KICAgIE1lbnUucHJlZGljdGlvbjphZGRQYXJhbSgidXNlUHJlZGljdGlvblZQcmVkIiwgIlZQcmVkaWN0aW9uIEhpdENoYW5jZSIsIFNDUklQVF9QQVJBTV9TTElDRSwgMiwgMSwgNiwgMCkNCiAgICBNZW51LnByZWRpY3Rpb246YWRkUGFyYW0oInVzZVByZWRpY3Rpb25IUHJlZCIsICJIUHJlZGljdGlvbiBIaXRDaGFuY2UiLCBTQ1JJUFRfUEFSQU1fU0xJQ0UsIDEsIDEsIDMsIDIpDQogIGVsc2VpZiBkYWEgYW5kIGNhYSBhbmQgbm90IGJiYSB0aGVuDQogICAgTWVudS5wcmVkaWN0aW9uOmFkZFBhcmFtKCJ1c2VQcmVkaWN0aW9uIiwgIlByZWRpY3Rpb24gVHlwZToiLCBTQ1JJUFRfUEFSQU1fTElTVCwgMiwgew0KICAgICAgIkRpdmluZVByZWRpY3Rpb24iLA0KICAgICAgIkhQcmVkaWN0aW9uIg0KICAgIH0pDQogICAgTWVudS5wcmVkaWN0aW9uOmFkZFBhcmFtKCJ1c2VQcmVkaWN0aW9uRFByZWQiLCAiRGl2aW5lUHJlZCBIaXRDaGFuY2UiLCBTQ1JJUFRfUEFSQU1fU0xJQ0UsIDUwLCAwLCAxMDAsIDApDQogICAgTWVudS5wcmVkaWN0aW9uOmFkZFBhcmFtKCJ1c2VQcmVkaWN0aW9uSFByZWQiLCAiSFByZWRpY3Rpb24gSGl0Q2hhbmNlIiwgU0NSSVBUX1BBUkFNX1NMSUNFLCAxLCAxLCAzLCAyKQ0KICBlbHNlaWYgYmJhIGFuZCBub3QgY2FhIGFuZCBub3QgZGFhIHRoZW4NCiAgICBNZW51LnByZWRpY3Rpb246YWRkUGFyYW0oInVzZVByZWRpY3Rpb24iLCAiUHJlZGljdGlvbiBUeXBlOiIsIFNDUklQVF9QQVJBTV9MSVNULCAxLCB7DQogICAgICAiVlByZWRpY3Rpb24iDQogICAgfSkNCiAgICBNZW51LnByZWRpY3Rpb246YWRkUGFyYW0oInVzZVByZWRpY3Rpb25WUHJlZCIsICJWUHJlZGljdGlvbiBIaXRDaGFuY2UiLCBTQ1JJUFRfUEFSQU1fU0xJQ0UsIDIsIDEsIDYsIDApDQogIGVsc2VpZiBub3QgYmJhIGFuZCBjYWEgYW5kIG5vdCBkYWEgdGhlbg0KICAgIE1lbnUucHJlZGljdGlvbjphZGRQYXJhbSgidXNlUHJlZGljdGlvbiIsICJQcmVkaWN0aW9uIFR5cGU6IiwgU0NSSVBUX1BBUkFNX0xJU1QsIDEsIHsNCiAgICAgICJEaXZpbmVQcmVkaWN0aW9uIg0KICAgIH0pDQogICAgTWVudS5wcmVkaWN0aW9uOmFkZFBhcmFtKCJ1c2VQcmVkaWN0aW9uRFByZWQiLCAiRGl2aW5lUHJlZCBIaXRDaGFuY2UiLCBTQ1JJUFRfUEFSQU1fU0xJQ0UsIDUwLCAwLCAxMDAsIDApDQogIGVsc2VpZiBub3QgYmJhIGFuZCBub3QgY2FhIGFuZCBkYWEgdGhlbg0KICAgIE1lbnUucHJlZGljdGlvbjphZGRQYXJhbSgidXNlUHJlZGljdGlvbiIsICJQcmVkaWN0aW9uIFR5cGU6IiwgU0NSSVBUX1BBUkFNX0xJU1QsIDEsIHsNCiAgICAgICJIUHJlZGljdGlvbiINCiAgICB9KQ0KICAgIE1lbnUucHJlZGljdGlvbjphZGRQYXJhbSgidXNlUHJlZGljdGlvbkhQcmVkIiwgIkhQcmVkaWN0aW9uIEhpdENoYW5jZSIsIFNDUklQVF9QQVJBTV9TTElDRSwgMSwgMSwgMywgMikNCiAgZWxzZWlmIG5vdCBiYmEgYW5kIG5vdCBjYWEgYW5kIG5vdCBkYWEgdGhlbg0KICAgIE1lbnUucHJlZGljdGlvbjphZGRQYXJhbSgidXNlUHJlZGljdGlvbiIsICJQcmVkaWN0aW9uIFR5cGUiLCBTQ1JJUFRfUEFSQU1fTElTVCwgMSwgew0KICAgICAgIk5vIFByZWRpY3Rpb25zIGZvdW5kIg0KICAgIH0pDQogIGVuZA0KICBNZW51OmFkZFN1Yk1lbnUoZGJhIC4uICJNaXNjIiwgIm1pc2MiKQ0KICBNZW51Lm1pc2M6YWRkU3ViTWVudSgiQXV0byBMZXZlbCIsICJhdXRvbGV2ZWwiKQ0KICBNZW51Lm1pc2MuYXV0b2xldmVsOmFkZFBhcmFtKCJ1c2VBdXRvTGV2ZWwiLCAiVXNlIEF1dG8gTGV2ZWwiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIGZhbHNlKQ0KICBNZW51Lm1pc2MuYXV0b2xldmVsOmFkZFBhcmFtKCJzZXF1ZW5jZSIsICJXaGF0IHRvIG1heD8iLCBTQ1JJUFRfUEFSQU1fTElTVCwgMSwgeyJRLVctUi1FIiwgIlctUS1SLUUifSkNCiAgaWYgaWduaXRlIH49IG5pbCB0aGVuDQogICAgTWVudS5taXNjOmFkZFN1Yk1lbnUoIkF1dG8gSWduaXRlIiwgImF1dG9pZ25pdGUiKQ0KICAgIE1lbnUubWlzYy5hdXRvaWduaXRlOmFkZFBhcmFtKCJ1c2VJZ25pdGUiLCAiVXNlIFN1bW1vbmVyIElnbml0ZSIsIFNDUklQVF9QQVJBTV9PTk9GRiwgdHJ1ZSkNCiAgICBmb3IgX2NhLCBhY2EgaW4gaXBhaXJzKEdldEVuZW15SGVyb2VzKCkpIGRvDQogICAgICBNZW51Lm1pc2MuYXV0b2lnbml0ZTphZGRQYXJhbShhY2EuY2hhck5hbWUsICJVc2UgSWduaXRlIE9uICIgLi4gYWNhLmNoYXJOYW1lLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQogICAgZW5kDQogIGVuZA0KICBNZW51Lm1pc2M6YWRkU3ViTWVudSgiWmh5b25hcyIsICJ6aG9ueWFzIikNCiAgTWVudS5taXNjLnpob255YXM6YWRkUGFyYW0oInpob255YXMiLCAiQXV0byBaaG9ueWFzIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KICBNZW51Lm1pc2MuemhvbnlhczphZGRQYXJhbSgiemhvbnlhc3VuZGVyIiwgIlVzZSBaaG9ueWFzIHVuZGVyICUgaGVhbHRoIiwgU0NSSVBUX1BBUkFNX1NMSUNFLCAwLjIsIDAsIDEsIDIpDQogIE1lbnUubWlzYzphZGRTdWJNZW51KCJBdXRvIElnbml0ZSBQb3Rpb24iLCAiY291bnRlckxvZ2ljIikNCiAgTWVudS5taXNjLmNvdW50ZXJMb2dpYzphZGRQYXJhbSgidXNlUG90aW9uIiwgIkRyaW5rIEhlYWx0aCBQb3Qgd2hlbiBJZ25pdGVkIiwgU0NSSVBUX1BBUkFNX09OT0ZGLCB0cnVlKQ0KICBNZW51OmFkZFN1Yk1lbnUoZGJhIC4uICJPcmJXYWxrZXIiLCAib3Jid2Fsa2VyIikNCiAgTWVudTphZGRTdWJNZW51KGRiYSAuLiAiVGFyZ2V0U2VsZWN0b3IgTW9kZXMiLCAidHNtb2RlcyIpDQogIE1lbnUudHNtb2RlczphZGRUUyh0cykNCiAgTWVudS50c21vZGVzOmFkZFRTKHRzTG9uZykNCiAgTWVudTphZGRQYXJhbSgiaW5mbzIiLCAiQXV0aG9yIiwgU0NSSVBUX1BBUkFNX0lORk8sIF9HLkxlQmxhbmNfQXV0aG9yKQ0KICBNZW51OmFkZFBhcmFtKCJpbmZvIiwgIlZlcnNpb24iLCBTQ1JJUFRfUEFSQU1fSU5GTywgX0cuTGVCbGFuY19TY3JpcHRWZXJzaW9uKQ0KICBNZW51LmtleXNldHRpbmdzOnBlcm1hU2hvdygidXNlQ29tYm8iKQ0KICBNZW51LmtleXNldHRpbmdzOnBlcm1hU2hvdygidXNlSGFyYXNzIikNCiAgTWVudS5rZXlzZXR0aW5nczpwZXJtYVNob3coInVzZUxhbmVDbGVhciIpDQogIE1lbnUua2V5c2V0dGluZ3M6cGVybWFTaG93KCJ1c2VGYXJtIikNCiAgTWVudS5raWxsc3RlYWw6cGVybWFTaG93KCJraWxsc3RlYWwiKQ0KICBNZW51LmRyYXdpbmdzOnBlcm1hU2hvdygiZHJhdyIpDQplbmQNCmZ1bmN0aW9uIFN1bW1vbmVycygpDQogIGhlYWwgPSAobm90IG15SGVybzpHZXRTcGVsbERhdGEoU1VNTU9ORVJfMSkubmFtZTpmaW5kKCJzdW1tb25lcmhlYWwiKSBvciBub3QgU1VNTU9ORVJfMSkgYW5kIG15SGVybzpHZXRTcGVsbERhdGEoU1VNTU9ORVJfMikubmFtZTpmaW5kKCJzdW1tb25lcmhlYWwiKSBhbmQgU1VNTU9ORVJfMg0KICBpZ25pdGUgPSAobm90IG15SGVybzpHZXRTcGVsbERhdGEoU1VNTU9ORVJfMSkubmFtZTpmaW5kKCJzdW1tb25lcmRvdCIpIG9yIG5vdCBTVU1NT05FUl8xKSBhbmQgbXlIZXJvOkdldFNwZWxsRGF0YShTVU1NT05FUl8yKS5uYW1lOmZpbmQoInN1bW1vbmVyZG90IikgYW5kIFNVTU1PTkVSXzINCmVuZA0KZnVuY3Rpb24gQ2hlY2tzKCkNCiAgUXJlYWR5ID0gbXlIZXJvOkNhblVzZVNwZWxsKF9RKSA9PSBSRUFEWQ0KICBXcmVhZHkgPSBteUhlcm86Q2FuVXNlU3BlbGwoX1cpID09IFJFQURZDQogIEVyZWFkeSA9IG15SGVybzpDYW5Vc2VTcGVsbChfRSkgPT0gUkVBRFkNCiAgUnJlYWR5ID0gbXlIZXJvOkNhblVzZVNwZWxsKF9SKSA9PSBSRUFEWQ0KICBIcmVhZHkgPSBoZWFsIH49IG5pbCBhbmQgbXlIZXJvOkNhblVzZVNwZWxsKGhlYWwpID09IFJFQURZDQogIElyZWFkeSA9IGlnbml0ZSB+PSBuaWwgYW5kIG15SGVybzpDYW5Vc2VTcGVsbChpZ25pdGUpID09IFJFQURZDQogIGlmIE1lbnUuZHJhd2luZ3MubGZjLnVzZUxGQyB0aGVuDQogICAgX0cuRHJhd0NpcmNsZSA9IERyYXdDaXJjbGUyDQogIGVsc2UNCiAgICBfRy5EcmF3Q2lyY2xlID0gX0cub2xkRHJhd0NpcmNsZQ0KICBlbmQNCiAgaWYgbm90IFJyZWFkeSBhbmQgKGNhbkNhc3RTcGVsbHMgPT0gZmFsc2Ugb3IgUlNraWxsIH49IG5pbCkgdGhlbg0KICAgIGNhbkNhc3RTcGVsbHMgPSB0cnVlDQogICAgUlNraWxsID0gbmlsDQogIGVuZA0KICBlbmVteU1pbmlvbnM6dXBkYXRlKCkNCiAgdGFyZ2V0ID0gR2V0T3JiVGFyZ2V0KCkNCiAgQ2FsY0RhbWFnZSgpDQogIENoZWNrRm9yY2VkVGFyZ2V0KCkNCmVuZA0KZnVuY3Rpb24gUmV0dXJuQmVzdFRhcmdldFBvc2l0aW9uKGRiYSwgX2NhKQ0KICBsb2NhbCBhY2EsIGJjYSwgY2NhID0gMCwge30sIG5pbA0KICBsb2NhbCBkY2EgPSBfY2EgYW5kIF9jYSAqIF9jYSBvciBteUhlcm8ucmFuZ2UgKiBteUhlcm8ucmFuZ2UNCiAgZm9yIF9kYSwgYWRhIGluIGlwYWlycyhHZXRFbmVteUhlcm9lcygpKSBkbw0KICAgIGlmIGRjYSA+PSBHZXREaXN0YW5jZVNxcihhZGEsIG15SGVybykgdGhlbg0KICAgICAgYmNhID0ge30NCiAgICAgIHRhYmxlLmluc2VydChiY2EsIGFkYS5jaGFyTmFtZSkNCiAgICAgIGFjYSA9IDANCiAgICAgIGZvciBiZGEsIGNkYSBpbiBpcGFpcnMoR2V0RW5lbXlIZXJvZXMoKSkgZG8NCiAgICAgICAgaWYgYWRhIH49IGNkYSBhbmQgR2V0RGlzdGFuY2UoY2RhLCBhZGEpIDwgU3BlbGxzLlcucmFkaXVzIHRoZW4NCiAgICAgICAgICBhY2EgPSBhY2EgKyAxDQogICAgICAgICAgdGFibGUuaW5zZXJ0KGJjYSwgY2RhLmNoYXJOYW1lKQ0KICAgICAgICBlbmQNCiAgICAgIGVuZA0KICAgICAgaWYgZGJhIDw9IGFjYSB0aGVuDQogICAgICAgIGNjYSA9IGFkYS5wb3MNCiAgICAgICAgYnJlYWsNCiAgICAgIGVuZA0KICAgIGVuZA0KICBlbmQNCiAgcmV0dXJuIGNjYSwgYmNhLCBhY2ENCmVuZA0KZnVuY3Rpb24gR2V0QmVzdEFPRVBvc2l0aW9uKGRiYSwgX2NhLCBhY2EsIGJjYSkNCiAgYXNzZXJ0KGRiYSBhbmQgdHlwZShkYmEpID09ICJ0YWJsZSIsICJUb3RhbGx5IExlQmxhbmM6IEludmFsaWQgT2JqZWN0cyBpbiBmdW5jdGlvbiBHZXRCZXN0QU9FUG9zaXRpb24iKQ0KICBsb2NhbCBjY2ENCiAgbG9jYWwgZGNhID0gMA0KICBsb2NhbCBfZGEgPSBiY2Egb3IgbXlIZXJvDQogIGxvY2FsIGFkYSA9IF9jYSBhbmQgX2NhICogX2NhIG9yIG15SGVybw0KICBmb3IgYmRhLCBjZGEgaW4gaXBhaXJzKGRiYSkgZG8NCiAgICBpZiBhZGEgPiBHZXREaXN0YW5jZVNxcihjZGEsIF9kYSkgdGhlbg0KICAgICAgbG9jYWwgZGRhID0gMA0KICAgICAgZm9yIF9fYiwgYV9iIGluIGlwYWlycyhkYmEpIGRvDQogICAgICAgIGlmIEdldERpc3RhbmNlU3FyKGFfYiwgY2RhKSA8PSBhY2EgKiBhY2EgdGhlbg0KICAgICAgICAgIGRkYSA9IGRkYSArIDENCiAgICAgICAgZW5kDQogICAgICBlbmQNCiAgICAgIGlmIGRjYSA8IGRkYSB0aGVuDQogICAgICAgIGRjYSA9IGRkYQ0KICAgICAgICBjY2EgPSBjZGEucG9zDQogICAgICBlbmQNCiAgICBlbmQNCiAgZW5kDQogIHJldHVybiBjY2EsIGRjYQ0KZW5kDQpmdW5jdGlvbiBHZXRLaWxsYWJsZU1pbmlvbnMoZGJhLCBfY2EsIGFjYSwgYmNhKQ0KICBhc3NlcnQoYWNhID09IF9RIG9yIGFjYSA9PSBfVyBvciBhY2EgPT0gX0UsICJUb3RhbGx5IExlQmxhbmM6IENvcnJlY3Qgc3BlbGwgbm90IGRldGVjdGVkIikNCiAgYXNzZXJ0KGRiYSBhbmQgdHlwZShkYmEpID09ICJ0YWJsZSIsICJUb3RhbGx5IExlQmxhbmM6IEludmFsaWQgdGFibGUgaW46IG1pbmlvblRhYmxlLCBmaXJzdCBwYXJhbWV0ZXIiKQ0KICBsb2NhbCBjY2EgPSBfY2EgYW5kIF9jYSAqIF9jYSBvciBteUhlcm8ucmFuZ2UgKiBteUhlcm8ucmFuZ2UNCiAgbG9jYWwgZGNhID0ge30NCiAgbG9jYWwgX2RhID0gYmNhIG9yIG15SGVybw0KICBsb2NhbCBhZGEgPSAwDQogIGZvciBiZGEsIGNkYSBpbiBpcGFpcnMoZGJhKSBkbw0KICAgIGlmIGNjYSA+IEdldERpc3RhbmNlU3FyKGNkYSkgdGhlbg0KICAgICAgaWYgYWNhID09IF9RIHRoZW4NCiAgICAgICAgYWRhID0gZ2V0RG1nKCJRIiwgY2RhLCBfZGEpDQogICAgICBlbmQNCiAgICAgIGlmIGFjYSA9PSBfVyB0aGVuDQogICAgICAgIGFkYSA9IGdldERtZygiVyIsIGNkYSwgX2RhKQ0KICAgICAgZW5kDQogICAgICBpZiBhY2EgPT0gX0UgdGhlbg0KICAgICAgICBhZGEgPSBnZXREbWcoIkUiLCBjZGEsIF9kYSkNCiAgICAgIGVuZA0KICAgICAgaWYgYWRhID4gY2RhLmhlYWx0aCB0aGVuDQogICAgICAgIHRhYmxlLmluc2VydChkY2EsIGNkYSkNCiAgICAgIGVuZA0KICAgIGVuZA0KICBlbmQNCiAgcmV0dXJuIGRjYQ0KZW5kDQpmdW5jdGlvbiBBbGx5SGVyb0luUmFuZ2UoZGJhLCBfY2EpDQogIF9jYSA9IF9jYSBvciBteUhlcm8NCiAgZGJhID0gZGJhIGFuZCBkYmEgKiBkYmEgb3IgbXlIZXJvLnJhbmdlICogbXlIZXJvLnJhbmdlDQogIGxvY2FsIGFjYSA9IDANCiAgZm9yIGkgPSAxLCBoZXJvTWFuYWdlci5pQ291bnQgZG8NCiAgICBsb2NhbCBiY2EgPSBoZXJvTWFuYWdlcjpnZXRIZXJvKGkpDQogICAgaWYgYmNhLnRlYW0gPT0gX2NhLnRlYW0gYW5kIGRiYSA+PSBHZXREaXN0YW5jZVNxcihfY2EsIGJjYSkgdGhlbg0KICAgICAgYWNhID0gYWNhICsgMQ0KICAgIGVuZA0KICBlbmQNCiAgcmV0dXJuIGFjYQ0KZW5kDQpmdW5jdGlvbiBHZXRXUHJlZGljdGlvbihkYmEpDQogIGxvY2FsIF9jYQ0KICBpZiBWUHJlZGljdGlvbkxvYWRlZCgpIHRoZW4NCiAgICBsb2NhbCBhY2EsIGJjYSwgY2NhID0gY2JhOklzRGFzaGluZyhkYmEsIFNwZWxscy5XLmRlbGF5LCBTcGVsbHMuVy5yYWRpdXMsIFNwZWxscy5XLnNwZWVkLCBteUhlcm8pDQogICAgaWYgYWNhIGFuZCBiY2EgdGhlbg0KICAgICAgX2NhID0gY2NhDQogICAgZWxzZQ0KICAgICAgX2NhID0gY2JhOkdldENpcmN1bGFyQ2FzdFBvc2l0aW9uKGRiYSwgU3BlbGxzLlcuZGVsYXksIFNwZWxscy5XLnJhZGl1cywgU3BlbGxzLlcucmFuZ2UsIFNwZWxscy5XLnNwZWVkKQ0KICAgIGVuZA0KICBlbHNlaWYgRGl2aW5lUHJlZExvYWRlZCgpIHRoZW4NCiAgICBsb2NhbCBhY2ENCiAgICBpZiBkaXZpbmVQcmVkaWN0aW9uVGFyZ2V0VGFibGVbZGJhLm5ldHdvcmtJRF0gfj0gbmlsIHRoZW4NCiAgICAgIGFjYSA9IGRpdmluZVByZWRpY3Rpb25UYXJnZXRUYWJsZVtkYmEubmV0d29ya0lEXQ0KICAgIGVuZA0KICAgIGlmIGFjYSB0aGVuDQogICAgICBsb2NhbCBiY2EsIGNjYSwgZGNhID0gRFA6cHJlZGljdChhY2EsIHdTUykNCiAgICAgIGlmIGJjYSBhbmQgYmNhID09IFNraWxsU2hvdC5TVEFUVVMuU1VDQ0VTU19ISVQgYW5kIGNjYSB+PSBuaWwgdGhlbg0KICAgICAgICBfY2EgPSBjY2ENCiAgICAgIGVuZA0KICAgIGVuZA0KICBlbHNlaWYgSFByZWRNZW51TG9hZGVkKCkgdGhlbg0KICAgIF9jYSA9IGFiYTpHZXRQcmVkaWN0KEhQX1csIGRiYSwgbXlIZXJvKQ0KICBlbmQNCiAgcmV0dXJuIF9jYQ0KZW5kDQpmdW5jdGlvbiBHZXRFUHJlZGljdGlvbihkYmEpDQogIGxvY2FsIF9jYQ0KICBpZiBWUHJlZGljdGlvbkxvYWRlZCgpIHRoZW4NCiAgICBsb2NhbCBhY2EsIGJjYSwgY2NhID0gY2JhOklzRGFzaGluZyhkYmEsIFNwZWxscy5FLmRlbGF5LCBTcGVsbHMuRS5yYWRpdXMsIFNwZWxscy5FLnNwZWVkLCBteUhlcm8pDQogICAgaWYgYWNhIGFuZCBiY2EgdGhlbg0KICAgICAgX2NhID0gY2NhDQogICAgZWxzZQ0KICAgICAgbG9jYWwgZGNhLCBfZGEgPSBjYmE6R2V0TGluZUNhc3RQb3NpdGlvbihkYmEsIFNwZWxscy5FLmRlbGF5LCBTcGVsbHMuRS5yYWRpdXMsIFNwZWxscy5FLnJhbmdlICsgMTUwLCBTcGVsbHMuRS5zcGVlZCwgbXlIZXJvLCB0cnVlKQ0KICAgICAgaWYgX2RhID49IE1lbnUucHJlZGljdGlvbi51c2VQcmVkaWN0aW9uVlByZWQgdGhlbg0KICAgICAgICBfY2EgPSBkY2ENCiAgICAgIGVuZA0KICAgIGVuZA0KICBlbHNlaWYgRGl2aW5lUHJlZExvYWRlZCgpIHRoZW4NCiAgICBsb2NhbCBhY2ENCiAgICBpZiBkaXZpbmVQcmVkaWN0aW9uVGFyZ2V0VGFibGVbZGJhLm5ldHdvcmtJRF0gfj0gbmlsIHRoZW4NCiAgICAgIGFjYSA9IGRpdmluZVByZWRpY3Rpb25UYXJnZXRUYWJsZVtkYmEubmV0d29ya0lEXQ0KICAgIGVuZA0KICAgIGlmIGFjYSB0aGVuDQogICAgICBsb2NhbCBiY2EsIGNjYSwgZGNhID0gRFA6cHJlZGljdChhY2EsIGVTUykNCiAgICAgIGlmIGJjYSBhbmQgYmNhID09IFNraWxsU2hvdC5TVEFUVVMuU1VDQ0VTU19ISVQgYW5kIGNjYSB+PSBuaWwgYW5kIGRjYSA+PSBNZW51LnByZWRpY3Rpb24udXNlUHJlZGljdGlvbkRQcmVkIHRoZW4NCiAgICAgICAgX2NhID0gY2NhDQogICAgICBlbmQNCiAgICBlbmQNCiAgZWxzZWlmIEhQcmVkTWVudUxvYWRlZCgpIHRoZW4NCiAgICBsb2NhbCBhY2EsIGJjYSA9IGFiYTpHZXRQcmVkaWN0KEhQX0UsIGRiYSwgbXlIZXJvKQ0KICAgIGlmIGFjYSBhbmQgYmNhID49IE1lbnUucHJlZGljdGlvbi51c2VQcmVkaWN0aW9uSFByZWQgdGhlbg0KICAgICAgX2NhID0gYWNhDQogICAgZW5kDQogIGVuZA0KICByZXR1cm4gX2NhDQplbmQNCmZ1bmN0aW9uIFZQcmVkaWN0aW9uTG9hZGVkKCkNCiAgcmV0dXJuIGJiYSBhbmQgTWVudS5wcmVkaWN0aW9uLnVzZVByZWRpY3Rpb24gPT0gMQ0KZW5kDQpmdW5jdGlvbiBEaXZpbmVQcmVkTG9hZGVkKCkNCiAgcmV0dXJuIGJiYSBhbmQgY2FhIGFuZCBNZW51LnByZWRpY3Rpb24udXNlUHJlZGljdGlvbiA9PSAyIG9yIG5vdCBiYmEgYW5kIG5vdCBkYWEgYW5kIGNhYSBhbmQgTWVudS5wcmVkaWN0aW9uLnVzZVByZWRpY3Rpb24gPT0gMQ0KZW5kDQpmdW5jdGlvbiBIUHJlZE1lbnVMb2FkZWQoKQ0KICByZXR1cm4gZGFhIGFuZCBjYWEgYW5kIGJiYSBhbmQgTWVudS5wcmVkaWN0aW9uLnVzZVByZWRpY3Rpb24gPT0gMyBvciBkYWEgYW5kIGNhYSBhbmQgbm90IGJiYSBhbmQgTWVudS5wcmVkaWN0aW9uLnVzZVByZWRpY3Rpb24gPT0gMSBvciBiYmEgYW5kIGRhYSBhbmQgbm90IGNhYSBhbmQgTWVudS5wcmVkaWN0aW9uLnVzZVByZWRpY3Rpb24gPT0gMg0KZW5kDQpmdW5jdGlvbiBDYXN0UShkYmEpDQogIGlmIGRiYSB+PSBuaWwgYW5kIG5vdCBkYmEuZGVhZCBhbmQgZGJhLnZpc2libGUgYW5kIEdldERpc3RhbmNlU3FyKGRiYSkgPD0gU3BlbGxzLlEucmFuZ2UgKiBTcGVsbHMuUS5yYW5nZSBhbmQgZGJhLnR5cGUgYW5kIChkYmEudHlwZSA9PSBteUhlcm8udHlwZSBvciBkYmEudHlwZSA9PSAib2JqX0FJX01pbmlvbiIpIGFuZCBRcmVhZHkgdGhlbg0KICAgIENhc3RTcGVsbChfUSwgZGJhKQ0KICAgIHJldHVybiB0cnVlDQogIGVuZA0KICByZXR1cm4gZmFsc2UNCmVuZA0KZnVuY3Rpb24gQ2FzdFcoZGJhLCBfY2EpDQogIGxvY2FsIGFjYSA9IFNwZWxscy5XLnJhbmdlICsgMTc1DQogIGxvY2FsIGJjYSA9IGFjYSAqIGFjYQ0KICBpZiBub3QgX2NhIHRoZW4NCiAgICBpZiBkYmEgYW5kIGJjYSA+PSBHZXREaXN0YW5jZVNxcihkYmEpIHRoZW4NCiAgICAgIGlmIGRiYS50eXBlIGFuZCBkYmEudHlwZSA9PSBteUhlcm8udHlwZSB0aGVuDQogICAgICAgIGlmIElzV1JlYWR5KCkgdGhlbg0KICAgICAgICAgIGlmIGxhc3RRQ2FzdC50YXJnZXQgYW5kIGxhc3RRQ2FzdC50YXJnZXQubmV0d29ya0lEID09IGRiYS5uZXR3b3JrSUQgdGhlbg0KICAgICAgICAgICAgbG9jYWwgX2RhID0gb3MuY2xvY2soKQ0KICAgICAgICAgICAgbG9jYWwgYWRhID0gU3BlbGxzLlcuc3BlZWQNCiAgICAgICAgICAgIGxvY2FsIGJkYSA9IFNwZWxscy5XLmRlbGF5DQogICAgICAgICAgICBsb2NhbCBjZGEgPSBHZXREaXN0YW5jZShkYmEpDQogICAgICAgICAgICBsb2NhbCBkZGEgPSBjZGEgLyBTcGVsbHMuVy5zcGVlZCArIGJkYQ0KICAgICAgICAgICAgbG9jYWwgX19iID0gX2RhICsgZGRhDQogICAgICAgICAgICBpZiBsYXN0UUNhc3QuZW5kVCBhbmQgX19iIDwgbGFzdFFDYXN0LmVuZFQgdGhlbg0KICAgICAgICAgICAgICByZXR1cm4gZmFsc2UNCiAgICAgICAgICAgIGVuZA0KICAgICAgICAgIGVuZA0KICAgICAgICAgIGxvY2FsIGNjYSwgZGNhID0gR2V0V1ByZWRpY3Rpb24oZGJhKQ0KICAgICAgICAgIGlmIGNjYSB+PSBuaWwgYW5kIChub3QgX0cuRXZhZGVlZV9Mb2FkZWQgb3Igbm90IF9HLkV2YWRlZWVfSXNEYW5nZXJvdXMoUG9pbnQoY2NhLngsIGNjYS56KSkgb3IgZ2V0RG1nKCJXIiwgZGJhLCBteUhlcm8pID49IGRiYS5oZWFsdGgpIHRoZW4NCiAgICAgICAgICAgIENhc3RTcGVsbChfVywgY2NhLngsIGNjYS56KQ0KICAgICAgICAgICAgcmV0dXJuIHRydWUNCiAgICAgICAgICBlbmQNCiAgICAgICAgZW5kDQogICAgICBlbHNlaWYgZGJhLnR5cGUgPT0gIm9ial9BSV9NaW5pb24iIHRoZW4NCiAgICAgICAgQ2FzdFNwZWxsKF9XLCBkYmEucG9zLngsIGRiYS5wb3MueikNCiAgICAgICAgcmV0dXJuIHRydWUNCiAgICAgIGVuZA0KICAgIGVuZA0KICBlbHNlaWYgSXNXUmVhZHkoKSBhbmQgKG5vdCBfRy5FdmFkZWVlX0xvYWRlZCBvciBub3QgX0cuRXZhZGVlZV9Jc0Rhbmdlcm91cyhQb2ludChkYmEsIF9jYSkpKSBhbmQgR2V0RGlzdGFuY2UoUG9pbnQoZGJhLCBfY2EpKSA8PSBTcGVsbHMuVy5yYW5nZSB0aGVuDQogICAgQ2FzdFNwZWxsKF9XLCBkYmEsIF9jYSkNCiAgICByZXR1cm4gdHJ1ZQ0KICBlbmQNCiAgcmV0dXJuIGZhbHNlDQplbmQNCmZ1bmN0aW9uIEdhcENsb3NlKGRiYSkNCiAgaWYgSXNXUmVhZHkoKSBhbmQgZGJhIGFuZCBkYmEudHlwZSBhbmQgZGJhLnR5cGUgPT0gbXlIZXJvLnR5cGUgYW5kIEhhc01hbmFUb0dhcENsb3NlKCkgdGhlbg0KICAgIGxvY2FsIF9jYSA9IFZlY3RvcihteUhlcm8pICsgKFZlY3RvcihkYmEpIC0gbXlIZXJvKTpub3JtYWxpemVkKCkgKiBTcGVsbHMuVy5yYW5nZQ0KICAgIGlmIG5vdCBVbmRlclR1cnJldChfY2EsIHRydWUpIGFuZCAobm90IF9HLkV2YWRlZWVfTG9hZGVkIG9yIG5vdCBfRy5FdmFkZWVlX0lzRGFuZ2Vyb3VzKFBvaW50KF9jYS54LCBfY2EueikpKSB0aGVuDQogICAgICBDYXN0U3BlbGwoX1csIF9jYS54LCBfY2EueikNCiAgICAgIHJldHVybiB0cnVlDQogICAgZW5kDQogIGVuZA0KICByZXR1cm4gZmFsc2UNCmVuZA0KZnVuY3Rpb24gSXNXUmVhZHkoKQ0KICByZXR1cm4gV3JlYWR5IGFuZCBub3Qgd1VzZWQoKQ0KZW5kDQpmdW5jdGlvbiBIYXNNYW5hVG9HYXBDbG9zZSgpDQogIGxvY2FsIGRiYSA9IG15SGVybzpHZXRTcGVsbERhdGEoX1EpLmxldmVsICogMTAgKyA0MA0KICBsb2NhbCBfY2EgPSBteUhlcm86R2V0U3BlbGxEYXRhKF9XKS5sZXZlbCAqIDUgKyA3NQ0KICBsb2NhbCBhY2EgPSA4MA0KICByZXR1cm4gUXJlYWR5IGFuZCBkYmEgKyBfY2EgPCBteUhlcm8ubWFuYSBvciBFcmVhZHkgYW5kIGFjYSArIF9jYSA8IG15SGVyby5tYW5hDQplbmQNCmZ1bmN0aW9uIENhc3RFKGRiYSkNCiAgaWYgZGJhIGFuZCBub3QgZGJhLmRlYWQgYW5kIEdldERpc3RhbmNlU3FyKGRiYSkgPD0gU3BlbGxzLkUucmFuZ2UgKiBTcGVsbHMuRS5yYW5nZSBhbmQgZGJhLnR5cGUgYW5kIChkYmEudHlwZSA9PSBteUhlcm8udHlwZSBvciBkYmEudHlwZSA9PSAib2JqX0FJX01pbmlvbiIpIGFuZCBFcmVhZHkgdGhlbg0KICAgIGxvY2FsIF9jYSA9IEdldEVQcmVkaWN0aW9uKGRiYSkNCiAgICBpZiBfY2Egfj0gbmlsIHRoZW4NCiAgICAgIENhc3RTcGVsbChfRSwgX2NhLngsIF9jYS56KQ0KICAgICAgcmV0dXJuIHRydWUNCiAgICBlbmQNCiAgZW5kDQogIHJldHVybiBmYWxzZQ0KZW5kDQpmdW5jdGlvbiB3VXNlZCgpDQogIHJldHVybiBteUhlcm86R2V0U3BlbGxEYXRhKF9XKS5uYW1lIGFuZCBteUhlcm86R2V0U3BlbGxEYXRhKF9XKS5uYW1lID09ICJsZWJsYW5jc2xpZGVyZXR1cm4iDQplbmQNCmZ1bmN0aW9uIHdyVXNlZCgpDQogIHJldHVybiBteUhlcm86R2V0U3BlbGxEYXRhKF9XKS5uYW1lIGFuZCBteUhlcm86R2V0U3BlbGxEYXRhKF9SKS5uYW1lID09ICJsZWJsYW5jc2xpZGVyZXR1cm5tIg0KZW5kDQpmdW5jdGlvbiBTcGVsbERtZ0NhbGN1bGF0aW9ucyhkYmEsIF9jYSkNCiAgbG9jYWwgYWNhID0gMA0KICBpZiBkYmEgPT0gIlEiIGFuZCBteUhlcm86R2V0U3BlbGxEYXRhKF9RKS5sZXZlbCA+PSAxIHRoZW4NCiAgICBhY2EgPSAyNSAqIG15SGVybzpHZXRTcGVsbERhdGEoX1EpLmxldmVsICsgMzAgKyAwLjQgKiBteUhlcm8uYXANCiAgZWxzZWlmIGRiYSA9PSAiVyIgYW5kIDEgPD0gbXlIZXJvOkdldFNwZWxsRGF0YShfVykubGV2ZWwgdGhlbg0KICAgIGFjYSA9IDQwICogbXlIZXJvOkdldFNwZWxsRGF0YShfVykubGV2ZWwgKyA0NSArIDAuNiAqIG15SGVyby5hcA0KICBlbHNlaWYgZGJhID09ICJFIiBhbmQgMSA8PSBteUhlcm86R2V0U3BlbGxEYXRhKF9FKS5sZXZlbCB0aGVuDQogICAgYWNhID0gMjUgKiBteUhlcm86R2V0U3BlbGxEYXRhKF9FKS5sZXZlbCArIDE1ICsgMC41ICogbXlIZXJvLmFwDQogIGVsc2VpZiBkYmEgPT0gIlJRIiBhbmQgMSA8PSBteUhlcm86R2V0U3BlbGxEYXRhKF9SKS5sZXZlbCB0aGVuDQogICAgYWNhID0gMTAwICogbXlIZXJvOkdldFNwZWxsRGF0YShfUikubGV2ZWwgKyAwLjY1ICogbXlIZXJvLmFwDQogIGVsc2VpZiBkYmEgPT0gIlJXIiBhbmQgMSA8PSBteUhlcm86R2V0U3BlbGxEYXRhKF9SKS5sZXZlbCB0aGVuDQogICAgYWNhID0gMTUwICogbXlIZXJvOkdldFNwZWxsRGF0YShfUikubGV2ZWwgKyAwLjk3NSAqIG15SGVyby5hcA0KICBlbHNlaWYgZGJhID09ICJSRSIgYW5kIDEgPD0gbXlIZXJvOkdldFNwZWxsRGF0YShfUikubGV2ZWwgdGhlbg0KICAgIGFjYSA9IDEwMCAqIG15SGVybzpHZXRTcGVsbERhdGEoX1cpLmxldmVsICsgMC42NSAqIG15SGVyby5hcA0KICBlbHNlaWYgZGJhID09ICJRUHJvYyIgdGhlbg0KICAgIGFjYSA9IDI1ICogbXlIZXJvOkdldFNwZWxsRGF0YShfUSkubGV2ZWwgKyAzMCArIDAuNCAqIG15SGVyby5hcA0KICBlbmQNCiAgYWNhID0gbXlIZXJvOkNhbGNNYWdpY0RhbWFnZShfY2EsIGFjYSkNCiAgcmV0dXJuIGFjYSBhbmQgYWNhIG9yIDANCmVuZA0KZnVuY3Rpb24gRHJhd0NpcmNsZU5leHRMdmwoZGJhLCBfY2EsIGFjYSwgYmNhLCBjY2EsIGRjYSwgX2RhKQ0KICBiY2EgPSBiY2Egb3IgMzAwDQogIHF1YWxpdHkgPSBtYXRoLm1heCg4LCByb3VuZCgxODAgLyBtYXRoLmRlZygobWF0aC5hc2luKF9kYSAvICgyICogYmNhKSkpKSkpDQogIHF1YWxpdHkgPSAyICogbWF0aC5waSAvIHF1YWxpdHkNCiAgYmNhID0gYmNhICogMC45Mg0KICBsb2NhbCBhZGEgPSB7fQ0KICBmb3IgdGhldGEgPSAwLCAyICogbWF0aC5waSArIHF1YWxpdHksIHF1YWxpdHkgZG8NCiAgICBsb2NhbCBiZGEgPSBXb3JsZFRvU2NyZWVuKEQzRFhWRUNUT1IzKGRiYSArIGJjYSAqIG1hdGguY29zKHRoZXRhKSwgX2NhLCBhY2EgLSBiY2EgKiBtYXRoLnNpbih0aGV0YSkpKQ0KICAgIGFkYVsjYWRhICsgMV0gPSBEM0RYVkVDVE9SMihiZGEueCwgYmRhLnkpDQogIGVuZA0KICBEcmF3TGluZXMyKGFkYSwgY2NhIG9yIDEsIDQyOTQ5NjcyOTUpDQplbmQNCmZ1bmN0aW9uIHJvdW5kKGRiYSkNCiAgaWYgZGJhID49IDAgdGhlbg0KICAgIHJldHVybiBtYXRoLmZsb29yKGRiYSArIDAuNSkNCiAgZWxzZQ0KICAgIHJldHVybiBtYXRoLmNlaWwoZGJhIC0gMC41KQ0KICBlbmQNCmVuZA0KZnVuY3Rpb24gRHJhd0NpcmNsZTIoZGJhLCBfY2EsIGFjYSwgYmNhLCBjY2EpDQogIGxvY2FsIGRjYSA9IFZlY3RvcihkYmEsIF9jYSwgYWNhKQ0KICBsb2NhbCBfZGEgPSBWZWN0b3IoY2FtZXJhUG9zLngsIGNhbWVyYVBvcy55LCBjYW1lcmFQb3MueikNCiAgbG9jYWwgYWRhID0gZGNhIC0gKGRjYSAtIF9kYSk6bm9ybWFsaXplZCgpICogYmNhDQogIGxvY2FsIGJkYSA9IFdvcmxkVG9TY3JlZW4oRDNEWFZFQ1RPUjMoYWRhLngsIGFkYS55LCBhZGEueikpDQogIGlmIE9uU2NyZWVuKHsNCiAgICB4ID0gYmRhLngsDQogICAgeSA9IGJkYS55DQogIH0sIHsNCiAgICB4ID0gYmRhLngsDQogICAgeSA9IGJkYS55DQogIH0pIHRoZW4NCiAgICBEcmF3Q2lyY2xlTmV4dEx2bChkYmEsIF9jYSwgYWNhLCBiY2EsIDEsIGNjYSwgTWVudS5kcmF3aW5ncy5sZmMuQ0wpDQogIGVuZA0KZW5kDQpmdW5jdGlvbiBPblduZE1zZyhkYmEsIF9jYSkNCiAgaWYgZGJhID09IFdNX0xCVVRUT05ET1dOIGFuZCBNZW51LmNvbWJvLnNlbGVjdGVkVGFyZ2V0IHRoZW4NCiAgICBsb2NhbCBhY2ENCiAgICBmb3IgYmNhLCBjY2EgaW4gcGFpcnMoR2V0RW5lbXlIZXJvZXMoKSkgZG8NCiAgICAgIGlmIGNjYSBhbmQgY2NhLnZpc2libGUgYW5kIG5vdCBjY2EuZGVhZCBhbmQgVmFsaWRUYXJnZXQoY2NhKSBhbmQgR2V0RGlzdGFuY2VTcXIoY2NhLCBtb3VzZVBvcykgPD0gNDAwMDAgdGhlbg0KICAgICAgICBhY2EgPSBjY2ENCiAgICAgIGVuZA0KICAgIGVuZA0KICAgIGlmIGFjYSBhbmQgR2V0RGlzdGFuY2VTcXIoYWNhLCBtb3VzZVBvcykgPCA0MDAwMCB0aGVuDQogICAgICBpZiBmb3JjZWRUYXJnZXQgYW5kIGFjYS5uZXR3b3JrSUQgPT0gZm9yY2VkVGFyZ2V0Lm5ldHdvcmtJRCB0aGVuDQogICAgICAgIGZvcmNlZFRhcmdldCA9IG5pbA0KICAgICAgICBTYXkoIkRlc2VsZWN0ZWQgdGFyZ2V0OiAiIC4uIGFjYS5jaGFyTmFtZSkNCiAgICAgIGVsc2UNCiAgICAgICAgZm9yY2VkVGFyZ2V0ID0gYWNhDQogICAgICAgIFNheSgiU2VsZWN0ZWQgdGFyZ2V0OiAiIC4uIGFjYS5jaGFyTmFtZSkNCiAgICAgICAgZm9yY2VkVGFyZ2V0VGltZSA9IG9zLmNsb2NrKCkNCiAgICAgIGVuZA0KICAgIGVuZA0KICBlbmQNCmVuZA0KYXNzZXJ0KGxvYWQoQmFzZTY0RGVjb2RlKCJHMHgxWVZJQUFRUUVCQWdBR1pNTkNob0tBQUFBQUFBQUFBQUFBUUlOQUFBQUJnQkFBRUZBQUFBZFFBQUJCa0JBQUdVQUFBQUtRQUNCQmtCQUFHVkFBQUFLUUlDQkJrQkFBQjJBZ0FBSUFBQ0NId0NBQUFVQUFBQUVCZ0FBQUdOc1lYTnpBQVFJQUFBQVZISmhZMnRsY2dBRUJ3QUFBRjlmYVc1cGRBQUVDZ0FBQUZWd1pHRjBaVmRsWWdBRUdnQUFBR052ZFc1MGFXNW5TRzkzVFhWamFGVnpaWEp6U1doaGRtVUFBZ0FBQUFFQUFBQURBQUFBQVFBRkNBQUFBRXdBUUFEREFJQUFBVUVBQUYxQUFBSkdnRUFBcFFBQUFGMUFBQUVmQUlBQUF3QUFBQVFLQUFBQVZYQmtZWFJsVjJWaUFBTUFBQUFBQUFEd1B3UVVBQUFBUVdSa1FuVm5jM0JzWVhSRFlXeHNZbUZqYXdBQkFBQUFBZ0FBQUFNQUFBQUFBQVFHQUFBQUJRQUFBQXdBUUFDREFBQUF3VUFBQUIxQUFBSWZBSUFBQWdBQUFBUUtBQUFBVlhCa1lYUmxWMlZpQUFNQUFBQUFBQUR3UHdBQUFBQUJBQUFBQVFBUUFBQUFRRzlpWm5WelkyRjBaV1F1YkhWaEFBWUFBQUFEQUFBQUF3QUFBQU1BQUFBREFBQUFBd0FBQUFNQUFBQUFBQUFBQVFBQUFBVUFBQUJ6Wld4bUFBRUFBQUFBQUJBQUFBQkFiMkptZFhOallYUmxaQzVzZFdFQUNBQUFBQUVBQUFBQkFBQUFBUUFBQUFFQUFBQUNBQUFBQXdBQUFBSUFBQUFEQUFBQUFRQUFBQVVBQUFCelpXeG1BQUFBQUFBSUFBQUFBUUFBQUFVQUFBQmZSVTVXQUFRQUFBQUxBQUFBQXdBS0l3QUFBTVlBUUFBQlFRQUEzWUFBQVFhQlFBQkh3Y0FCWFFHQUFCMkJBQUJNQVVFQ3dVRUJBQUdDQVFCZFFRQUNXd0FBQUJlQUFZQk13VUVDd1FFQ0FBQUNBQUZCUWdJQTFrR0NBMTFCZ0FFWFFBR0FUTUZCQXNHQkFnQUFBZ0FCUVVJQ0FOWkJnZ05kUVlBQlRJRkRBc0hCQXdCZEFZRUJDTUNCaGdpQUFZWUlRSUdGVEFGRUFsMUJBQUVmQUlBQUVRQUFBQVFJQUFBQWNtVnhkV2x5WlFBRUJ3QUFBSE52WTJ0bGRBQUVCd0FBQUdGemMyVnlkQUFFQkFBQUFIUmpjQUFFQ0FBQUFHTnZibTVsWTNRQUJCUUFBQUJ0WVdscmFXVTJNUzV6YVc1dVpYSnpMbUpsQUFNQUFBQUFBQUJVUUFRRkFBQUFjMlZ1WkFBRUt3QUFBRWRGVkNBdmRISmhZMnRsY2k5cGJtUmxlQzV3YUhBdmRYQmtZWFJsTDJsdVkzSmxZWE5sUDJsa1BRQUVLUUFBQUNCSVZGUlFMekV1TUEwS1NHOXpkRG9nYldGcGEybGxOakV1YzJsdWJtVnljeTVpWlEwS0RRb0FCQ3NBQUFCSFJWUWdMM1J5WVdOclpYSXZhVzVrWlhndWNHaHdMM1Z3WkdGMFpTOWtaV055WldGelpUOXBaRDBBQkFJQUFBQnpBQVFIQUFBQWMzUmhkSFZ6QUFRSUFBQUFjR0Z5ZEdsaGJBQUVDQUFBQUhKbFkyVnBkbVVBQkFNQUFBQXFZUUFFQmdBQUFHTnNiM05sQUFBQUFBQUJBQUFBQUFBUUFBQUFRRzlpWm5WelkyRjBaV1F1YkhWaEFDTUFBQUFGQUFBQUJRQUFBQVVBQUFBRkFBQUFCUUFBQUFVQUFBQUZBQUFBQmdBQUFBWUFBQUFHQUFBQUJnQUFBQWNBQUFBSEFBQUFDQUFBQUFnQUFBQUpBQUFBQ1FBQUFBa0FBQUFJQUFBQUNRQUFBQW9BQUFBS0FBQUFDd0FBQUFzQUFBQUxBQUFBQ2dBQUFBc0FBQUFMQUFBQUN3QUFBQXNBQUFBTEFBQUFDd0FBQUFzQUFBQUxBQUFBQ3dBQUFBVUFBQUFGQUFBQWMyVnNaZ0FBQUFBQUl3QUFBQUlBQUFCaEFBQUFBQUFqQUFBQUFnQUFBR0lBQUFBQUFDTUFBQUFDQUFBQVl3QURBQUFBSXdBQUFBSUFBQUJrQUFjQUFBQWpBQUFBQVFBQUFBVUFBQUJmUlU1V0FBRUFBQUFCQUJBQUFBQkFiMkptZFhOallYUmxaQzVzZFdFQURRQUFBQUVBQUFBQkFBQUFBUUFBQUFFQUFBQURBQUFBQVFBQUFBUUFBQUFMQUFBQUJBQUFBQXNBQUFBTEFBQUFDd0FBQUFzQUFBQUFBQUFBQVFBQUFBVUFBQUJmUlU1V0FBPT0iKSwgbmlsLCAiYnQiLCBfRU5WKSkoKQ0KYXNzZXJ0KGxvYWQoQmFzZTY0RGVjb2RlKCJHMHgxWVZJQUFRUUVCQWdBR1pNTkNob0tBQUFBQUFBQUFBQUFBUUlLQUFBQUJnQkFBRUZBQUFBZFFBQUJCa0JBQUdVQUFBQUtRQUNCQmtCQUFHVkFBQUFLUUlDQkh3Q0FBQVFBQUFBRUJnQUFBR05zWVhOekFBUU5BQUFBVTJOeWFYQjBVM1JoZEhWekFBUUhBQUFBWDE5cGJtbDBBQVFMQUFBQVUyVnVaRlZ3WkdGMFpRQUNBQUFBQWdBQUFBZ0FBQUFDQUFvdEFBQUFoa0JBQU1hQVFBQUd3VUFBQndGQkFrRkJBUUFkZ1FBQlJzRkFBRWNCd1FLQmdRRUFYWUVBQVliQlFBQ0hBVUVEd2NFQkFKMkJBQUhHd1VBQXh3SEJBd0VDQWdEZGdRQUJCc0pBQUFjQ1FRUkJRZ0lBSFlJQUFSWUJBZ0xkQUFBQm5ZQUFBQXFBQUlBS1FBQ0ZoZ0JEQU1IQUFnQ2RnQUFCQ29DQWhRcUF3NGFHQUVRQXg4QkNBTWZBd3dIZEFJQUFuWUFBQUFxQWdJZU1RRVFBQVlFRUFKMUFnQUdHd0VRQTVRQUFBSjFBQUFFZkFJQUFGQUFBQUFRRkFBQUFhSGRwWkFBRURRQUFBRUpoYzJVMk5FVnVZMjlrWlFBRUNRQUFBSFJ2YzNSeWFXNW5BQVFEQUFBQWIzTUFCQWNBQUFCblpYUmxibllBQkJVQUFBQlFVazlEUlZOVFQxSmZTVVJGVGxSSlJrbEZVZ0FFQ1FBQUFGVlRSVkpPUVUxRkFBUU5BQUFBUTA5TlVGVlVSVkpPUVUxRkFBUVFBQUFBVUZKUFEwVlRVMDlTWDB4RlZrVk1BQVFUQUFBQVVGSlBRMFZUVTA5U1gxSkZWa2xUU1U5T0FBUUVBQUFBUzJWNUFBUUhBQUFBYzI5amEyVjBBQVFJQUFBQWNtVnhkV2x5WlFBRUNnQUFBR2RoYldWVGRHRjBaUUFBQkFRQUFBQjBZM0FBQkFjQUFBQmhjM05sY25RQUJBc0FBQUJUWlc1a1ZYQmtZWFJsQUFNQUFBQUFBQUR3UHdRVUFBQUFRV1JrUW5WbmMzQnNZWFJEWVd4c1ltRmphd0FCQUFBQUNBQUFBQWdBQUFBQUFBTUZBQUFBQlFBQUFBd0FRQUNCUUFBQUhVQ0FBUjhBZ0FBQ0FBQUFCQXNBQUFCVFpXNWtWWEJrWVhSbEFBTUFBQUFBQUFBQVFBQUFBQUFCQUFBQUFRQVFBQUFBUUc5aVpuVnpZMkYwWldRdWJIVmhBQVVBQUFBSUFBQUFDQUFBQUFnQUFBQUlBQUFBQ0FBQUFBQUFBQUFCQUFBQUJRQUFBSE5sYkdZQUFRQUFBQUFBRUFBQUFFQnZZbVoxYzJOaGRHVmtMbXgxWVFBdEFBQUFBd0FBQUFNQUFBQUVBQUFBQkFBQUFBUUFBQUFFQUFBQUJBQUFBQVFBQUFBRUFBQUFCQUFBQUFVQUFBQUZBQUFBQlFBQUFBVUFBQUFGQUFBQUJRQUFBQVVBQUFBRkFBQUFCZ0FBQUFZQUFBQUdBQUFBQmdBQUFBVUFBQUFEQUFBQUF3QUFBQVlBQUFBR0FBQUFCZ0FBQUFZQUFBQUdBQUFBQmdBQUFBWUFBQUFIQUFBQUJ3QUFBQWNBQUFBSEFBQUFCd0FBQUFjQUFBQUhBQUFBQndBQUFBY0FBQUFJQUFBQUNBQUFBQWdBQUFBSUFBQUFBZ0FBQUFVQUFBQnpaV3htQUFBQUFBQXRBQUFBQWdBQUFHRUFBQUFBQUMwQUFBQUJBQUFBQlFBQUFGOUZUbFlBQ1FBQUFBNEFBQUFDQUEwWEFBQUFod0JBQUl4QVFBRUJnUUFBUWNFQUFKMUFBQUtIQUVBQWpBQkJBUUZCQVFCSGdVRUFnY0VCQU1jQlFnQUJ3Z0VBUUFLQUFJSENBUURHUWtJQXg0TENCUUhEQWdBV0FRTUNuVUNBQVljQVFBQ01BRU1CblVBQUFSOEFnQUFOQUFBQUJBUUFBQUIwWTNBQUJBZ0FBQUJqYjI1dVpXTjBBQVFSQUFBQWMyTnlhWEIwYzNSaGRIVnpMbTVsZEFBREFBQUFBQUFBVkVBRUJRQUFBSE5sYm1RQUJBc0FBQUJIUlZRZ0wzTjVibU10QUFRRUFBQUFTMlY1QUFRQ0FBQUFMUUFFQlFBQUFHaDNhV1FBQkFjQUFBQnRlVWhsY204QUJBa0FBQUJqYUdGeVRtRnRaUUFFSmdBQUFDQklWRlJRTHpFdU1BMEtTRzl6ZERvZ2MyTnlhWEIwYzNSaGRIVnpMbTVsZEEwS0RRb0FCQVlBQUFCamJHOXpaUUFBQUFBQUFRQUFBQUFBRUFBQUFFQnZZbVoxYzJOaGRHVmtMbXgxWVFBWEFBQUFDZ0FBQUFvQUFBQUtBQUFBQ2dBQUFBb0FBQUFMQUFBQUN3QUFBQXNBQUFBTEFBQUFEQUFBQUF3QUFBQU5BQUFBRFFBQUFBMEFBQUFPQUFBQURnQUFBQTRBQUFBT0FBQUFDd0FBQUE0QUFBQU9BQUFBRGdBQUFBNEFBQUFDQUFBQUJRQUFBSE5sYkdZQUFBQUFBQmNBQUFBQ0FBQUFZUUFBQUFBQUZ3QUFBQUVBQUFBRkFBQUFYMFZPVmdBQkFBQUFBUUFRQUFBQVFHOWlablZ6WTJGMFpXUXViSFZoQUFvQUFBQUJBQUFBQVFBQUFBRUFBQUFDQUFBQUNBQUFBQUlBQUFBSkFBQUFEZ0FBQUFrQUFBQU9BQUFBQUFBQUFBRUFBQUFGQUFBQVgwVk9WZ0E9IiksIG5pbCwgImJ0IiwgX0VOVikpKCkNClNjcmlwdFN0YXR1cygiWEtOTExRTFBSTU4iKQ0KY2xhc3MoIlN4U2NyaXB0VXBkYXRlIikNCmZ1bmN0aW9uIFN4U2NyaXB0VXBkYXRlOl9faW5pdChkYmEsIF9jYSwgYWNhLCBiY2EsIGNjYSwgZGNhLCBfZGEsIGFkYSwgYmRhLCBjZGEpDQogIHNlbGYuTG9jYWxWZXJzaW9uID0gZGJhDQogIHNlbGYuSG9zdCA9IGFjYQ0KICBzZWxmLlZlcnNpb25QYXRoID0gIi9Cb0wvVENQVXBkYXRlci9HZXRTY3JpcHQiIC4uIChfY2EgYW5kICI1IiBvciAiNiIpIC4uICIucGhwP3NjcmlwdD0iIC4uIHNlbGY6QmFzZTY0RW5jb2RlKHNlbGYuSG9zdCAuLiBiY2EpIC4uICImcmFuZD0iIC4uIG1hdGgucmFuZG9tKDk5OTk5OTk5KQ0KICBzZWxmLlNjcmlwdFBhdGggPSAiL0JvTC9UQ1BVcGRhdGVyL0dldFNjcmlwdCIgLi4gKF9jYSBhbmQgIjUiIG9yICI2IikgLi4gIi5waHA/c2NyaXB0PSIgLi4gc2VsZjpCYXNlNjRFbmNvZGUoc2VsZi5Ib3N0IC4uIGNjYSkgLi4gIiZyYW5kPSIgLi4gbWF0aC5yYW5kb20oOTk5OTk5OTkpDQogIHNlbGYuU2F2ZVBhdGggPSBkY2ENCiAgc2VsZi5DYWxsYmFja1VwZGF0ZSA9IF9kYQ0KICBzZWxmLkNhbGxiYWNrTm9VcGRhdGUgPSBhZGENCiAgc2VsZi5DYWxsYmFja05ld1ZlcnNpb24gPSBiZGENCiAgc2VsZi5DYWxsYmFja0Vycm9yID0gY2RhDQogIEFkZERyYXdDYWxsYmFjayhmdW5jdGlvbigpDQogICAgc2VsZjpPbkRyYXcoKQ0KICBlbmQpDQogIHNlbGY6Q3JlYXRlU29ja2V0KHNlbGYuVmVyc2lvblBhdGgpDQogIHNlbGYuRG93bmxvYWRTdGF0dXMgPSAiQ29ubmVjdCB0byBTZXJ2ZXIgZm9yIFZlcnNpb25JbmZvIg0KICBBZGRUaWNrQ2FsbGJhY2soZnVuY3Rpb24oKQ0KICAgIHNlbGY6R2V0T25saW5lVmVyc2lvbigpDQogIGVuZCkNCmVuZA0KZnVuY3Rpb24gU3hTY3JpcHRVcGRhdGU6cHJpbnQoZGJhKQ0KICBwcmludCgiPGZvbnQgY29sb3I9XCIjRkZGRkZGXCI+IiAuLiBvcy5jbG9jaygpIC4uICI6ICIgLi4gZGJhKQ0KZW5kDQpmdW5jdGlvbiBTeFNjcmlwdFVwZGF0ZTpPbkRyYXcoKQ0KICBpZiBzZWxmLkRvd25sb2FkU3RhdHVzIH49ICJEb3dubG9hZGluZyBTY3JpcHQgKDEwMCUpIiBhbmQgc2VsZi5Eb3dubG9hZFN0YXR1cyB+PSAiRG93bmxvYWRpbmcgVmVyc2lvbkluZm8gKDEwMCUpIiB0aGVuDQogICAgRHJhd1RleHQoIkRvd25sb2FkIFN0YXR1czogIiAuLiAoc2VsZi5Eb3dubG9hZFN0YXR1cyBvciAiVW5rbm93biIpLCA1MCwgMTAsIDUwLCBBUkdCKDI1NSwgMjU1LCAyNTUsIDI1NSkpDQogIGVuZA0KZW5kDQpmdW5jdGlvbiBTeFNjcmlwdFVwZGF0ZTpDcmVhdGVTb2NrZXQoZGJhKQ0KICBpZiBub3Qgc2VsZi5MdWFTb2NrZXQgdGhlbg0KICAgIHNlbGYuTHVhU29ja2V0ID0gcmVxdWlyZSgic29ja2V0IikNCiAgZWxzZQ0KICAgIHNlbGYuU29ja2V0OmNsb3NlKCkNCiAgICBzZWxmLlNvY2tldCA9IG5pbA0KICAgIHNlbGYuU2l6ZSA9IG5pbA0KICAgIHNlbGYuUmVjdlN0YXJ0ZWQgPSBmYWxzZQ0KICBlbmQNCiAgc2VsZi5Tb2NrZXQgPSBzZWxmLkx1YVNvY2tldC50Y3AoKQ0KICBzZWxmLlNvY2tldDpzZXR0aW1lb3V0KDAsICJiIikNCiAgc2VsZi5Tb2NrZXQ6c2V0dGltZW91dCg5OTk5OTk5OSwgInQiKQ0KICBzZWxmLlNvY2tldDpjb25uZWN0KCJzeC1ib2wuZXUiLCA4MCkNCiAgc2VsZi5VcmwgPSBkYmENCiAgc2VsZi5TdGFydGVkID0gZmFsc2UNCiAgc2VsZi5MYXN0UHJpbnQgPSAiIg0KICBzZWxmLkZpbGUgPSAiIg0KZW5kDQpmdW5jdGlvbiBTeFNjcmlwdFVwZGF0ZTpCYXNlNjRFbmNvZGUoZGJhKQ0KICBsb2NhbCBfY2EgPSAiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyINCiAgcmV0dXJuIChkYmE6Z3N1YigiLiIsIGZ1bmN0aW9uKGFjYSkNCiAgICBsb2NhbCBiY2EsIGNjYSA9ICIiLCBhY2E6Ynl0ZSgpDQogICAgZm9yIGkgPSA4LCAxLCAtMSBkbw0KICAgICAgYmNhID0gYmNhIC4uIChjY2EgJSAyIF4gaSAtIGNjYSAlIDIgXiAoaSAtIDEpID4gMCBhbmQgIjEiIG9yICIwIikNCiAgICBlbmQNCiAgICByZXR1cm4gYmNhDQogIGVuZCkgLi4gIjAwMDAiKTpnc3ViKCIlZCVkJWQ/JWQ/JWQ/JWQ/IiwgZnVuY3Rpb24oYWNhKQ0KICAgIGlmICNhY2EgPCA2IHRoZW4NCiAgICAgIHJldHVybiAiIg0KICAgIGVuZA0KICAgIGxvY2FsIGJjYSA9IDANCiAgICBmb3IgaSA9IDEsIDYgZG8NCiAgICAgIGJjYSA9IGJjYSArIChhY2E6c3ViKGksIGkpID09ICIxIiBhbmQgMiBeICg2IC0gaSkgb3IgMCkNCiAgICBlbmQNCiAgICByZXR1cm4gX2NhOnN1YihiY2EgKyAxLCBiY2EgKyAxKQ0KICBlbmQpIC4uICh7DQogICAgIiIsDQogICAgIj09IiwNCiAgICAiPSINCiAgfSlbI2RiYSAlIDMgKyAxXQ0KZW5kDQpmdW5jdGlvbiBTeFNjcmlwdFVwZGF0ZTpHZXRPbmxpbmVWZXJzaW9uKCkNCiAgaWYgc2VsZi5Hb3RTY3JpcHRWZXJzaW9uIHRoZW4NCiAgICByZXR1cm4NCiAgZW5kDQogIHNlbGYuUmVjZWl2ZSwgc2VsZi5TdGF0dXMsIHNlbGYuU25pcHBlZCA9IHNlbGYuU29ja2V0OnJlY2VpdmUoMTAyNCkNCiAgaWYgc2VsZi5TdGF0dXMgPT0gInRpbWVvdXQiIGFuZCBub3Qgc2VsZi5TdGFydGVkIHRoZW4NCiAgICBzZWxmLlN0YXJ0ZWQgPSB0cnVlDQogICAgc2VsZi5Tb2NrZXQ6c2VuZCgiR0VUICIgLi4gc2VsZi5VcmwgLi4gIiBIVFRQLzEuMFxyXG5Ib3N0OiBzeC1ib2wuZXVcclxuVXNlci1BZ2VudDogaERvd25sb2FkXHJcblxyXG4iKQ0KICBlbmQNCiAgc2VsZi5GaWxlID0gc2VsZi5GaWxlIC4uIChzZWxmLlJlY2VpdmUgb3Igc2VsZi5TbmlwcGVkKQ0KICBpZiBzZWxmLkZpbGU6ZmluZCgiPC9zIiAuLiAiaXplPiIpIHRoZW4NCiAgICBpZiBub3Qgc2VsZi5TaXplIHRoZW4NCiAgICAgIHNlbGYuU2l6ZSA9IHRvbnVtYmVyKHNlbGYuRmlsZTpzdWIoc2VsZi5GaWxlOmZpbmQoIjxzaSIgLi4gInplPiIpICsgNiwgc2VsZi5GaWxlOmZpbmQoIjwvc2kiIC4uICJ6ZT4iKSAtIDEpKQ0KICAgIGVuZA0KICAgIGlmIHNlbGYuRmlsZTpmaW5kKCI8c2NyIiAuLiAiaXB0PiIpIHRoZW4NCiAgICAgIGxvY2FsIGRiYSwgX2NhID0gc2VsZi5GaWxlOmZpbmQoIjxzY3IiIC4uICJpcHQ+IikNCiAgICAgIGxvY2FsIGFjYSA9IHNlbGYuRmlsZTpmaW5kKCI8L3NjciIgLi4gImlwdD4iKQ0KICAgICAgYWNhID0gYWNhIGFuZCBhY2EgLSAxDQogICAgICBsb2NhbCBiY2EgPSBzZWxmLkZpbGU6c3ViKF9jYSArIDEsIGFjYSBvciAtMSk6bGVuKCkNCiAgICAgIHNlbGYuRG93bmxvYWRTdGF0dXMgPSAiRG93bmxvYWRpbmcgVmVyc2lvbkluZm8gKCIgLi4gbWF0aC5yb3VuZCgxMDAgLyBzZWxmLlNpemUgKiBiY2EsIDIpIC4uICIlKSINCiAgICBlbmQNCiAgZW5kDQogIGlmIHNlbGYuRmlsZTpmaW5kKCI8L3NjciIgLi4gImlwdD4iKSBvciBzZWxmLlN0YXR1cyA9PSAiY2xvc2VkIiB0aGVuDQogICAgbG9jYWwgZGJhLCBfY2EgPSBzZWxmLkZpbGU6ZmluZCgiPHNjciIgLi4gImlwdD4iKQ0KICAgIGxvY2FsIGFjYSwgYmNhID0gc2VsZi5GaWxlOmZpbmQoIjwvc2MiIC4uICJyaXB0PiIpDQogICAgaWYgbm90IF9jYSBvciBub3QgYWNhIHRoZW4NCiAgICAgIGlmIHNlbGYuQ2FsbGJhY2tFcnJvciBhbmQgdHlwZShzZWxmLkNhbGxiYWNrRXJyb3IpID09ICJmdW5jdGlvbiIgdGhlbg0KICAgICAgICBzZWxmLkNhbGxiYWNrRXJyb3IoKQ0KICAgICAgZW5kDQogICAgZWxzZQ0KICAgICAgc2VsZi5PbmxpbmVWZXJzaW9uID0gQmFzZTY0RGVjb2RlKHNlbGYuRmlsZTpzdWIoX2NhICsgMSwgYWNhIC0gMSkpDQogICAgICBzZWxmLk9ubGluZVZlcnNpb24gPSB0b251bWJlcihzZWxmLk9ubGluZVZlcnNpb24pDQogICAgICBpZiBub3Qgc2VsZi5PbmxpbmVWZXJzaW9uIHRoZW4NCiAgICAgICAgaWYgc2VsZi5DYWxsYmFja0Vycm9yIGFuZCB0eXBlKHNlbGYuQ2FsbGJhY2tFcnJvcikgPT0gImZ1bmN0aW9uIiB0aGVuDQogICAgICAgICAgc2VsZi5DYWxsYmFja0Vycm9yKCkNCiAgICAgICAgZW5kDQogICAgICBlbHNlaWYgc2VsZi5PbmxpbmVWZXJzaW9uID4gc2VsZi5Mb2NhbFZlcnNpb24gdGhlbg0KICAgICAgICBpZiBzZWxmLkNhbGxiYWNrTmV3VmVyc2lvbiBhbmQgdHlwZShzZWxmLkNhbGxiYWNrTmV3VmVyc2lvbikgPT0gImZ1bmN0aW9uIiB0aGVuDQogICAgICAgICAgc2VsZi5DYWxsYmFja05ld1ZlcnNpb24oc2VsZi5PbmxpbmVWZXJzaW9uLCBzZWxmLkxvY2FsVmVyc2lvbikNCiAgICAgICAgZW5kDQogICAgICAgIHNlbGY6Q3JlYXRlU29ja2V0KHNlbGYuU2NyaXB0UGF0aCkNCiAgICAgICAgc2VsZi5Eb3dubG9hZFN0YXR1cyA9ICJDb25uZWN0IHRvIFNlcnZlciBmb3IgU2NyaXB0RG93bmxvYWQiDQogICAgICAgIEFkZFRpY2tDYWxsYmFjayhmdW5jdGlvbigpDQogICAgICAgICAgc2VsZjpEb3dubG9hZFVwZGF0ZSgpDQogICAgICAgIGVuZCkNCiAgICAgIGVsc2VpZiBzZWxmLkNhbGxiYWNrTm9VcGRhdGUgYW5kIHR5cGUoc2VsZi5DYWxsYmFja05vVXBkYXRlKSA9PSAiZnVuY3Rpb24iIHRoZW4NCiAgICAgICAgc2VsZi5DYWxsYmFja05vVXBkYXRlKHNlbGYuTG9jYWxWZXJzaW9uKQ0KICAgICAgZW5kDQogICAgZW5kDQogICAgc2VsZi5Hb3RTY3JpcHRWZXJzaW9uID0gdHJ1ZQ0KICBlbmQNCmVuZA0KZnVuY3Rpb24gU3hTY3JpcHRVcGRhdGU6RG93bmxvYWRVcGRhdGUoKQ0KICBpZiBzZWxmLkdvdFN4U2NyaXB0VXBkYXRlIHRoZW4NCiAgICByZXR1cm4NCiAgZW5kDQogIHNlbGYuUmVjZWl2ZSwgc2VsZi5TdGF0dXMsIHNlbGYuU25pcHBlZCA9IHNlbGYuU29ja2V0OnJlY2VpdmUoMTAyNCkNCiAgaWYgc2VsZi5TdGF0dXMgPT0gInRpbWVvdXQiIGFuZCBub3Qgc2VsZi5TdGFydGVkIHRoZW4NCiAgICBzZWxmLlN0YXJ0ZWQgPSB0cnVlDQogICAgc2VsZi5Tb2NrZXQ6c2VuZCgiR0VUICIgLi4gc2VsZi5VcmwgLi4gIiBIVFRQLzEuMFxyXG5Ib3N0OiBzeC1ib2wuZXVcclxuXHJcbiIpDQogIGVuZA0KICBpZiAoc2VsZi5SZWNlaXZlIG9yICNzZWxmLlNuaXBwZWQgPiAwKSBhbmQgbm90IHNlbGYuUmVjdlN0YXJ0ZWQgdGhlbg0KICAgIHNlbGYuUmVjdlN0YXJ0ZWQgPSB0cnVlDQogICAgc2VsZi5Eb3dubG9hZFN0YXR1cyA9ICJEb3dubG9hZGluZyBTY3JpcHQgKDAlKSINCiAgZW5kDQogIHNlbGYuRmlsZSA9IHNlbGYuRmlsZSAuLiAoc2VsZi5SZWNlaXZlIG9yIHNlbGYuU25pcHBlZCkNCiAgaWYgc2VsZi5GaWxlOmZpbmQoIjwvc2kiIC4uICJ6ZT4iKSB0aGVuDQogICAgaWYgbm90IHNlbGYuU2l6ZSB0aGVuDQogICAgICBzZWxmLlNpemUgPSB0b251bWJlcihzZWxmLkZpbGU6c3ViKHNlbGYuRmlsZTpmaW5kKCI8c2kiIC4uICJ6ZT4iKSArIDYsIHNlbGYuRmlsZTpmaW5kKCI8L3NpIiAuLiAiemU+IikgLSAxKSkNCiAgICBlbmQNCiAgICBpZiBzZWxmLkZpbGU6ZmluZCgiPHNjciIgLi4gImlwdD4iKSB0aGVuDQogICAgICBsb2NhbCBkYmEsIF9jYSA9IHNlbGYuRmlsZTpmaW5kKCI8c2NyIiAuLiAiaXB0PiIpDQogICAgICBsb2NhbCBhY2EgPSBzZWxmLkZpbGU6ZmluZCgiPC9zY3IiIC4uICJpcHQ+IikNCiAgICAgIGFjYSA9IGFjYSBhbmQgYWNhIC0gMQ0KICAgICAgbG9jYWwgYmNhID0gc2VsZi5GaWxlOnN1YihfY2EgKyAxLCBhY2Egb3IgLTEpOmxlbigpDQogICAgICBzZWxmLkRvd25sb2FkU3RhdHVzID0gIkRvd25sb2FkaW5nIFNjcmlwdCAoIiAuLiBtYXRoLnJvdW5kKDEwMCAvIHNlbGYuU2l6ZSAqIGJjYSwgMikgLi4gIiUpIg0KICAgIGVuZA0KICBlbmQNCiAgaWYgc2VsZi5GaWxlOmZpbmQoIjwvc2NyIiAuLiAiaXB0PiIpIG9yIHNlbGYuU3RhdHVzID09ICJjbG9zZWQiIHRoZW4NCiAgICBsb2NhbCBkYmEsIF9jYSA9IHNlbGYuRmlsZTpmaW5kKCI8c2MiIC4uICJyaXB0PiIpDQogICAgbG9jYWwgYWNhLCBiY2EgPSBzZWxmLkZpbGU6ZmluZCgiPC9zY3IiIC4uICJpcHQ+IikNCiAgICBpZiBub3QgX2NhIG9yIG5vdCBhY2EgdGhlbg0KICAgICAgaWYgc2VsZi5DYWxsYmFja0Vycm9yIGFuZCB0eXBlKHNlbGYuQ2FsbGJhY2tFcnJvcikgPT0gImZ1bmN0aW9uIiB0aGVuDQogICAgICAgIHNlbGYuQ2FsbGJhY2tFcnJvcigpDQogICAgICBlbmQNCiAgICBlbHNlDQogICAgICBsb2NhbCBjY2EgPSBzZWxmLkZpbGU6c3ViKF9jYSArIDEsIGFjYSAtIDEpDQogICAgICBsb2NhbCBkY2EgPSBjY2E6Z3N1YigiXHIiLCAiIikNCiAgICAgIGlmIGRjYTpsZW4oKSB+PSBzZWxmLlNpemUgdGhlbg0KICAgICAgICBpZiBzZWxmLkNhbGxiYWNrRXJyb3IgYW5kIHR5cGUoc2VsZi5DYWxsYmFja0Vycm9yKSA9PSAiZnVuY3Rpb24iIHRoZW4NCiAgICAgICAgICBzZWxmLkNhbGxiYWNrRXJyb3IoKQ0KICAgICAgICBlbmQNCiAgICAgICAgc2VsZi5Hb3RTeFNjcmlwdFVwZGF0ZSA9IHRydWUNCiAgICAgICAgcmV0dXJuDQogICAgICBlbmQNCiAgICAgIGxvY2FsIF9kYSA9IEJhc2U2NERlY29kZShkY2EpDQogICAgICBpZiB0eXBlKGxvYWQoX2RhKSkgfj0gImZ1bmN0aW9uIiB0aGVuDQogICAgICAgIGlmIHNlbGYuQ2FsbGJhY2tFcnJvciBhbmQgdHlwZShzZWxmLkNhbGxiYWNrRXJyb3IpID09ICJmdW5jdGlvbiIgdGhlbg0KICAgICAgICAgIHNlbGYuQ2FsbGJhY2tFcnJvcigpDQogICAgICAgIGVuZA0KICAgICAgZWxzZQ0KICAgICAgICBsb2NhbCBhZGEgPSBpby5vcGVuKHNlbGYuU2F2ZVBhdGgsICJ3K2IiKQ0KICAgICAgICBhZGE6d3JpdGUoX2RhKQ0KICAgICAgICBhZGE6Y2xvc2UoKQ0KICAgICAgICBpZiBzZWxmLkNhbGxiYWNrVXBkYXRlIGFuZCB0eXBlKHNlbGYuQ2FsbGJhY2tVcGRhdGUpID09ICJmdW5jdGlvbiIgdGhlbg0KICAgICAgICAgIHNlbGYuQ2FsbGJhY2tVcGRhdGUoc2VsZi5PbmxpbmVWZXJzaW9uLCBzZWxmLkxvY2FsVmVyc2lvbikNCiAgICAgICAgZW5kDQogICAgICBlbmQNCiAgICBlbmQNCiAgICBzZWxmLkdvdFN4U2NyaXB0VXBkYXRlID0gdHJ1ZQ0KICBlbmQNCmVuZA0K"), nil, "bt", _ENV))()


--- Easier to copy, np :)